{"ast":null,"code":"// src/rating-group.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"rating-group\").parts(\"root\", \"label\", \"item\", \"control\");\nvar parts = anatomy.build();\n\n// src/rating-group.connect.ts\nimport { getEventKey, getEventPoint, getRelativePoint, isLeftClick } from \"@zag-js/dom-event\";\nimport { ariaAttr, dataAttr } from \"@zag-js/dom-query\";\n\n// src/rating-group.dom.ts\nimport { createScope, query } from \"@zag-js/dom-query\";\nimport { dispatchInputValueEvent } from \"@zag-js/form-utils\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `rating:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `rating:${ctx.id}:label`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `rating:${ctx.id}:input`,\n  getControlId: ctx => ctx.ids?.control ?? `rating:${ctx.id}:control`,\n  getItemId: (ctx, id) => ctx.ids?.item?.(id) ?? `rating:${ctx.id}:item:${id}`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getRadioEl: function (ctx) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ctx.value;\n    const selector = `[role=radio][aria-posinset='${Math.ceil(value)}']`;\n    return query(dom.getControlEl(ctx), selector);\n  },\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n  dispatchChangeEvent: ctx => {\n    const inputEl = dom.getHiddenInputEl(ctx);\n    if (!inputEl) return;\n    dispatchInputValueEvent(inputEl, {\n      value: ctx.value\n    });\n  }\n});\n\n// src/rating-group.connect.ts\nfunction connect(state, send, normalize) {\n  const interactive = state.context.isInteractive;\n  const disabled = state.context.isDisabled;\n  const value = state.context.value;\n  const hoveredValue = state.context.hoveredValue;\n  const translations = state.context.translations;\n  function getItemState(props2) {\n    const value2 = state.context.isHovering ? state.context.hoveredValue : state.context.value;\n    const equal = Math.ceil(value2) === props2.index;\n    const highlighted = props2.index <= value2 || equal;\n    const half = equal && Math.abs(value2 - props2.index) === 0.5;\n    return {\n      highlighted,\n      half,\n      checked: equal || state.context.value === -1 && props2.index === 1\n    };\n  }\n  return {\n    hovering: state.context.isHovering,\n    value,\n    hoveredValue,\n    count: state.context.count,\n    items: Array.from({\n      length: state.context.count\n    }).map((_, index) => index + 1),\n    setValue(value2) {\n      send({\n        type: \"SET_VALUE\",\n        value: value2\n      });\n    },\n    clearValue() {\n      send(\"CLEAR_VALUE\");\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context)\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        name: state.context.name,\n        form: state.context.form,\n        type: \"text\",\n        hidden: true,\n        disabled,\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        defaultValue: state.context.value\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          event.preventDefault();\n          const radioEl = dom.getRadioEl(state.context, 1);\n          radioEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        id: dom.getControlId(state.context),\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        role: \"radiogroup\",\n        \"aria-orientation\": \"horizontal\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-readonly\": ariaAttr(state.context.readOnly),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        tabIndex: state.context.readOnly ? 0 : -1,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerMove(event) {\n          if (!interactive) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"GROUP_POINTER_OVER\");\n        },\n        onPointerLeave(event) {\n          if (!interactive) return;\n          if (event.pointerType === \"touch\") return;\n          send(\"GROUP_POINTER_LEAVE\");\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props2) {\n      const {\n        index\n      } = props2;\n      const itemState = getItemState(props2);\n      const valueText = translations.ratingValueText(index);\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        id: dom.getItemId(state.context, index.toString()),\n        role: \"radio\",\n        tabIndex: disabled ? void 0 : itemState.checked ? 0 : -1,\n        \"aria-roledescription\": \"rating\",\n        \"aria-label\": valueText,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"aria-setsize\": state.context.count,\n        \"aria-checked\": itemState.checked,\n        \"data-checked\": dataAttr(itemState.checked),\n        \"aria-posinset\": index,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-half\": dataAttr(itemState.half),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          event.preventDefault();\n        },\n        onPointerMove(event) {\n          if (!interactive) return;\n          const point = getEventPoint(event);\n          const relativePoint = getRelativePoint(point, event.currentTarget);\n          const percentX = relativePoint.getPercentValue({\n            orientation: \"horizontal\",\n            dir: state.context.dir\n          });\n          const isMidway = percentX < 0.5;\n          send({\n            type: \"POINTER_OVER\",\n            index,\n            isMidway\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const keyMap = {\n            ArrowLeft() {\n              send(\"ARROW_LEFT\");\n            },\n            ArrowRight() {\n              send(\"ARROW_RIGHT\");\n            },\n            ArrowUp() {\n              send(\"ARROW_LEFT\");\n            },\n            ArrowDown() {\n              send(\"ARROW_RIGHT\");\n            },\n            Space() {\n              send({\n                type: \"SPACE\",\n                value: index\n              });\n            },\n            Home() {\n              send(\"HOME\");\n            },\n            End() {\n              send(\"END\");\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            event.preventDefault();\n            exec(event);\n          }\n        },\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"CLICK\",\n            value: index\n          });\n        },\n        onFocus() {\n          if (!interactive) return;\n          send(\"FOCUS\");\n        },\n        onBlur() {\n          if (!interactive) return;\n          send(\"BLUR\");\n        }\n      });\n    }\n  };\n}\n\n// src/rating-group.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { raf } from \"@zag-js/dom-query\";\nimport { trackFormControl } from \"@zag-js/form-utils\";\nimport { compact, isEqual } from \"@zag-js/utils\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"rating\",\n    initial: \"idle\",\n    context: {\n      name: \"rating\",\n      count: 5,\n      dir: \"ltr\",\n      value: -1,\n      readOnly: false,\n      disabled: false,\n      ...ctx,\n      hoveredValue: -1,\n      fieldsetDisabled: false,\n      translations: {\n        ratingValueText: index => `${index} stars`,\n        ...ctx.translations\n      }\n    },\n    created: [\"roundValueIfNeeded\"],\n    watch: {\n      allowHalf: [\"roundValueIfNeeded\"]\n    },\n    computed: {\n      isDisabled: ctx2 => !!ctx2.disabled || ctx2.fieldsetDisabled,\n      isInteractive: ctx2 => !(ctx2.isDisabled || ctx2.readOnly),\n      isHovering: ctx2 => ctx2.hoveredValue > -1\n    },\n    activities: [\"trackFormControlState\"],\n    on: {\n      SET_VALUE: {\n        actions: [\"setValue\"]\n      },\n      CLEAR_VALUE: {\n        actions: [\"clearValue\"]\n      }\n    },\n    states: {\n      idle: {\n        entry: \"clearHoveredValue\",\n        on: {\n          GROUP_POINTER_OVER: \"hover\",\n          FOCUS: \"focus\",\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          }\n        }\n      },\n      focus: {\n        on: {\n          POINTER_OVER: {\n            actions: \"setHoveredValue\"\n          },\n          GROUP_POINTER_LEAVE: {\n            actions: \"clearHoveredValue\"\n          },\n          BLUR: \"idle\",\n          SPACE: {\n            guard: \"isValueEmpty\",\n            actions: [\"setValue\"]\n          },\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          },\n          ARROW_LEFT: {\n            actions: [\"setPrevValue\", \"focusActiveRadio\"]\n          },\n          ARROW_RIGHT: {\n            actions: [\"setNextValue\", \"focusActiveRadio\"]\n          },\n          HOME: {\n            actions: [\"setValueToMin\", \"focusActiveRadio\"]\n          },\n          END: {\n            actions: [\"setValueToMax\", \"focusActiveRadio\"]\n          }\n        }\n      },\n      hover: {\n        on: {\n          POINTER_OVER: {\n            actions: \"setHoveredValue\"\n          },\n          GROUP_POINTER_LEAVE: [{\n            guard: \"isRadioFocused\",\n            target: \"focus\",\n            actions: \"clearHoveredValue\"\n          }, {\n            target: \"idle\",\n            actions: \"clearHoveredValue\"\n          }],\n          CLICK: {\n            actions: [\"setValue\", \"focusActiveRadio\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isInteractive: ctx2 => !(ctx2.disabled || ctx2.readOnly),\n      isHoveredValueEmpty: ctx2 => ctx2.hoveredValue === -1,\n      isValueEmpty: ctx2 => ctx2.value <= 0,\n      isRadioFocused: ctx2 => !!dom.getControlEl(ctx2)?.contains(dom.getActiveElement(ctx2))\n    },\n    activities: {\n      trackFormControlState(ctx2, _evt, _ref) {\n        let {\n          initialContext\n        } = _ref;\n        return trackFormControl(dom.getHiddenInputEl(ctx2), {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            set.value(ctx2, initialContext.value);\n          }\n        });\n      }\n    },\n    actions: {\n      clearHoveredValue(ctx2) {\n        set.hoveredValue(ctx2, -1);\n      },\n      focusActiveRadio(ctx2) {\n        raf(() => dom.getRadioEl(ctx2)?.focus());\n      },\n      setPrevValue(ctx2) {\n        const factor = ctx2.allowHalf ? 0.5 : 1;\n        set.value(ctx2, Math.max(0, ctx2.value - factor));\n      },\n      setNextValue(ctx2) {\n        const factor = ctx2.allowHalf ? 0.5 : 1;\n        const value = ctx2.value === -1 ? 0 : ctx2.value;\n        set.value(ctx2, Math.min(ctx2.count, value + factor));\n      },\n      setValueToMin(ctx2) {\n        set.value(ctx2, 1);\n      },\n      setValueToMax(ctx2) {\n        set.value(ctx2, ctx2.count);\n      },\n      setValue(ctx2, evt) {\n        const value = ctx2.hoveredValue === -1 ? evt.value : ctx2.hoveredValue;\n        set.value(ctx2, value);\n      },\n      clearValue(ctx2) {\n        set.value(ctx2, -1);\n      },\n      setHoveredValue(ctx2, evt) {\n        const half = ctx2.allowHalf && evt.isMidway;\n        const factor = half ? 0.5 : 0;\n        set.hoveredValue(ctx2, evt.index - factor);\n      },\n      roundValueIfNeeded(ctx2) {\n        if (ctx2.allowHalf) return;\n        ctx2.value = Math.round(ctx2.value);\n      }\n    }\n  });\n}\nvar invoke = {\n  change: ctx => {\n    ctx.onValueChange?.({\n      value: ctx.value\n    });\n    dom.dispatchChangeEvent(ctx);\n  },\n  hoverChange: ctx => {\n    ctx.onHoverChange?.({\n      hoveredValue: ctx.hoveredValue\n    });\n  }\n};\nvar set = {\n  value: (ctx, value) => {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.change(ctx);\n  },\n  hoveredValue: (ctx, value) => {\n    if (isEqual(ctx.hoveredValue, value)) return;\n    ctx.hoveredValue = value;\n    invoke.hoverChange(ctx);\n  }\n};\n\n// src/rating-group.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"allowHalf\", \"autoFocus\", \"count\", \"dir\", \"disabled\", \"form\", \"getRootNode\", \"id\", \"ids\", \"name\", \"onHoverChange\", \"onValueChange\", \"required\", \"readOnly\", \"translations\", \"value\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"index\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, connect, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventKey","getEventPoint","getRelativePoint","isLeftClick","ariaAttr","dataAttr","createScope","query","dispatchInputValueEvent","dom","getRootId","ctx","ids","root","id","getLabelId","label","getHiddenInputId","hiddenInput","getControlId","control","getItemId","item","getRootEl","getById","getControlEl","getRadioEl","value","arguments","length","undefined","selector","Math","ceil","getHiddenInputEl","dispatchChangeEvent","inputEl","connect","state","send","normalize","interactive","context","isInteractive","disabled","isDisabled","hoveredValue","translations","getItemState","props2","value2","isHovering","equal","index","highlighted","half","abs","checked","hovering","count","items","Array","from","map","_","setValue","type","clearValue","getRootProps","element","attrs","dir","getHiddenInputProps","input","name","form","hidden","readOnly","required","defaultValue","getLabelProps","htmlFor","onClick","event","defaultPrevented","preventDefault","radioEl","focus","preventScroll","getControlProps","role","tabIndex","onPointerMove","pointerType","onPointerLeave","getItemProps","itemState","valueText","ratingValueText","toString","onPointerDown","point","relativePoint","currentTarget","percentX","getPercentValue","orientation","isMidway","onKeyDown","keyMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Space","Home","End","key","exec","onFocus","onBlur","createMachine","raf","trackFormControl","compact","isEqual","machine","userContext","initial","fieldsetDisabled","created","watch","allowHalf","computed","ctx2","activities","on","SET_VALUE","actions","CLEAR_VALUE","states","idle","entry","GROUP_POINTER_OVER","FOCUS","CLICK","POINTER_OVER","GROUP_POINTER_LEAVE","BLUR","SPACE","guard","ARROW_LEFT","ARROW_RIGHT","HOME","END","hover","target","guards","isHoveredValueEmpty","isValueEmpty","isRadioFocused","contains","getActiveElement","trackFormControlState","_evt","_ref","initialContext","onFieldsetDisabledChange","onFormReset","set","clearHoveredValue","focusActiveRadio","setPrevValue","factor","max","setNextValue","min","setValueToMin","setValueToMax","evt","setHoveredValue","roundValueIfNeeded","round","invoke","change","onValueChange","hoverChange","onHoverChange","createProps","createSplitProps","props","splitProps","itemProps","splitItemProps"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@zag-js/rating-group/src/rating-group.anatomy.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/rating-group/src/rating-group.connect.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/rating-group/src/rating-group.dom.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/rating-group/src/rating-group.machine.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/rating-group/src/rating-group.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"rating-group\").parts(\"root\", \"label\", \"item\", \"control\")\nexport const parts = anatomy.build()\n","import { getEventKey, getEventPoint, getRelativePoint, isLeftClick, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { ariaAttr, dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./rating-group.anatomy\"\nimport { dom } from \"./rating-group.dom\"\nimport type { ItemProps, ItemState, MachineApi, Send, State } from \"./rating-group.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const interactive = state.context.isInteractive\n  const disabled = state.context.isDisabled\n  const value = state.context.value\n  const hoveredValue = state.context.hoveredValue\n  const translations = state.context.translations\n\n  function getItemState(props: ItemProps): ItemState {\n    const value = state.context.isHovering ? state.context.hoveredValue : state.context.value\n    const equal = Math.ceil(value) === props.index\n    const highlighted = props.index <= value || equal\n    const half = equal && Math.abs(value - props.index) === 0.5\n\n    return {\n      highlighted,\n      half,\n      checked: equal || (state.context.value === -1 && props.index === 1),\n    }\n  }\n\n  return {\n    hovering: state.context.isHovering,\n    value,\n    hoveredValue,\n    count: state.context.count,\n    items: Array.from({ length: state.context.count }).map((_, index) => index + 1),\n\n    setValue(value) {\n      send({ type: \"SET_VALUE\", value })\n    },\n    clearValue() {\n      send(\"CLEAR_VALUE\")\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n      })\n    },\n\n    getHiddenInputProps() {\n      return normalize.input({\n        name: state.context.name,\n        form: state.context.form,\n        type: \"text\",\n        hidden: true,\n        disabled,\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        id: dom.getHiddenInputId(state.context),\n        defaultValue: state.context.value,\n      })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (!interactive) return\n          event.preventDefault()\n          const radioEl = dom.getRadioEl(state.context, 1)\n          radioEl?.focus({ preventScroll: true })\n        },\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        id: dom.getControlId(state.context),\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        role: \"radiogroup\",\n        \"aria-orientation\": \"horizontal\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-readonly\": ariaAttr(state.context.readOnly),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        tabIndex: state.context.readOnly ? 0 : -1,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerMove(event) {\n          if (!interactive) return\n          if (event.pointerType === \"touch\") return\n          send(\"GROUP_POINTER_OVER\")\n        },\n        onPointerLeave(event) {\n          if (!interactive) return\n          if (event.pointerType === \"touch\") return\n          send(\"GROUP_POINTER_LEAVE\")\n        },\n      })\n    },\n\n    getItemState,\n\n    getItemProps(props) {\n      const { index } = props\n      const itemState = getItemState(props)\n      const valueText = translations.ratingValueText(index)\n\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        id: dom.getItemId(state.context, index.toString()),\n        role: \"radio\",\n        tabIndex: disabled ? undefined : itemState.checked ? 0 : -1,\n        \"aria-roledescription\": \"rating\",\n        \"aria-label\": valueText,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        \"aria-setsize\": state.context.count,\n        \"aria-checked\": itemState.checked,\n        \"data-checked\": dataAttr(itemState.checked),\n        \"aria-posinset\": index,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-half\": dataAttr(itemState.half),\n        onPointerDown(event) {\n          if (!interactive) return\n          if (!isLeftClick(event)) return\n          event.preventDefault()\n        },\n        onPointerMove(event) {\n          if (!interactive) return\n          const point = getEventPoint(event)\n          const relativePoint = getRelativePoint(point, event.currentTarget)\n          const percentX = relativePoint.getPercentValue({\n            orientation: \"horizontal\",\n            dir: state.context.dir,\n          })\n          const isMidway = percentX < 0.5\n          send({ type: \"POINTER_OVER\", index, isMidway })\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (!interactive) return\n\n          const keyMap: EventKeyMap = {\n            ArrowLeft() {\n              send(\"ARROW_LEFT\")\n            },\n            ArrowRight() {\n              send(\"ARROW_RIGHT\")\n            },\n            ArrowUp() {\n              send(\"ARROW_LEFT\")\n            },\n            ArrowDown() {\n              send(\"ARROW_RIGHT\")\n            },\n            Space() {\n              send({ type: \"SPACE\", value: index })\n            },\n            Home() {\n              send(\"HOME\")\n            },\n            End() {\n              send(\"END\")\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keyMap[key]\n\n          if (exec) {\n            event.preventDefault()\n            exec(event)\n          }\n        },\n        onClick() {\n          if (!interactive) return\n          send({ type: \"CLICK\", value: index })\n        },\n        onFocus() {\n          if (!interactive) return\n          send(\"FOCUS\")\n        },\n        onBlur() {\n          if (!interactive) return\n          send(\"BLUR\")\n        },\n      })\n    },\n  }\n}\n","import { createScope, query } from \"@zag-js/dom-query\"\nimport { dispatchInputValueEvent } from \"@zag-js/form-utils\"\nimport type { MachineContext as Ctx } from \"./rating-group.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `rating:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `rating:${ctx.id}:label`,\n  getHiddenInputId: (ctx: Ctx) => ctx.ids?.hiddenInput ?? `rating:${ctx.id}:input`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `rating:${ctx.id}:control`,\n  getItemId: (ctx: Ctx, id: string) => ctx.ids?.item?.(id) ?? `rating:${ctx.id}:item:${id}`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getControlEl: (ctx: Ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getRadioEl: (ctx: Ctx, value = ctx.value) => {\n    const selector = `[role=radio][aria-posinset='${Math.ceil(value)}']`\n    return query(dom.getControlEl(ctx), selector)\n  },\n\n  getHiddenInputEl: (ctx: Ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx)),\n\n  dispatchChangeEvent: (ctx: Ctx) => {\n    const inputEl = dom.getHiddenInputEl(ctx)\n    if (!inputEl) return\n    dispatchInputValueEvent(inputEl, { value: ctx.value })\n  },\n})\n","import { createMachine } from \"@zag-js/core\"\nimport { raf } from \"@zag-js/dom-query\"\nimport { trackFormControl } from \"@zag-js/form-utils\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport { dom } from \"./rating-group.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./rating-group.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"rating\",\n      initial: \"idle\",\n      context: {\n        name: \"rating\",\n        count: 5,\n        dir: \"ltr\",\n        value: -1,\n        readOnly: false,\n        disabled: false,\n        ...ctx,\n        hoveredValue: -1,\n        fieldsetDisabled: false,\n        translations: {\n          ratingValueText: (index) => `${index} stars`,\n          ...ctx.translations,\n        },\n      },\n\n      created: [\"roundValueIfNeeded\"],\n\n      watch: {\n        allowHalf: [\"roundValueIfNeeded\"],\n      },\n\n      computed: {\n        isDisabled: (ctx) => !!ctx.disabled || ctx.fieldsetDisabled,\n        isInteractive: (ctx) => !(ctx.isDisabled || ctx.readOnly),\n        isHovering: (ctx) => ctx.hoveredValue > -1,\n      },\n\n      activities: [\"trackFormControlState\"],\n\n      on: {\n        SET_VALUE: {\n          actions: [\"setValue\"],\n        },\n        CLEAR_VALUE: {\n          actions: [\"clearValue\"],\n        },\n      },\n\n      states: {\n        idle: {\n          entry: \"clearHoveredValue\",\n          on: {\n            GROUP_POINTER_OVER: \"hover\",\n            FOCUS: \"focus\",\n            CLICK: {\n              actions: [\"setValue\", \"focusActiveRadio\"],\n            },\n          },\n        },\n\n        focus: {\n          on: {\n            POINTER_OVER: {\n              actions: \"setHoveredValue\",\n            },\n            GROUP_POINTER_LEAVE: {\n              actions: \"clearHoveredValue\",\n            },\n            BLUR: \"idle\",\n            SPACE: {\n              guard: \"isValueEmpty\",\n              actions: [\"setValue\"],\n            },\n            CLICK: {\n              actions: [\"setValue\", \"focusActiveRadio\"],\n            },\n            ARROW_LEFT: {\n              actions: [\"setPrevValue\", \"focusActiveRadio\"],\n            },\n            ARROW_RIGHT: {\n              actions: [\"setNextValue\", \"focusActiveRadio\"],\n            },\n            HOME: {\n              actions: [\"setValueToMin\", \"focusActiveRadio\"],\n            },\n            END: {\n              actions: [\"setValueToMax\", \"focusActiveRadio\"],\n            },\n          },\n        },\n\n        hover: {\n          on: {\n            POINTER_OVER: {\n              actions: \"setHoveredValue\",\n            },\n            GROUP_POINTER_LEAVE: [\n              {\n                guard: \"isRadioFocused\",\n                target: \"focus\",\n                actions: \"clearHoveredValue\",\n              },\n              {\n                target: \"idle\",\n                actions: \"clearHoveredValue\",\n              },\n            ],\n            CLICK: {\n              actions: [\"setValue\", \"focusActiveRadio\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      guards: {\n        isInteractive: (ctx) => !(ctx.disabled || ctx.readOnly),\n        isHoveredValueEmpty: (ctx) => ctx.hoveredValue === -1,\n        isValueEmpty: (ctx) => ctx.value <= 0,\n        isRadioFocused: (ctx) => !!dom.getControlEl(ctx)?.contains(dom.getActiveElement(ctx)),\n      },\n      activities: {\n        trackFormControlState(ctx, _evt, { initialContext }) {\n          return trackFormControl(dom.getHiddenInputEl(ctx), {\n            onFieldsetDisabledChange(disabled) {\n              ctx.fieldsetDisabled = disabled\n            },\n            onFormReset() {\n              set.value(ctx, initialContext.value)\n            },\n          })\n        },\n      },\n      actions: {\n        clearHoveredValue(ctx) {\n          set.hoveredValue(ctx, -1)\n        },\n        focusActiveRadio(ctx) {\n          raf(() => dom.getRadioEl(ctx)?.focus())\n        },\n        setPrevValue(ctx) {\n          const factor = ctx.allowHalf ? 0.5 : 1\n          set.value(ctx, Math.max(0, ctx.value - factor))\n        },\n        setNextValue(ctx) {\n          const factor = ctx.allowHalf ? 0.5 : 1\n          const value = ctx.value === -1 ? 0 : ctx.value\n          set.value(ctx, Math.min(ctx.count, value + factor))\n        },\n        setValueToMin(ctx) {\n          set.value(ctx, 1)\n        },\n        setValueToMax(ctx) {\n          set.value(ctx, ctx.count)\n        },\n        setValue(ctx, evt) {\n          const value = ctx.hoveredValue === -1 ? evt.value : ctx.hoveredValue\n          set.value(ctx, value)\n        },\n        clearValue(ctx) {\n          set.value(ctx, -1)\n        },\n        setHoveredValue(ctx, evt) {\n          const half = ctx.allowHalf && evt.isMidway\n          const factor = half ? 0.5 : 0\n          set.hoveredValue(ctx, evt.index - factor)\n        },\n        roundValueIfNeeded(ctx) {\n          if (ctx.allowHalf) return\n          // doesn't use set.value(...) because it's an implicit coarsing (used in watch and created)\n          ctx.value = Math.round(ctx.value)\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  change: (ctx: MachineContext) => {\n    ctx.onValueChange?.({ value: ctx.value })\n    dom.dispatchChangeEvent(ctx)\n  },\n  hoverChange: (ctx: MachineContext) => {\n    ctx.onHoverChange?.({ hoveredValue: ctx.hoveredValue })\n  },\n}\n\nconst set = {\n  value: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.value, value)) return\n    ctx.value = value\n    invoke.change(ctx)\n  },\n  hoveredValue: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.hoveredValue, value)) return\n    ctx.hoveredValue = value\n    invoke.hoverChange(ctx)\n  },\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { ItemProps, UserDefinedContext } from \"./rating-group.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"allowHalf\",\n  \"autoFocus\",\n  \"count\",\n  \"dir\",\n  \"disabled\",\n  \"form\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"name\",\n  \"onHoverChange\",\n  \"onValueChange\",\n  \"required\",\n  \"readOnly\",\n  \"translations\",\n  \"value\",\n])\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const itemProps = createProps<ItemProps>()([\"index\"])\nexport const splitItemProps = createSplitProps<ItemProps>(itemProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}