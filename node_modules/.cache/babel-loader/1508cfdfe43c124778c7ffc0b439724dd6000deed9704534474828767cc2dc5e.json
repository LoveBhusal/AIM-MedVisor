{"ast":null,"code":"import { memoize } from './memoize.js';\n/**\n * Create a memoized function with args\n *\n * @example\n * import { memoizeWithArgs } from 'proxy-memoize';\n *\n * const fn = memoizeWithArgs((a, b) => ({ sum: a.v + b.v, diff: a.v - b.v }));\n *\n * @param options\n * @param options.size - (default: 1)\n */\nexport const memoizeWithArgs = (fnWithArgs, options) => {\n  const fn = memoize(args => fnWithArgs(...args), {\n    ...options,\n    noWeakMap: true\n  });\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return fn(args);\n  };\n};","map":{"version":3,"names":["memoize","memoizeWithArgs","fnWithArgs","options","fn","args","noWeakMap","_len","arguments","length","Array","_key"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/proxy-memoize/dist/memoizeWithArgs.js"],"sourcesContent":["import { memoize } from './memoize.js';\n/**\n * Create a memoized function with args\n *\n * @example\n * import { memoizeWithArgs } from 'proxy-memoize';\n *\n * const fn = memoizeWithArgs((a, b) => ({ sum: a.v + b.v, diff: a.v - b.v }));\n *\n * @param options\n * @param options.size - (default: 1)\n */\nexport const memoizeWithArgs = (fnWithArgs, options) => {\n    const fn = memoize((args) => fnWithArgs(...args), {\n        ...options,\n        noWeakMap: true,\n    });\n    return (...args) => fn(args);\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,UAAU,EAAEC,OAAO,KAAK;EACpD,MAAMC,EAAE,GAAGJ,OAAO,CAAEK,IAAI,IAAKH,UAAU,CAAC,GAAGG,IAAI,CAAC,EAAE;IAC9C,GAAGF,OAAO;IACVG,SAAS,EAAE;EACf,CAAC,CAAC;EACF,OAAO;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIJ,IAAI,OAAAK,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAJN,IAAI,CAAAM,IAAA,IAAAH,SAAA,CAAAG,IAAA;IAAA;IAAA,OAAKP,EAAE,CAACC,IAAI,CAAC;EAAA;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}