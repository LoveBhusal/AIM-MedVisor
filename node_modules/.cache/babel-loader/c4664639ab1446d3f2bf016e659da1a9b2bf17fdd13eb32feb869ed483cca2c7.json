{"ast":null,"code":"// src/combobox.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"combobox\").parts(\"root\", \"clearTrigger\", \"content\", \"control\", \"input\", \"item\", \"itemGroup\", \"itemGroupLabel\", \"itemIndicator\", \"itemText\", \"label\", \"list\", \"positioner\", \"trigger\");\nvar parts = anatomy.build();\n\n// src/combobox.collection.ts\nimport { Collection } from \"@zag-js/collection\";\nimport { ref } from \"@zag-js/core\";\nvar collection = options => {\n  return ref(new Collection(options));\n};\ncollection.empty = () => {\n  return ref(new Collection({\n    items: []\n  }));\n};\n\n// src/combobox.connect.ts\nimport { clickIfLink, getEventKey, isContextMenuEvent, isLeftClick } from \"@zag-js/dom-event\";\nimport { ariaAttr, dataAttr, isComposingEvent, isDownloadingEvent, isOpeningInNewTab } from \"@zag-js/dom-query\";\nimport { getPlacementStyles } from \"@zag-js/popper\";\n\n// src/combobox.dom.ts\nimport { createScope, query } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `combobox:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `combobox:${ctx.id}:label`,\n  getControlId: ctx => ctx.ids?.control ?? `combobox:${ctx.id}:control`,\n  getInputId: ctx => ctx.ids?.input ?? `combobox:${ctx.id}:input`,\n  getContentId: ctx => ctx.ids?.content ?? `combobox:${ctx.id}:content`,\n  getPositionerId: ctx => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`,\n  getTriggerId: ctx => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`,\n  getClearTriggerId: ctx => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`,\n  getItemGroupId: (ctx, id) => ctx.ids?.itemGroup?.(id) ?? `combobox:${ctx.id}:optgroup:${id}`,\n  getItemGroupLabelId: (ctx, id) => ctx.ids?.itemGroupLabel?.(id) ?? `combobox:${ctx.id}:optgroup-label:${id}`,\n  getItemId: (ctx, id) => ctx.ids?.item?.(id) ?? `combobox:${ctx.id}:option:${id}`,\n  getContentEl: ctx => dom.getById(ctx, dom.getContentId(ctx)),\n  getInputEl: ctx => dom.getById(ctx, dom.getInputId(ctx)),\n  getPositionerEl: ctx => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getControlEl: ctx => dom.getById(ctx, dom.getControlId(ctx)),\n  getTriggerEl: ctx => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getClearTriggerEl: ctx => dom.getById(ctx, dom.getClearTriggerId(ctx)),\n  getHighlightedItemEl: ctx => {\n    const value = ctx.highlightedValue;\n    if (value == null) return;\n    const selector = `[role=option][data-value=\"${CSS.escape(value)}\"`;\n    return query(dom.getContentEl(ctx), selector);\n  },\n  focusInputEl: ctx => {\n    const inputEl = dom.getInputEl(ctx);\n    if (dom.isActiveElement(ctx, inputEl)) return;\n    inputEl?.focus({\n      preventScroll: true\n    });\n  },\n  focusTriggerEl: ctx => {\n    const triggerEl = dom.getTriggerEl(ctx);\n    if (dom.isActiveElement(ctx, triggerEl)) return;\n    triggerEl?.focus({\n      preventScroll: true\n    });\n  }\n});\n\n// src/combobox.connect.ts\nfunction connect(state, send, normalize) {\n  const translations = state.context.translations;\n  const collection2 = state.context.collection;\n  const disabled = state.context.disabled;\n  const interactive = state.context.isInteractive;\n  const invalid = state.context.invalid;\n  const readOnly = state.context.readOnly;\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const composite = state.context.composite;\n  const highlightedValue = state.context.highlightedValue;\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: state.context.currentPlacement\n  });\n  function getItemState(props) {\n    const {\n      item\n    } = props;\n    const disabled2 = collection2.getItemDisabled(item);\n    const value = collection2.getItemValue(item);\n    return {\n      value,\n      disabled: Boolean(disabled2 || disabled2),\n      highlighted: highlightedValue === value,\n      selected: state.context.value.includes(value)\n    };\n  }\n  return {\n    focused,\n    open,\n    inputValue: state.context.inputValue,\n    highlightedValue,\n    highlightedItem: state.context.highlightedItem,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    hasSelectedItems: state.context.hasSelectedItems,\n    selectedItems: state.context.selectedItems,\n    collection: state.context.collection,\n    reposition() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      send({\n        type: \"POSITIONING.SET\",\n        options\n      });\n    },\n    setCollection(collection3) {\n      send({\n        type: \"COLLECTION.SET\",\n        value: collection3\n      });\n    },\n    setHighlightValue(value) {\n      send({\n        type: \"HIGHLIGHTED_VALUE.SET\",\n        value\n      });\n    },\n    selectValue(value) {\n      send({\n        type: \"ITEM.SELECT\",\n        value\n      });\n    },\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    setInputValue(value) {\n      send({\n        type: \"INPUT_VALUE.SET\",\n        value\n      });\n    },\n    clearValue(value) {\n      if (value != null) {\n        send({\n          type: \"ITEM.CLEAR\",\n          value\n        });\n      } else {\n        send(\"VALUE.CLEAR\");\n      }\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus();\n    },\n    setOpen(nextOpen) {\n      if (nextOpen === open) return;\n      send(nextOpen ? \"OPEN\" : \"CLOSE\");\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        htmlFor: dom.getInputId(state.context),\n        id: dom.getLabelId(state.context),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          if (composite) return;\n          event.preventDefault();\n          dom.getTriggerEl(state.context)?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid)\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        id: dom.getPositionerId(state.context),\n        style: popperStyles.floating\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        name: state.context.name,\n        form: state.context.form,\n        disabled,\n        autoFocus: state.context.autoFocus,\n        required: state.context.required,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"none\",\n        spellCheck: \"false\",\n        readOnly,\n        placeholder: state.context.placeholder,\n        id: dom.getInputId(state.context),\n        type: \"text\",\n        role: \"combobox\",\n        defaultValue: state.context.inputValue,\n        \"aria-autocomplete\": state.context.autoComplete ? \"both\" : \"list\",\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-activedescendant\": highlightedValue ? dom.getItemId(state.context, highlightedValue) : void 0,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (!state.context.openOnClick) return;\n          if (!interactive) return;\n          send(\"INPUT.CLICK\");\n        },\n        onFocus() {\n          if (disabled) return;\n          send(\"INPUT.FOCUS\");\n        },\n        onBlur() {\n          if (disabled) return;\n          send(\"INPUT.BLUR\");\n        },\n        onChange(event) {\n          send({\n            type: \"INPUT.CHANGE\",\n            value: event.currentTarget.value\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.ctrlKey || event.shiftKey || isComposingEvent(event)) return;\n          const openOnKeyPress = state.context.openOnKeyPress;\n          const isModifierKey = event.ctrlKey || event.metaKey || event.shiftKey;\n          const keypress = true;\n          const keymap = {\n            ArrowDown(event2) {\n              if (!openOnKeyPress && !open) return;\n              send({\n                type: event2.altKey ? \"OPEN\" : \"INPUT.ARROW_DOWN\",\n                keypress\n              });\n              event2.preventDefault();\n            },\n            ArrowUp() {\n              if (!openOnKeyPress && !open) return;\n              send({\n                type: event.altKey ? \"CLOSE\" : \"INPUT.ARROW_UP\",\n                keypress\n              });\n              event.preventDefault();\n            },\n            Home(event2) {\n              if (isModifierKey) return;\n              send({\n                type: \"INPUT.HOME\",\n                keypress\n              });\n              if (open) {\n                event2.preventDefault();\n              }\n            },\n            End(event2) {\n              if (isModifierKey) return;\n              send({\n                type: \"INPUT.END\",\n                keypress\n              });\n              if (open) {\n                event2.preventDefault();\n              }\n            },\n            Enter(event2) {\n              send({\n                type: \"INPUT.ENTER\",\n                keypress\n              });\n              if (open) {\n                event2.preventDefault();\n              }\n              const itemEl = dom.getHighlightedItemEl(state.context);\n              clickIfLink(itemEl);\n            },\n            Escape() {\n              send({\n                type: \"INPUT.ESCAPE\",\n                keypress\n              });\n              event.preventDefault();\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keymap[key];\n          exec?.(event);\n        }\n      });\n    },\n    getTriggerProps() {\n      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return normalize.button({\n        ...parts.trigger.attrs,\n        dir: state.context.dir,\n        id: dom.getTriggerId(state.context),\n        \"aria-haspopup\": composite ? \"listbox\" : \"dialog\",\n        type: \"button\",\n        tabIndex: props.focusable ? void 0 : -1,\n        \"aria-label\": translations.triggerLabel,\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-controls\": open ? dom.getContentId(state.context) : void 0,\n        disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focusable\": dataAttr(props.focusable),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        onFocus() {\n          if (!props.focusable) return;\n          send({\n            type: \"INPUT.FOCUS\",\n            src: \"trigger\"\n          });\n        },\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          send(\"TRIGGER.CLICK\");\n        },\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (event.pointerType === \"touch\") return;\n          event.preventDefault();\n          queueMicrotask(() => {\n            dom.getInputEl(state.context)?.focus({\n              preventScroll: true\n            });\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (composite) return;\n          const keyMap = {\n            ArrowDown() {\n              send({\n                type: \"INPUT.ARROW_DOWN\",\n                src: \"trigger\"\n              });\n            },\n            ArrowUp() {\n              send({\n                type: \"INPUT.ARROW_UP\",\n                src: \"trigger\"\n              });\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        id: dom.getContentId(state.context),\n        role: !composite ? \"dialog\" : \"listbox\",\n        tabIndex: -1,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-placement\": state.context.currentPlacement,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.multiple && composite ? true : void 0,\n        onPointerDown(event) {\n          event.preventDefault();\n        }\n      });\n    },\n    getListProps() {\n      return normalize.element({\n        ...parts.list.attrs,\n        role: !composite ? \"listbox\" : void 0,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.multiple && !composite ? true : void 0\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getClearTriggerId(state.context),\n        type: \"button\",\n        tabIndex: -1,\n        disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-label\": translations.clearTriggerLabel,\n        \"aria-controls\": dom.getInputId(state.context),\n        hidden: !state.context.value.length,\n        onPointerDown(event) {\n          event.preventDefault();\n        },\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          send({\n            type: \"VALUE.CLEAR\",\n            src: \"clear-trigger\"\n          });\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props) {\n      const itemState = getItemState(props);\n      const value = itemState.value;\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        id: dom.getItemId(state.context, value),\n        role: \"option\",\n        tabIndex: -1,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"aria-selected\": ariaAttr(itemState.highlighted),\n        \"aria-disabled\": ariaAttr(itemState.disabled),\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-value\": itemState.value,\n        onPointerMove() {\n          if (itemState.disabled) return;\n          if (itemState.highlighted) return;\n          send({\n            type: \"ITEM.POINTER_MOVE\",\n            value\n          });\n        },\n        onPointerLeave() {\n          if (props.persistFocus) return;\n          if (itemState.disabled) return;\n          const mouseMoved = state.previousEvent.type.includes(\"POINTER\");\n          if (!mouseMoved) return;\n          send({\n            type: \"ITEM.POINTER_LEAVE\",\n            value\n          });\n        },\n        onClick(event) {\n          if (isDownloadingEvent(event)) return;\n          if (isOpeningInNewTab(event)) return;\n          if (isContextMenuEvent(event)) return;\n          if (itemState.disabled) return;\n          send({\n            type: \"ITEM.CLICK\",\n            src: \"click\",\n            value\n          });\n        }\n      });\n    },\n    getItemTextProps(props) {\n      const itemState = getItemState(props);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        dir: state.context.dir,\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted)\n      });\n    },\n    getItemIndicatorProps(props) {\n      const itemState = getItemState(props);\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.itemIndicator.attrs,\n        dir: state.context.dir,\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        hidden: !itemState.selected\n      });\n    },\n    getItemGroupProps(props) {\n      const {\n        id\n      } = props;\n      return normalize.element({\n        ...parts.itemGroup.attrs,\n        dir: state.context.dir,\n        id: dom.getItemGroupId(state.context, id),\n        \"aria-labelledby\": dom.getItemGroupLabelId(state.context, id)\n      });\n    },\n    getItemGroupLabelProps(props) {\n      const {\n        htmlFor\n      } = props;\n      return normalize.element({\n        ...parts.itemGroupLabel.attrs,\n        dir: state.context.dir,\n        id: dom.getItemGroupLabelId(state.context, htmlFor),\n        role: \"group\"\n      });\n    }\n  };\n}\n\n// src/combobox.machine.ts\nimport { ariaHidden } from \"@zag-js/aria-hidden\";\nimport { createMachine, guards } from \"@zag-js/core\";\nimport { trackDismissableElement } from \"@zag-js/dismissable\";\nimport { observeAttributes, observeChildren, raf, scrollIntoView } from \"@zag-js/dom-query\";\nimport { getPlacement } from \"@zag-js/popper\";\nimport { addOrRemove, compact, isArray, isBoolean, isEqual, match } from \"@zag-js/utils\";\nvar {\n  and,\n  not\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"combobox\",\n    initial: ctx.open ? \"suggesting\" : \"idle\",\n    context: {\n      loopFocus: true,\n      openOnClick: false,\n      value: [],\n      highlightedValue: null,\n      inputValue: \"\",\n      allowCustomValue: false,\n      closeOnSelect: !ctx.multiple,\n      inputBehavior: \"none\",\n      selectionBehavior: \"replace\",\n      openOnKeyPress: true,\n      openOnChange: true,\n      composite: true,\n      readOnly: false,\n      disabled: false,\n      ...ctx,\n      highlightedItem: null,\n      selectedItems: [],\n      valueAsString: \"\",\n      collection: ctx.collection ?? collection.empty(),\n      positioning: {\n        placement: \"bottom\",\n        flip: false,\n        sameWidth: true,\n        ...ctx.positioning\n      },\n      translations: {\n        triggerLabel: \"Toggle suggestions\",\n        clearTriggerLabel: \"Clear value\",\n        ...ctx.translations\n      }\n    },\n    created: [\"syncInitialValues\", \"syncSelectionBehavior\"],\n    computed: {\n      isInputValueEmpty: ctx2 => ctx2.inputValue.length === 0,\n      isInteractive: ctx2 => !(ctx2.readOnly || ctx2.disabled),\n      autoComplete: ctx2 => ctx2.inputBehavior === \"autocomplete\",\n      autoHighlight: ctx2 => ctx2.inputBehavior === \"autohighlight\",\n      hasSelectedItems: ctx2 => ctx2.value.length > 0\n    },\n    watch: {\n      value: [\"syncSelectedItems\"],\n      inputValue: [\"syncInputValue\"],\n      highlightedValue: [\"syncHighlightedItem\", \"autofillInputValue\"],\n      multiple: [\"syncSelectionBehavior\"],\n      open: [\"toggleVisibility\"]\n    },\n    on: {\n      \"HIGHLIGHTED_VALUE.SET\": {\n        actions: [\"setHighlightedItem\"]\n      },\n      \"ITEM.SELECT\": {\n        actions: [\"selectItem\"]\n      },\n      \"ITEM.CLEAR\": {\n        actions: [\"clearItem\"]\n      },\n      \"VALUE.SET\": {\n        actions: [\"setSelectedItems\"]\n      },\n      \"INPUT_VALUE.SET\": {\n        actions: \"setInputValue\"\n      },\n      \"COLLECTION.SET\": {\n        actions: [\"setCollection\"]\n      },\n      \"POSITIONING.SET\": {\n        actions: [\"reposition\"]\n      }\n    },\n    states: {\n      idle: {\n        tags: [\"idle\", \"closed\"],\n        entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n        on: {\n          \"CONTROLLED.OPEN\": {\n            target: \"interacting\"\n          },\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }],\n          \"INPUT.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }],\n          \"INPUT.FOCUS\": {\n            target: \"focused\"\n          },\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          }],\n          \"VALUE.CLEAR\": {\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"setInitialFocus\"]\n          }\n        }\n      },\n      focused: {\n        tags: [\"focused\", \"closed\"],\n        entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n        on: {\n          \"CONTROLLED.OPEN\": [{\n            guard: \"isChangeEvent\",\n            target: \"suggesting\"\n          }, {\n            target: \"interacting\"\n          }],\n          \"INPUT.CHANGE\": [{\n            guard: and(\"isOpenControlled\", \"openOnChange\"),\n            actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"]\n          }, {\n            guard: \"openOnChange\",\n            target: \"suggesting\",\n            actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"]\n          }, {\n            actions: \"setInputValue\"\n          }],\n          \"LAYER.INTERACT_OUTSIDE\": {\n            target: \"idle\"\n          },\n          \"INPUT.ESCAPE\": {\n            guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n            actions: \"revertInputValue\"\n          },\n          \"INPUT.BLUR\": {\n            target: \"idle\"\n          },\n          \"INPUT.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }],\n          \"INPUT.ARROW_DOWN\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"autoComplete\"),\n            actions: [\"invokeOnOpen\"]\n          }, {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"]\n          }],\n          \"INPUT.ARROW_UP\": [\n          // == group 1 ==\n          {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: \"invokeOnOpen\"\n          }, {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: \"invokeOnOpen\"\n          },\n          // == group 2 ==\n          {\n            target: \"interacting\",\n            actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"]\n          }],\n          OPEN: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          }, {\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          }],\n          \"VALUE.CLEAR\": {\n            actions: [\"clearInputValue\", \"clearSelectedItems\"]\n          }\n        }\n      },\n      interacting: {\n        tags: [\"open\", \"focused\"],\n        entry: [\"setInitialFocus\"],\n        activities: [\"scrollToHighlightedItem\", \"trackDismissableLayer\", \"computePlacement\", \"hideOtherElements\"],\n        on: {\n          \"CONTROLLED.CLOSE\": [{\n            guard: \"restoreFocus\",\n            target: \"focused\",\n            actions: [\"setFinalFocus\"]\n          }, {\n            target: \"idle\"\n          }],\n          \"INPUT.HOME\": {\n            actions: [\"highlightFirstItem\"]\n          },\n          \"INPUT.END\": {\n            actions: [\"highlightLastItem\"]\n          },\n          \"INPUT.ARROW_DOWN\": [{\n            guard: and(\"autoComplete\", \"isLastItemHighlighted\"),\n            actions: [\"clearHighlightedItem\", \"scrollContentToTop\"]\n          }, {\n            actions: [\"highlightNextItem\"]\n          }],\n          \"INPUT.ARROW_UP\": [{\n            guard: and(\"autoComplete\", \"isFirstItemHighlighted\"),\n            actions: \"clearHighlightedItem\"\n          }, {\n            actions: \"highlightPrevItem\"\n          }],\n          \"INPUT.ENTER\": [{\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\"]\n          }, {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          }, {\n            actions: [\"selectHighlightedItem\"]\n          }],\n          \"INPUT.CHANGE\": [{\n            guard: \"autoComplete\",\n            target: \"suggesting\",\n            actions: [\"setInputValue\", \"invokeOnOpen\"]\n          }, {\n            target: \"suggesting\",\n            actions: [\"clearHighlightedItem\", \"setInputValue\", \"invokeOnOpen\"]\n          }],\n          \"ITEM.POINTER_MOVE\": {\n            actions: [\"setHighlightedItem\"]\n          },\n          \"ITEM.POINTER_LEAVE\": {\n            actions: [\"clearHighlightedItem\"]\n          },\n          \"ITEM.CLICK\": [{\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectItem\", \"invokeOnClose\"]\n          }, {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          }, {\n            actions: [\"selectItem\"]\n          }],\n          \"LAYER.ESCAPE\": [{\n            guard: and(\"isOpenControlled\", \"autoComplete\"),\n            actions: [\"syncInputValue\", \"invokeOnClose\"]\n          }, {\n            guard: \"autoComplete\",\n            target: \"focused\",\n            actions: [\"syncInputValue\", \"invokeOnClose\"]\n          }, {\n            guard: \"isOpenControlled\",\n            actions: \"invokeOnClose\"\n          }, {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: \"invokeOnClose\"\n          }, {\n            target: \"focused\",\n            actions: \"invokeOnClose\"\n          }],\n          \"LAYER.INTERACT_OUTSIDE\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          }, {\n            guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n            target: \"idle\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: \"invokeOnClose\"\n          }, {\n            target: \"idle\",\n            actions: \"invokeOnClose\"\n          }],\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }],\n          \"VALUE.CLEAR\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"]\n          }]\n        }\n      },\n      suggesting: {\n        tags: [\"open\", \"focused\"],\n        activities: [\"trackDismissableLayer\", \"scrollToHighlightedItem\", \"computePlacement\", \"trackChildNodes\", \"hideOtherElements\"],\n        entry: [\"setInitialFocus\"],\n        on: {\n          \"CONTROLLED.CLOSE\": [{\n            guard: \"restoreFocus\",\n            target: \"focused\",\n            actions: [\"setFinalFocus\"]\n          }, {\n            target: \"idle\"\n          }],\n          CHILDREN_CHANGE: {\n            actions: [\"highlightFirstItem\"]\n          },\n          \"INPUT.ARROW_DOWN\": {\n            target: \"interacting\",\n            actions: [\"highlightNextItem\"]\n          },\n          \"INPUT.ARROW_UP\": {\n            target: \"interacting\",\n            actions: [\"highlightPrevItem\"]\n          },\n          \"INPUT.HOME\": {\n            target: \"interacting\",\n            actions: [\"highlightFirstItem\"]\n          },\n          \"INPUT.END\": {\n            target: \"interacting\",\n            actions: [\"highlightLastItem\"]\n          },\n          \"INPUT.ENTER\": [{\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\"]\n          }, {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          }, {\n            actions: [\"selectHighlightedItem\"]\n          }],\n          \"INPUT.CHANGE\": [{\n            guard: \"autoHighlight\",\n            actions: [\"setInputValue\"]\n          }, {\n            actions: [\"setInputValue\"]\n          }],\n          \"LAYER.ESCAPE\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"invokeOnClose\"]\n          }],\n          \"ITEM.POINTER_MOVE\": {\n            target: \"interacting\",\n            actions: [\"setHighlightedItem\"]\n          },\n          \"ITEM.POINTER_LEAVE\": {\n            actions: [\"clearHighlightedItem\"]\n          },\n          \"LAYER.INTERACT_OUTSIDE\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          }, {\n            guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n            target: \"idle\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }],\n          \"TRIGGER.CLICK\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"invokeOnClose\"]\n          }],\n          \"ITEM.CLICK\": [{\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectItem\", \"invokeOnClose\"]\n          }, {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          }, {\n            actions: [\"selectItem\"]\n          }],\n          CLOSE: [{\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }],\n          \"VALUE.CLEAR\": [{\n            guard: \"isOpenControlled\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"]\n          }, {\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"]\n          }]\n        }\n      }\n    }\n  }, {\n    guards: {\n      isInputValueEmpty: ctx2 => ctx2.isInputValueEmpty,\n      autoComplete: ctx2 => ctx2.autoComplete && !ctx2.multiple,\n      autoHighlight: ctx2 => ctx2.autoHighlight,\n      isFirstItemHighlighted: ctx2 => ctx2.collection.firstValue === ctx2.highlightedValue,\n      isLastItemHighlighted: ctx2 => ctx2.collection.lastValue === ctx2.highlightedValue,\n      isCustomValue: ctx2 => ctx2.inputValue !== ctx2.valueAsString,\n      allowCustomValue: ctx2 => !!ctx2.allowCustomValue,\n      hasHighlightedItem: ctx2 => ctx2.highlightedValue != null,\n      closeOnSelect: ctx2 => !!ctx2.closeOnSelect,\n      isOpenControlled: ctx2 => !!ctx2[\"open.controlled\"],\n      openOnChange: (ctx2, evt) => {\n        if (isBoolean(ctx2.openOnChange)) return ctx2.openOnChange;\n        return !!ctx2.openOnChange?.({\n          inputValue: evt.value\n        });\n      },\n      restoreFocus: (_ctx, evt) => evt.restoreFocus == null ? true : !!evt.restoreFocus,\n      isChangeEvent: (_ctx, evt) => evt.previousEvent?.type === \"INPUT.CHANGE\"\n    },\n    activities: {\n      trackDismissableLayer(ctx2, _evt, _ref) {\n        let {\n          send\n        } = _ref;\n        if (ctx2.disableLayer) return;\n        const contentEl = () => dom.getContentEl(ctx2);\n        return trackDismissableElement(contentEl, {\n          defer: true,\n          exclude: () => [dom.getInputEl(ctx2), dom.getTriggerEl(ctx2), dom.getClearTriggerEl(ctx2)],\n          onFocusOutside: ctx2.onFocusOutside,\n          onPointerDownOutside: ctx2.onPointerDownOutside,\n          onInteractOutside: ctx2.onInteractOutside,\n          onEscapeKeyDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            send(\"LAYER.ESCAPE\");\n          },\n          onDismiss() {\n            send({\n              type: \"LAYER.INTERACT_OUTSIDE\",\n              restoreFocus: false\n            });\n          }\n        });\n      },\n      hideOtherElements(ctx2) {\n        return ariaHidden([dom.getInputEl(ctx2), dom.getContentEl(ctx2), dom.getTriggerEl(ctx2)]);\n      },\n      computePlacement(ctx2) {\n        const controlEl = () => dom.getControlEl(ctx2);\n        const positionerEl = () => dom.getPositionerEl(ctx2);\n        ctx2.currentPlacement = ctx2.positioning.placement;\n        return getPlacement(controlEl, positionerEl, {\n          ...ctx2.positioning,\n          defer: true,\n          onComplete(data) {\n            ctx2.currentPlacement = data.placement;\n          }\n        });\n      },\n      // in event the options are fetched (async), we still want to auto-highlight the first option\n      trackChildNodes(ctx2, _evt, _ref2) {\n        let {\n          send\n        } = _ref2;\n        if (!ctx2.autoHighlight) return;\n        const exec = () => send(\"CHILDREN_CHANGE\");\n        const contentEl = () => dom.getContentEl(ctx2);\n        return observeChildren(contentEl, {\n          callback: exec,\n          defer: true\n        });\n      },\n      scrollToHighlightedItem(ctx2, _evt, _ref3) {\n        let {\n          getState\n        } = _ref3;\n        const inputEl = dom.getInputEl(ctx2);\n        let cleanups = [];\n        const exec = immediate => {\n          const state = getState();\n          const pointer = state.event.type.includes(\"POINTER\");\n          if (pointer || !ctx2.highlightedValue) return;\n          const itemEl = dom.getHighlightedItemEl(ctx2);\n          const contentEl = dom.getContentEl(ctx2);\n          if (ctx2.scrollToIndexFn) {\n            const highlightedIndex = ctx2.collection.indexOf(ctx2.highlightedValue);\n            ctx2.scrollToIndexFn({\n              index: highlightedIndex,\n              immediate\n            });\n            return;\n          }\n          const rafCleanup2 = raf(() => {\n            scrollIntoView(itemEl, {\n              rootEl: contentEl,\n              block: \"nearest\"\n            });\n          });\n          cleanups.push(rafCleanup2);\n        };\n        const rafCleanup = raf(() => exec(true));\n        cleanups.push(rafCleanup);\n        const observerCleanup = observeAttributes(inputEl, {\n          attributes: [\"aria-activedescendant\"],\n          callback: () => exec(false)\n        });\n        cleanups.push(observerCleanup);\n        return () => {\n          cleanups.forEach(cleanup => cleanup());\n        };\n      }\n    },\n    actions: {\n      reposition(ctx2, evt) {\n        const controlEl = () => dom.getControlEl(ctx2);\n        const positionerEl = () => dom.getPositionerEl(ctx2);\n        getPlacement(controlEl, positionerEl, {\n          ...ctx2.positioning,\n          ...evt.options,\n          defer: true,\n          listeners: false,\n          onComplete(data) {\n            ctx2.currentPlacement = data.placement;\n          }\n        });\n      },\n      setHighlightedItem(ctx2, evt) {\n        if (evt.value == null) return;\n        set.highlightedValue(ctx2, evt.value);\n      },\n      clearHighlightedItem(ctx2) {\n        set.highlightedValue(ctx2, null, true);\n      },\n      selectHighlightedItem(ctx2) {\n        set.value(ctx2, ctx2.highlightedValue);\n      },\n      selectItem(ctx2, evt) {\n        if (evt.value == null) return;\n        set.value(ctx2, evt.value);\n      },\n      clearItem(ctx2, evt) {\n        if (evt.value == null) return;\n        const value = ctx2.value.filter(v => v !== evt.value);\n        set.value(ctx2, value);\n      },\n      setInitialFocus(ctx2) {\n        raf(() => {\n          dom.focusInputEl(ctx2);\n        });\n      },\n      setFinalFocus(ctx2) {\n        raf(() => {\n          const triggerEl = dom.getTriggerEl(ctx2);\n          if (triggerEl?.dataset.focusable == null) {\n            dom.focusInputEl(ctx2);\n          } else {\n            dom.focusTriggerEl(ctx2);\n          }\n        });\n      },\n      syncInputValue(ctx2) {\n        const inputEl = dom.getInputEl(ctx2);\n        if (!inputEl) return;\n        inputEl.value = ctx2.inputValue;\n        queueMicrotask(() => {\n          const {\n            selectionStart,\n            selectionEnd\n          } = inputEl;\n          if (Math.abs((selectionEnd ?? 0) - (selectionStart ?? 0)) !== 0) return;\n          if (selectionStart !== 0) return;\n          inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);\n        });\n      },\n      setInputValue(ctx2, evt) {\n        set.inputValue(ctx2, evt.value);\n      },\n      clearInputValue(ctx2) {\n        set.inputValue(ctx2, \"\");\n      },\n      revertInputValue(ctx2) {\n        const inputValue = match(ctx2.selectionBehavior, {\n          replace: ctx2.hasSelectedItems ? ctx2.valueAsString : \"\",\n          preserve: ctx2.inputValue,\n          clear: \"\"\n        });\n        set.inputValue(ctx2, inputValue);\n      },\n      syncInitialValues(ctx2) {\n        const selectedItems = ctx2.collection.findMany(ctx2.value);\n        const valueAsString = ctx2.collection.stringifyMany(ctx2.value);\n        ctx2.highlightedItem = ctx2.collection.find(ctx2.highlightedValue);\n        ctx2.selectedItems = selectedItems;\n        ctx2.valueAsString = valueAsString;\n        if (ctx2.inputValue.trim() || ctx2.multiple) return;\n        ctx2.inputValue = match(ctx2.selectionBehavior, {\n          preserve: ctx2.inputValue || valueAsString,\n          replace: valueAsString,\n          clear: \"\"\n        });\n      },\n      syncSelectionBehavior(ctx2) {\n        if (ctx2.multiple) {\n          ctx2.selectionBehavior = \"clear\";\n        }\n      },\n      setSelectedItems(ctx2, evt) {\n        if (!isArray(evt.value)) return;\n        set.value(ctx2, evt.value);\n      },\n      clearSelectedItems(ctx2) {\n        set.value(ctx2, []);\n      },\n      scrollContentToTop(ctx2) {\n        if (ctx2.scrollToIndexFn) {\n          ctx2.scrollToIndexFn({\n            index: 0,\n            immediate: true\n          });\n        } else {\n          const contentEl = dom.getContentEl(ctx2);\n          if (!contentEl) return;\n          contentEl.scrollTop = 0;\n        }\n      },\n      invokeOnOpen(ctx2) {\n        ctx2.onOpenChange?.({\n          open: true\n        });\n      },\n      invokeOnClose(ctx2) {\n        ctx2.onOpenChange?.({\n          open: false\n        });\n      },\n      highlightFirstItem(ctx2) {\n        raf(() => {\n          const value = ctx2.collection.firstValue;\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      highlightFirstItemIfNeeded(ctx2) {\n        if (!ctx2.autoHighlight) return;\n        raf(() => {\n          const value = ctx2.collection.firstValue;\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      highlightLastItem(ctx2) {\n        raf(() => {\n          const value = ctx2.collection.lastValue;\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      highlightNextItem(ctx2) {\n        let value = null;\n        if (ctx2.highlightedValue) {\n          value = ctx2.collection.getNextValue(ctx2.highlightedValue);\n          if (!value && ctx2.loopFocus) value = ctx2.collection.firstValue;\n        } else {\n          value = ctx2.collection.firstValue;\n        }\n        set.highlightedValue(ctx2, value);\n      },\n      highlightPrevItem(ctx2) {\n        let value = null;\n        if (ctx2.highlightedValue) {\n          value = ctx2.collection.getPreviousValue(ctx2.highlightedValue);\n          if (!value && ctx2.loopFocus) value = ctx2.collection.lastValue;\n        } else {\n          value = ctx2.collection.lastValue;\n        }\n        set.highlightedValue(ctx2, value);\n      },\n      highlightFirstSelectedItem(ctx2) {\n        raf(() => {\n          const [value] = ctx2.collection.sort(ctx2.value);\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      highlightFirstOrSelectedItem(ctx2) {\n        raf(() => {\n          let value = null;\n          if (ctx2.hasSelectedItems) {\n            value = ctx2.collection.sort(ctx2.value)[0];\n          } else {\n            value = ctx2.collection.firstValue;\n          }\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      highlightLastOrSelectedItem(ctx2) {\n        raf(() => {\n          let value = null;\n          if (ctx2.hasSelectedItems) {\n            value = ctx2.collection.sort(ctx2.value)[0];\n          } else {\n            value = ctx2.collection.lastValue;\n          }\n          set.highlightedValue(ctx2, value);\n        });\n      },\n      autofillInputValue(ctx2, evt) {\n        const inputEl = dom.getInputEl(ctx2);\n        if (!ctx2.autoComplete || !inputEl || !evt.keypress) return;\n        const valueText = ctx2.collection.stringify(ctx2.highlightedValue);\n        raf(() => {\n          inputEl.value = valueText || ctx2.inputValue;\n        });\n      },\n      setCollection(ctx2, evt) {\n        ctx2.collection = evt.value;\n      },\n      syncSelectedItems(ctx2) {\n        sync.valueChange(ctx2);\n      },\n      syncHighlightedItem(ctx2) {\n        sync.highlightChange(ctx2);\n      },\n      toggleVisibility(ctx2, evt, _ref4) {\n        let {\n          send\n        } = _ref4;\n        send({\n          type: ctx2.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: evt\n        });\n      }\n    }\n  });\n}\nvar sync = {\n  valueChange: ctx => {\n    const prevSelectedItems = ctx.selectedItems;\n    ctx.selectedItems = ctx.value.map(v => {\n      const foundItem = prevSelectedItems.find(item => ctx.collection.getItemValue(item) === v);\n      if (foundItem) return foundItem;\n      return ctx.collection.find(v);\n    });\n    const valueAsString = ctx.collection.stringifyItems(ctx.selectedItems);\n    ctx.valueAsString = valueAsString;\n    let inputValue;\n    if (ctx.getSelectionValue) {\n      inputValue = ctx.getSelectionValue({\n        inputValue: ctx.inputValue,\n        selectedItems: Array.from(ctx.selectedItems),\n        valueAsString\n      });\n    } else {\n      inputValue = match(ctx.selectionBehavior, {\n        replace: ctx.valueAsString,\n        preserve: ctx.inputValue,\n        clear: \"\"\n      });\n    }\n    set.inputValue(ctx, inputValue);\n  },\n  highlightChange: ctx => {\n    ctx.highlightedItem = ctx.collection.find(ctx.highlightedValue);\n  }\n};\nvar invoke = {\n  valueChange: ctx => {\n    sync.valueChange(ctx);\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value),\n      items: Array.from(ctx.selectedItems)\n    });\n  },\n  highlightChange: ctx => {\n    sync.highlightChange(ctx);\n    ctx.onHighlightChange?.({\n      highlightedValue: ctx.highlightedValue,\n      highlightedItem: ctx.highlightedItem\n    });\n  },\n  inputChange: ctx => {\n    ctx.onInputValueChange?.({\n      inputValue: ctx.inputValue\n    });\n  }\n};\nvar set = {\n  value: function (ctx, value) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isEqual(ctx.value, value)) return;\n    if (value == null && !force) return;\n    if (value == null && force) {\n      ctx.value = [];\n      invoke.valueChange(ctx);\n      return;\n    }\n    if (isArray(value)) {\n      ctx.value = value;\n    } else if (value != null) {\n      ctx.value = ctx.multiple ? addOrRemove(ctx.value, value) : [value];\n    }\n    invoke.valueChange(ctx);\n  },\n  highlightedValue: function (ctx, value) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isEqual(ctx.highlightedValue, value)) return;\n    if (!value && !force) return;\n    ctx.highlightedValue = value || null;\n    invoke.highlightChange(ctx);\n  },\n  inputValue: (ctx, value) => {\n    if (isEqual(ctx.inputValue, value)) return;\n    ctx.inputValue = value;\n    invoke.inputChange(ctx);\n  }\n};\nexport { anatomy, collection, connect, machine };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","Collection","ref","collection","options","empty","items","clickIfLink","getEventKey","isContextMenuEvent","isLeftClick","ariaAttr","dataAttr","isComposingEvent","isDownloadingEvent","isOpeningInNewTab","getPlacementStyles","createScope","query","dom","getRootId","ctx","ids","root","id","getLabelId","label","getControlId","control","getInputId","input","getContentId","content","getPositionerId","positioner","getTriggerId","trigger","getClearTriggerId","clearTrigger","getItemGroupId","itemGroup","getItemGroupLabelId","itemGroupLabel","getItemId","item","getContentEl","getById","getInputEl","getPositionerEl","getControlEl","getTriggerEl","getClearTriggerEl","getHighlightedItemEl","value","highlightedValue","selector","CSS","escape","focusInputEl","inputEl","isActiveElement","focus","preventScroll","focusTriggerEl","triggerEl","connect","state","send","normalize","translations","context","collection2","disabled","interactive","isInteractive","invalid","readOnly","open","hasTag","focused","composite","popperStyles","positioning","placement","currentPlacement","getItemState","props","disabled2","getItemDisabled","getItemValue","Boolean","highlighted","selected","includes","inputValue","highlightedItem","valueAsString","hasSelectedItems","selectedItems","reposition","arguments","length","undefined","type","setCollection","collection3","setHighlightValue","selectValue","setValue","setInputValue","clearValue","setOpen","nextOpen","getRootProps","element","attrs","dir","getLabelProps","htmlFor","onClick","event","preventDefault","getControlProps","getPositionerProps","style","floating","getInputProps","name","form","autoFocus","required","autoComplete","autoCorrect","autoCapitalize","spellCheck","placeholder","role","defaultValue","defaultPrevented","openOnClick","onFocus","onBlur","onChange","currentTarget","onKeyDown","ctrlKey","shiftKey","openOnKeyPress","isModifierKey","metaKey","keypress","keymap","ArrowDown","event2","altKey","ArrowUp","Home","End","Enter","itemEl","Escape","key","exec","getTriggerProps","button","tabIndex","focusable","triggerLabel","src","onPointerDown","pointerType","queueMicrotask","keyMap","getContentProps","hidden","multiple","getListProps","list","getClearTriggerProps","clearTriggerLabel","getItemProps","itemState","onPointerMove","onPointerLeave","persistFocus","mouseMoved","previousEvent","getItemTextProps","itemText","getItemIndicatorProps","itemIndicator","getItemGroupProps","getItemGroupLabelProps","ariaHidden","createMachine","guards","trackDismissableElement","observeAttributes","observeChildren","raf","scrollIntoView","getPlacement","addOrRemove","compact","isArray","isBoolean","isEqual","match","and","not","machine","userContext","initial","loopFocus","allowCustomValue","closeOnSelect","inputBehavior","selectionBehavior","openOnChange","flip","sameWidth","created","computed","isInputValueEmpty","ctx2","autoHighlight","watch","on","actions","states","idle","tags","entry","target","guard","OPEN","interacting","activities","CLOSE","suggesting","CHILDREN_CHANGE","isFirstItemHighlighted","firstValue","isLastItemHighlighted","lastValue","isCustomValue","hasHighlightedItem","isOpenControlled","evt","restoreFocus","_ctx","isChangeEvent","trackDismissableLayer","_evt","_ref","disableLayer","contentEl","defer","exclude","onFocusOutside","onPointerDownOutside","onInteractOutside","onEscapeKeyDown","stopPropagation","onDismiss","hideOtherElements","computePlacement","controlEl","positionerEl","onComplete","data","trackChildNodes","_ref2","callback","scrollToHighlightedItem","_ref3","getState","cleanups","immediate","pointer","scrollToIndexFn","highlightedIndex","indexOf","index","rafCleanup2","rootEl","block","push","rafCleanup","observerCleanup","attributes","forEach","cleanup","listeners","setHighlightedItem","set","clearHighlightedItem","selectHighlightedItem","selectItem","clearItem","filter","v","setInitialFocus","setFinalFocus","dataset","syncInputValue","selectionStart","selectionEnd","Math","abs","setSelectionRange","clearInputValue","revertInputValue","replace","preserve","clear","syncInitialValues","findMany","stringifyMany","find","trim","syncSelectionBehavior","setSelectedItems","clearSelectedItems","scrollContentToTop","scrollTop","invokeOnOpen","onOpenChange","invokeOnClose","highlightFirstItem","highlightFirstItemIfNeeded","highlightLastItem","highlightNextItem","getNextValue","highlightPrevItem","getPreviousValue","highlightFirstSelectedItem","sort","highlightFirstOrSelectedItem","highlightLastOrSelectedItem","autofillInputValue","valueText","stringify","syncSelectedItems","sync","valueChange","syncHighlightedItem","highlightChange","toggleVisibility","_ref4","prevSelectedItems","map","foundItem","stringifyItems","getSelectionValue","Array","from","invoke","onValueChange","onHighlightChange","inputChange","onInputValueChange","force"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@zag-js/combobox/src/combobox.anatomy.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/combobox/src/combobox.collection.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/combobox/src/combobox.connect.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/combobox/src/combobox.dom.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/combobox/src/combobox.machine.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"combobox\").parts(\n  \"root\",\n  \"clearTrigger\",\n  \"content\",\n  \"control\",\n  \"input\",\n  \"item\",\n  \"itemGroup\",\n  \"itemGroupLabel\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"label\",\n  \"list\",\n  \"positioner\",\n  \"trigger\",\n)\nexport const parts = anatomy.build()\n","import { Collection, type CollectionItem, type CollectionOptions } from \"@zag-js/collection\"\nimport { ref } from \"@zag-js/core\"\n\nexport const collection = <T extends CollectionItem>(options: CollectionOptions<T>): Collection<T> => {\n  return ref(new Collection(options))\n}\n\ncollection.empty = (): Collection<CollectionItem> => {\n  return ref(new Collection<CollectionItem>({ items: [] }))\n}\n","import { clickIfLink, getEventKey, isContextMenuEvent, isLeftClick, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { ariaAttr, dataAttr, isComposingEvent, isDownloadingEvent, isOpeningInNewTab } from \"@zag-js/dom-query\"\nimport { getPlacementStyles } from \"@zag-js/popper\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./combobox.anatomy\"\nimport { dom } from \"./combobox.dom\"\nimport type { CollectionItem, ItemProps, ItemState, MachineApi, Send, State } from \"./combobox.types\"\n\nexport function connect<T extends PropTypes, V extends CollectionItem>(\n  state: State,\n  send: Send,\n  normalize: NormalizeProps<T>,\n): MachineApi<T, V> {\n  const translations = state.context.translations\n  const collection = state.context.collection\n\n  const disabled = state.context.disabled\n  const interactive = state.context.isInteractive\n  const invalid = state.context.invalid\n  const readOnly = state.context.readOnly\n\n  const open = state.hasTag(\"open\")\n  const focused = state.hasTag(\"focused\")\n  const composite = state.context.composite\n  const highlightedValue = state.context.highlightedValue\n\n  const popperStyles = getPlacementStyles({\n    ...state.context.positioning,\n    placement: state.context.currentPlacement,\n  })\n\n  function getItemState(props: ItemProps): ItemState {\n    const { item } = props\n    const disabled = collection.getItemDisabled(item)\n    const value = collection.getItemValue(item)!\n    return {\n      value,\n      disabled: Boolean(disabled || disabled),\n      highlighted: highlightedValue === value,\n      selected: state.context.value.includes(value),\n    }\n  }\n\n  return {\n    focused,\n    open,\n    inputValue: state.context.inputValue,\n    highlightedValue,\n    highlightedItem: state.context.highlightedItem,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    hasSelectedItems: state.context.hasSelectedItems,\n    selectedItems: state.context.selectedItems,\n    collection: state.context.collection,\n    reposition(options = {}) {\n      send({ type: \"POSITIONING.SET\", options })\n    },\n    setCollection(collection) {\n      send({ type: \"COLLECTION.SET\", value: collection })\n    },\n    setHighlightValue(value) {\n      send({ type: \"HIGHLIGHTED_VALUE.SET\", value })\n    },\n    selectValue(value) {\n      send({ type: \"ITEM.SELECT\", value })\n    },\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n    setInputValue(value) {\n      send({ type: \"INPUT_VALUE.SET\", value })\n    },\n    clearValue(value) {\n      if (value != null) {\n        send({ type: \"ITEM.CLEAR\", value })\n      } else {\n        send(\"VALUE.CLEAR\")\n      }\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus()\n    },\n    setOpen(nextOpen) {\n      if (nextOpen === open) return\n      send(nextOpen ? \"OPEN\" : \"CLOSE\")\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n      })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        htmlFor: dom.getInputId(state.context),\n        id: dom.getLabelId(state.context),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          if (composite) return\n          event.preventDefault()\n          dom.getTriggerEl(state.context)?.focus({ preventScroll: true })\n        },\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n      })\n    },\n\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        dir: state.context.dir,\n        id: dom.getPositionerId(state.context),\n        style: popperStyles.floating,\n      })\n    },\n\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        name: state.context.name,\n        form: state.context.form,\n        disabled: disabled,\n        autoFocus: state.context.autoFocus,\n        required: state.context.required,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"none\",\n        spellCheck: \"false\",\n        readOnly: readOnly,\n        placeholder: state.context.placeholder,\n        id: dom.getInputId(state.context),\n        type: \"text\",\n        role: \"combobox\",\n        defaultValue: state.context.inputValue,\n        \"aria-autocomplete\": state.context.autoComplete ? \"both\" : \"list\",\n        \"aria-controls\": dom.getContentId(state.context),\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-activedescendant\": highlightedValue ? dom.getItemId(state.context, highlightedValue) : undefined,\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (!state.context.openOnClick) return\n          if (!interactive) return\n          send(\"INPUT.CLICK\")\n        },\n        onFocus() {\n          if (disabled) return\n          send(\"INPUT.FOCUS\")\n        },\n        onBlur() {\n          if (disabled) return\n          send(\"INPUT.BLUR\")\n        },\n        onChange(event) {\n          send({ type: \"INPUT.CHANGE\", value: event.currentTarget.value })\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (!interactive) return\n\n          if (event.ctrlKey || event.shiftKey || isComposingEvent(event)) return\n\n          const openOnKeyPress = state.context.openOnKeyPress\n          const isModifierKey = event.ctrlKey || event.metaKey || event.shiftKey\n          const keypress = true\n\n          const keymap: EventKeyMap = {\n            ArrowDown(event) {\n              if (!openOnKeyPress && !open) return\n              send({ type: event.altKey ? \"OPEN\" : \"INPUT.ARROW_DOWN\", keypress })\n              event.preventDefault()\n            },\n            ArrowUp() {\n              if (!openOnKeyPress && !open) return\n              send({ type: event.altKey ? \"CLOSE\" : \"INPUT.ARROW_UP\", keypress })\n              event.preventDefault()\n            },\n            Home(event) {\n              if (isModifierKey) return\n              send({ type: \"INPUT.HOME\", keypress })\n              if (open) {\n                event.preventDefault()\n              }\n            },\n            End(event) {\n              if (isModifierKey) return\n              send({ type: \"INPUT.END\", keypress })\n              if (open) {\n                event.preventDefault()\n              }\n            },\n            Enter(event) {\n              send({ type: \"INPUT.ENTER\", keypress })\n              if (open) {\n                event.preventDefault()\n              }\n              const itemEl = dom.getHighlightedItemEl(state.context)\n              clickIfLink(itemEl)\n            },\n            Escape() {\n              send({ type: \"INPUT.ESCAPE\", keypress })\n              event.preventDefault()\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keymap[key]\n          exec?.(event)\n        },\n      })\n    },\n\n    getTriggerProps(props = {}) {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        dir: state.context.dir,\n        id: dom.getTriggerId(state.context),\n        \"aria-haspopup\": composite ? \"listbox\" : \"dialog\",\n        type: \"button\",\n        tabIndex: props.focusable ? undefined : -1,\n        \"aria-label\": translations.triggerLabel,\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-controls\": open ? dom.getContentId(state.context) : undefined,\n        disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focusable\": dataAttr(props.focusable),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        onFocus() {\n          if (!props.focusable) return\n          send({ type: \"INPUT.FOCUS\", src: \"trigger\" })\n        },\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (!interactive) return\n          if (!isLeftClick(event)) return\n          send(\"TRIGGER.CLICK\")\n        },\n        onPointerDown(event) {\n          if (!interactive) return\n          if (event.pointerType === \"touch\") return\n          event.preventDefault()\n          queueMicrotask(() => {\n            dom.getInputEl(state.context)?.focus({ preventScroll: true })\n          })\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (composite) return\n\n          const keyMap: EventKeyMap = {\n            ArrowDown() {\n              send({ type: \"INPUT.ARROW_DOWN\", src: \"trigger\" })\n            },\n            ArrowUp() {\n              send({ type: \"INPUT.ARROW_UP\", src: \"trigger\" })\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keyMap[key]\n\n          if (exec) {\n            exec(event)\n            event.preventDefault()\n          }\n        },\n      })\n    },\n\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: state.context.dir,\n        id: dom.getContentId(state.context),\n        role: !composite ? \"dialog\" : \"listbox\",\n        tabIndex: -1,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-placement\": state.context.currentPlacement,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.multiple && composite ? true : undefined,\n        onPointerDown(event) {\n          // prevent options or elements within listbox from taking focus\n          event.preventDefault()\n        },\n      })\n    },\n\n    getListProps() {\n      return normalize.element({\n        ...parts.list.attrs,\n        role: !composite ? \"listbox\" : undefined,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.multiple && !composite ? true : undefined,\n      })\n    },\n\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getClearTriggerId(state.context),\n        type: \"button\",\n        tabIndex: -1,\n        disabled: disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-label\": translations.clearTriggerLabel,\n        \"aria-controls\": dom.getInputId(state.context),\n        hidden: !state.context.value.length,\n        onPointerDown(event) {\n          event.preventDefault()\n        },\n        onClick(event) {\n          if (event.defaultPrevented) return\n          if (!interactive) return\n          send({ type: \"VALUE.CLEAR\", src: \"clear-trigger\" })\n        },\n      })\n    },\n\n    getItemState,\n\n    getItemProps(props) {\n      const itemState = getItemState(props)\n      const value = itemState.value\n\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: state.context.dir,\n        id: dom.getItemId(state.context, value),\n        role: \"option\",\n        tabIndex: -1,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"aria-selected\": ariaAttr(itemState.highlighted),\n        \"aria-disabled\": ariaAttr(itemState.disabled),\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-value\": itemState.value,\n        onPointerMove() {\n          if (itemState.disabled) return\n          if (itemState.highlighted) return\n          send({ type: \"ITEM.POINTER_MOVE\", value })\n        },\n        onPointerLeave() {\n          if (props.persistFocus) return\n          if (itemState.disabled) return\n          const mouseMoved = state.previousEvent.type.includes(\"POINTER\")\n          if (!mouseMoved) return\n          send({ type: \"ITEM.POINTER_LEAVE\", value })\n        },\n        onClick(event) {\n          if (isDownloadingEvent(event)) return\n          if (isOpeningInNewTab(event)) return\n          if (isContextMenuEvent(event)) return\n          if (itemState.disabled) return\n          send({ type: \"ITEM.CLICK\", src: \"click\", value })\n        },\n      })\n    },\n\n    getItemTextProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        ...parts.itemText.attrs,\n        dir: state.context.dir,\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n      })\n    },\n    getItemIndicatorProps(props) {\n      const itemState = getItemState(props)\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.itemIndicator.attrs,\n        dir: state.context.dir,\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        hidden: !itemState.selected,\n      })\n    },\n\n    getItemGroupProps(props) {\n      const { id } = props\n      return normalize.element({\n        ...parts.itemGroup.attrs,\n        dir: state.context.dir,\n        id: dom.getItemGroupId(state.context, id),\n        \"aria-labelledby\": dom.getItemGroupLabelId(state.context, id),\n      })\n    },\n\n    getItemGroupLabelProps(props) {\n      const { htmlFor } = props\n      return normalize.element({\n        ...parts.itemGroupLabel.attrs,\n        dir: state.context.dir,\n        id: dom.getItemGroupLabelId(state.context, htmlFor),\n        role: \"group\",\n      })\n    },\n  }\n}\n","import { createScope, query } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./combobox.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `combobox:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `combobox:${ctx.id}:label`,\n  getControlId: (ctx: Ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`,\n  getInputId: (ctx: Ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`,\n  getContentId: (ctx: Ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:content`,\n  getPositionerId: (ctx: Ctx) => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`,\n  getTriggerId: (ctx: Ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`,\n  getClearTriggerId: (ctx: Ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`,\n  getItemGroupId: (ctx: Ctx, id: string | number) => ctx.ids?.itemGroup?.(id) ?? `combobox:${ctx.id}:optgroup:${id}`,\n  getItemGroupLabelId: (ctx: Ctx, id: string | number) =>\n    ctx.ids?.itemGroupLabel?.(id) ?? `combobox:${ctx.id}:optgroup-label:${id}`,\n  getItemId: (ctx: Ctx, id: string) => ctx.ids?.item?.(id) ?? `combobox:${ctx.id}:option:${id}`,\n\n  getContentEl: (ctx: Ctx) => dom.getById(ctx, dom.getContentId(ctx)),\n  getInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getInputId(ctx)),\n  getPositionerEl: (ctx: Ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),\n  getControlEl: (ctx: Ctx) => dom.getById(ctx, dom.getControlId(ctx)),\n  getTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),\n  getClearTriggerEl: (ctx: Ctx) => dom.getById(ctx, dom.getClearTriggerId(ctx)),\n  getHighlightedItemEl: (ctx: Ctx) => {\n    const value = ctx.highlightedValue\n    if (value == null) return\n    const selector = `[role=option][data-value=\"${CSS.escape(value)}\"`\n    return query(dom.getContentEl(ctx), selector)\n  },\n\n  focusInputEl: (ctx: Ctx) => {\n    const inputEl = dom.getInputEl(ctx)\n    if (dom.isActiveElement(ctx, inputEl)) return\n    inputEl?.focus({ preventScroll: true })\n  },\n  focusTriggerEl: (ctx: Ctx) => {\n    const triggerEl = dom.getTriggerEl(ctx)\n    if (dom.isActiveElement(ctx, triggerEl)) return\n    triggerEl?.focus({ preventScroll: true })\n  },\n})\n","import { ariaHidden } from \"@zag-js/aria-hidden\"\nimport { createMachine, guards } from \"@zag-js/core\"\nimport { trackDismissableElement } from \"@zag-js/dismissable\"\nimport { observeAttributes, observeChildren, raf, scrollIntoView } from \"@zag-js/dom-query\"\nimport { getPlacement } from \"@zag-js/popper\"\nimport { addOrRemove, compact, isArray, isBoolean, isEqual, match } from \"@zag-js/utils\"\nimport { collection } from \"./combobox.collection\"\nimport { dom } from \"./combobox.dom\"\nimport type { CollectionItem, MachineContext, MachineState, UserDefinedContext } from \"./combobox.types\"\n\nconst { and, not } = guards\n\nexport function machine<T extends CollectionItem>(userContext: UserDefinedContext<T>) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"combobox\",\n      initial: ctx.open ? \"suggesting\" : \"idle\",\n      context: {\n        loopFocus: true,\n        openOnClick: false,\n        value: [],\n        highlightedValue: null,\n        inputValue: \"\",\n        allowCustomValue: false,\n        closeOnSelect: !ctx.multiple,\n        inputBehavior: \"none\",\n        selectionBehavior: \"replace\",\n        openOnKeyPress: true,\n        openOnChange: true,\n        composite: true,\n        readOnly: false,\n        disabled: false,\n        ...ctx,\n        highlightedItem: null,\n        selectedItems: [],\n        valueAsString: \"\",\n        collection: ctx.collection ?? collection.empty(),\n        positioning: {\n          placement: \"bottom\",\n          flip: false,\n          sameWidth: true,\n          ...ctx.positioning,\n        },\n        translations: {\n          triggerLabel: \"Toggle suggestions\",\n          clearTriggerLabel: \"Clear value\",\n          ...ctx.translations,\n        },\n      },\n\n      created: [\"syncInitialValues\", \"syncSelectionBehavior\"],\n\n      computed: {\n        isInputValueEmpty: (ctx) => ctx.inputValue.length === 0,\n        isInteractive: (ctx) => !(ctx.readOnly || ctx.disabled),\n        autoComplete: (ctx) => ctx.inputBehavior === \"autocomplete\",\n        autoHighlight: (ctx) => ctx.inputBehavior === \"autohighlight\",\n        hasSelectedItems: (ctx) => ctx.value.length > 0,\n      },\n\n      watch: {\n        value: [\"syncSelectedItems\"],\n        inputValue: [\"syncInputValue\"],\n        highlightedValue: [\"syncHighlightedItem\", \"autofillInputValue\"],\n        multiple: [\"syncSelectionBehavior\"],\n        open: [\"toggleVisibility\"],\n      },\n\n      on: {\n        \"HIGHLIGHTED_VALUE.SET\": {\n          actions: [\"setHighlightedItem\"],\n        },\n        \"ITEM.SELECT\": {\n          actions: [\"selectItem\"],\n        },\n        \"ITEM.CLEAR\": {\n          actions: [\"clearItem\"],\n        },\n        \"VALUE.SET\": {\n          actions: [\"setSelectedItems\"],\n        },\n        \"INPUT_VALUE.SET\": {\n          actions: \"setInputValue\",\n        },\n        \"COLLECTION.SET\": {\n          actions: [\"setCollection\"],\n        },\n        \"POSITIONING.SET\": {\n          actions: [\"reposition\"],\n        },\n      },\n\n      states: {\n        idle: {\n          tags: [\"idle\", \"closed\"],\n          entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n          on: {\n            \"CONTROLLED.OPEN\": {\n              target: \"interacting\",\n            },\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            \"INPUT.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            \"INPUT.FOCUS\": {\n              target: \"focused\",\n            },\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"invokeOnOpen\"],\n              },\n            ],\n            \"VALUE.CLEAR\": {\n              target: \"focused\",\n              actions: [\"clearInputValue\", \"clearSelectedItems\", \"setInitialFocus\"],\n            },\n          },\n        },\n\n        focused: {\n          tags: [\"focused\", \"closed\"],\n          entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n          on: {\n            \"CONTROLLED.OPEN\": [\n              {\n                guard: \"isChangeEvent\",\n                target: \"suggesting\",\n              },\n              {\n                target: \"interacting\",\n              },\n            ],\n            \"INPUT.CHANGE\": [\n              {\n                guard: and(\"isOpenControlled\", \"openOnChange\"),\n                actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"],\n              },\n              {\n                guard: \"openOnChange\",\n                target: \"suggesting\",\n                actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"],\n              },\n              {\n                actions: \"setInputValue\",\n              },\n            ],\n            \"LAYER.INTERACT_OUTSIDE\": {\n              target: \"idle\",\n            },\n            \"INPUT.ESCAPE\": {\n              guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n              actions: \"revertInputValue\",\n            },\n            \"INPUT.BLUR\": {\n              target: \"idle\",\n            },\n            \"INPUT.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            \"INPUT.ARROW_DOWN\": [\n              // == group 1 ==\n              {\n                guard: and(\"isOpenControlled\", \"autoComplete\"),\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: [\"invokeOnOpen\"],\n              },\n              // == group 2 ==\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            \"INPUT.ARROW_UP\": [\n              // == group 1 ==\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: \"invokeOnOpen\",\n              },\n              {\n                guard: \"autoComplete\",\n                target: \"interacting\",\n                actions: \"invokeOnOpen\",\n              },\n              // == group 2 ==\n              {\n                target: \"interacting\",\n                actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"],\n              },\n            ],\n            OPEN: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnOpen\"],\n              },\n              {\n                target: \"interacting\",\n                actions: [\"invokeOnOpen\"],\n              },\n            ],\n            \"VALUE.CLEAR\": {\n              actions: [\"clearInputValue\", \"clearSelectedItems\"],\n            },\n          },\n        },\n\n        interacting: {\n          tags: [\"open\", \"focused\"],\n          entry: [\"setInitialFocus\"],\n          activities: [\"scrollToHighlightedItem\", \"trackDismissableLayer\", \"computePlacement\", \"hideOtherElements\"],\n          on: {\n            \"CONTROLLED.CLOSE\": [\n              {\n                guard: \"restoreFocus\",\n                target: \"focused\",\n                actions: [\"setFinalFocus\"],\n              },\n              {\n                target: \"idle\",\n              },\n            ],\n            \"INPUT.HOME\": {\n              actions: [\"highlightFirstItem\"],\n            },\n            \"INPUT.END\": {\n              actions: [\"highlightLastItem\"],\n            },\n            \"INPUT.ARROW_DOWN\": [\n              {\n                guard: and(\"autoComplete\", \"isLastItemHighlighted\"),\n                actions: [\"clearHighlightedItem\", \"scrollContentToTop\"],\n              },\n              {\n                actions: [\"highlightNextItem\"],\n              },\n            ],\n            \"INPUT.ARROW_UP\": [\n              {\n                guard: and(\"autoComplete\", \"isFirstItemHighlighted\"),\n                actions: \"clearHighlightedItem\",\n              },\n              {\n                actions: \"highlightPrevItem\",\n              },\n            ],\n            \"INPUT.ENTER\": [\n              {\n                guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n                actions: [\"selectHighlightedItem\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"closeOnSelect\",\n                target: \"focused\",\n                actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n              {\n                actions: [\"selectHighlightedItem\"],\n              },\n            ],\n            \"INPUT.CHANGE\": [\n              {\n                guard: \"autoComplete\",\n                target: \"suggesting\",\n                actions: [\"setInputValue\", \"invokeOnOpen\"],\n              },\n              {\n                target: \"suggesting\",\n                actions: [\"clearHighlightedItem\", \"setInputValue\", \"invokeOnOpen\"],\n              },\n            ],\n            \"ITEM.POINTER_MOVE\": {\n              actions: [\"setHighlightedItem\"],\n            },\n            \"ITEM.POINTER_LEAVE\": {\n              actions: [\"clearHighlightedItem\"],\n            },\n            \"ITEM.CLICK\": [\n              {\n                guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n                actions: [\"selectItem\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"closeOnSelect\",\n                target: \"focused\",\n                actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            \"LAYER.ESCAPE\": [\n              {\n                guard: and(\"isOpenControlled\", \"autoComplete\"),\n                actions: [\"syncInputValue\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"autoComplete\",\n                target: \"focused\",\n                actions: [\"syncInputValue\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"isOpenControlled\",\n                actions: \"invokeOnClose\",\n              },\n              {\n                target: \"focused\",\n                actions: [\"invokeOnClose\", \"setFinalFocus\"],\n              },\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: \"invokeOnClose\",\n              },\n              {\n                target: \"focused\",\n                actions: \"invokeOnClose\",\n              },\n            ],\n            \"LAYER.INTERACT_OUTSIDE\": [\n              // == group 1 ==\n              {\n                guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n                actions: [\"revertInputValue\", \"invokeOnClose\"],\n              },\n              {\n                guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n                target: \"idle\",\n                actions: [\"revertInputValue\", \"invokeOnClose\"],\n              },\n              // == group 2 ==\n              {\n                guard: \"isOpenControlled\",\n                actions: \"invokeOnClose\",\n              },\n              {\n                target: \"idle\",\n                actions: \"invokeOnClose\",\n              },\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"invokeOnClose\", \"setFinalFocus\"],\n              },\n            ],\n            \"VALUE.CLEAR\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n            ],\n          },\n        },\n\n        suggesting: {\n          tags: [\"open\", \"focused\"],\n          activities: [\n            \"trackDismissableLayer\",\n            \"scrollToHighlightedItem\",\n            \"computePlacement\",\n            \"trackChildNodes\",\n            \"hideOtherElements\",\n          ],\n          entry: [\"setInitialFocus\"],\n          on: {\n            \"CONTROLLED.CLOSE\": [\n              {\n                guard: \"restoreFocus\",\n                target: \"focused\",\n                actions: [\"setFinalFocus\"],\n              },\n              {\n                target: \"idle\",\n              },\n            ],\n            CHILDREN_CHANGE: {\n              actions: [\"highlightFirstItem\"],\n            },\n            \"INPUT.ARROW_DOWN\": {\n              target: \"interacting\",\n              actions: [\"highlightNextItem\"],\n            },\n            \"INPUT.ARROW_UP\": {\n              target: \"interacting\",\n              actions: [\"highlightPrevItem\"],\n            },\n            \"INPUT.HOME\": {\n              target: \"interacting\",\n              actions: [\"highlightFirstItem\"],\n            },\n            \"INPUT.END\": {\n              target: \"interacting\",\n              actions: [\"highlightLastItem\"],\n            },\n            \"INPUT.ENTER\": [\n              {\n                guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n                actions: [\"selectHighlightedItem\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"closeOnSelect\",\n                target: \"focused\",\n                actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n              {\n                actions: [\"selectHighlightedItem\"],\n              },\n            ],\n            \"INPUT.CHANGE\": [\n              {\n                guard: \"autoHighlight\",\n                actions: [\"setInputValue\"],\n              },\n              {\n                actions: [\"setInputValue\"],\n              },\n            ],\n            \"LAYER.ESCAPE\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"invokeOnClose\"],\n              },\n            ],\n            \"ITEM.POINTER_MOVE\": {\n              target: \"interacting\",\n              actions: [\"setHighlightedItem\"],\n            },\n            \"ITEM.POINTER_LEAVE\": {\n              actions: [\"clearHighlightedItem\"],\n            },\n            \"LAYER.INTERACT_OUTSIDE\": [\n              // == group 1 ==\n              {\n                guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n                actions: [\"revertInputValue\", \"invokeOnClose\"],\n              },\n              {\n                guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n                target: \"idle\",\n                actions: [\"revertInputValue\", \"invokeOnClose\"],\n              },\n              // == group 2 ==\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"idle\",\n                actions: [\"invokeOnClose\"],\n              },\n            ],\n            \"TRIGGER.CLICK\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"invokeOnClose\"],\n              },\n            ],\n            \"ITEM.CLICK\": [\n              {\n                guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n                actions: [\"selectItem\", \"invokeOnClose\"],\n              },\n              {\n                guard: \"closeOnSelect\",\n                target: \"focused\",\n                actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n              {\n                actions: [\"selectItem\"],\n              },\n            ],\n            CLOSE: [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"invokeOnClose\", \"setFinalFocus\"],\n              },\n            ],\n            \"VALUE.CLEAR\": [\n              {\n                guard: \"isOpenControlled\",\n                actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"],\n              },\n              {\n                target: \"focused\",\n                actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"],\n              },\n            ],\n          },\n        },\n      },\n    },\n\n    {\n      guards: {\n        isInputValueEmpty: (ctx) => ctx.isInputValueEmpty,\n        autoComplete: (ctx) => ctx.autoComplete && !ctx.multiple,\n        autoHighlight: (ctx) => ctx.autoHighlight,\n        isFirstItemHighlighted: (ctx) => ctx.collection.firstValue === ctx.highlightedValue,\n        isLastItemHighlighted: (ctx) => ctx.collection.lastValue === ctx.highlightedValue,\n        isCustomValue: (ctx) => ctx.inputValue !== ctx.valueAsString,\n        allowCustomValue: (ctx) => !!ctx.allowCustomValue,\n        hasHighlightedItem: (ctx) => ctx.highlightedValue != null,\n        closeOnSelect: (ctx) => !!ctx.closeOnSelect,\n        isOpenControlled: (ctx) => !!ctx[\"open.controlled\"],\n        openOnChange: (ctx, evt) => {\n          if (isBoolean(ctx.openOnChange)) return ctx.openOnChange\n          return !!ctx.openOnChange?.({ inputValue: evt.value })\n        },\n        restoreFocus: (_ctx, evt) => (evt.restoreFocus == null ? true : !!evt.restoreFocus),\n        isChangeEvent: (_ctx, evt) => evt.previousEvent?.type === \"INPUT.CHANGE\",\n      },\n\n      activities: {\n        trackDismissableLayer(ctx, _evt, { send }) {\n          if (ctx.disableLayer) return\n          const contentEl = () => dom.getContentEl(ctx)\n          return trackDismissableElement(contentEl, {\n            defer: true,\n            exclude: () => [dom.getInputEl(ctx), dom.getTriggerEl(ctx), dom.getClearTriggerEl(ctx)],\n            onFocusOutside: ctx.onFocusOutside,\n            onPointerDownOutside: ctx.onPointerDownOutside,\n            onInteractOutside: ctx.onInteractOutside,\n            onEscapeKeyDown(event) {\n              event.preventDefault()\n              event.stopPropagation()\n              send(\"LAYER.ESCAPE\")\n            },\n            onDismiss() {\n              send({ type: \"LAYER.INTERACT_OUTSIDE\", restoreFocus: false })\n            },\n          })\n        },\n        hideOtherElements(ctx) {\n          return ariaHidden([dom.getInputEl(ctx), dom.getContentEl(ctx), dom.getTriggerEl(ctx)])\n        },\n        computePlacement(ctx) {\n          const controlEl = () => dom.getControlEl(ctx)\n          const positionerEl = () => dom.getPositionerEl(ctx)\n          ctx.currentPlacement = ctx.positioning.placement\n          return getPlacement(controlEl, positionerEl, {\n            ...ctx.positioning,\n            defer: true,\n            onComplete(data) {\n              ctx.currentPlacement = data.placement\n            },\n          })\n        },\n        // in event the options are fetched (async), we still want to auto-highlight the first option\n        trackChildNodes(ctx, _evt, { send }) {\n          if (!ctx.autoHighlight) return\n          const exec = () => send(\"CHILDREN_CHANGE\")\n          const contentEl = () => dom.getContentEl(ctx)\n          return observeChildren(contentEl, {\n            callback: exec,\n            defer: true,\n          })\n        },\n        scrollToHighlightedItem(ctx, _evt, { getState }) {\n          const inputEl = dom.getInputEl(ctx)\n\n          let cleanups: VoidFunction[] = []\n\n          const exec = (immediate: boolean) => {\n            const state = getState()\n\n            const pointer = state.event.type.includes(\"POINTER\")\n            if (pointer || !ctx.highlightedValue) return\n\n            const itemEl = dom.getHighlightedItemEl(ctx)\n            const contentEl = dom.getContentEl(ctx)\n\n            if (ctx.scrollToIndexFn) {\n              const highlightedIndex = ctx.collection.indexOf(ctx.highlightedValue)\n              ctx.scrollToIndexFn({ index: highlightedIndex, immediate })\n              return\n            }\n\n            const rafCleanup = raf(() => {\n              scrollIntoView(itemEl, { rootEl: contentEl, block: \"nearest\" })\n            })\n            cleanups.push(rafCleanup)\n          }\n\n          const rafCleanup = raf(() => exec(true))\n          cleanups.push(rafCleanup)\n\n          const observerCleanup = observeAttributes(inputEl, {\n            attributes: [\"aria-activedescendant\"],\n            callback: () => exec(false),\n          })\n          cleanups.push(observerCleanup)\n\n          return () => {\n            cleanups.forEach((cleanup) => cleanup())\n          }\n        },\n      },\n\n      actions: {\n        reposition(ctx, evt) {\n          const controlEl = () => dom.getControlEl(ctx)\n          const positionerEl = () => dom.getPositionerEl(ctx)\n          getPlacement(controlEl, positionerEl, {\n            ...ctx.positioning,\n            ...evt.options,\n            defer: true,\n            listeners: false,\n            onComplete(data) {\n              ctx.currentPlacement = data.placement\n            },\n          })\n        },\n        setHighlightedItem(ctx, evt) {\n          if (evt.value == null) return\n          set.highlightedValue(ctx, evt.value)\n        },\n        clearHighlightedItem(ctx) {\n          set.highlightedValue(ctx, null, true)\n        },\n        selectHighlightedItem(ctx) {\n          set.value(ctx, ctx.highlightedValue)\n        },\n        selectItem(ctx, evt) {\n          if (evt.value == null) return\n          set.value(ctx, evt.value)\n        },\n        clearItem(ctx, evt) {\n          if (evt.value == null) return\n          const value = ctx.value.filter((v) => v !== evt.value)\n          set.value(ctx, value)\n        },\n        setInitialFocus(ctx) {\n          raf(() => {\n            dom.focusInputEl(ctx)\n          })\n        },\n        setFinalFocus(ctx) {\n          raf(() => {\n            const triggerEl = dom.getTriggerEl(ctx)\n            if (triggerEl?.dataset.focusable == null) {\n              dom.focusInputEl(ctx)\n            } else {\n              dom.focusTriggerEl(ctx)\n            }\n          })\n        },\n        syncInputValue(ctx) {\n          const inputEl = dom.getInputEl(ctx)\n          if (!inputEl) return\n\n          inputEl.value = ctx.inputValue\n\n          queueMicrotask(() => {\n            const { selectionStart, selectionEnd } = inputEl\n\n            if (Math.abs((selectionEnd ?? 0) - (selectionStart ?? 0)) !== 0) return\n            if (selectionStart !== 0) return\n\n            inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length)\n          })\n        },\n        setInputValue(ctx, evt) {\n          set.inputValue(ctx, evt.value)\n        },\n        clearInputValue(ctx) {\n          set.inputValue(ctx, \"\")\n        },\n        revertInputValue(ctx) {\n          const inputValue = match(ctx.selectionBehavior, {\n            replace: ctx.hasSelectedItems ? ctx.valueAsString : \"\",\n            preserve: ctx.inputValue,\n            clear: \"\",\n          })\n\n          set.inputValue(ctx, inputValue)\n        },\n        syncInitialValues(ctx) {\n          const selectedItems = ctx.collection.findMany(ctx.value)\n          const valueAsString = ctx.collection.stringifyMany(ctx.value)\n\n          ctx.highlightedItem = ctx.collection.find(ctx.highlightedValue)\n          ctx.selectedItems = selectedItems\n          ctx.valueAsString = valueAsString\n\n          if (ctx.inputValue.trim() || ctx.multiple) return\n\n          ctx.inputValue = match(ctx.selectionBehavior, {\n            preserve: ctx.inputValue || valueAsString,\n            replace: valueAsString,\n            clear: \"\",\n          })\n        },\n        syncSelectionBehavior(ctx) {\n          if (ctx.multiple) {\n            ctx.selectionBehavior = \"clear\"\n          }\n        },\n        setSelectedItems(ctx, evt) {\n          if (!isArray(evt.value)) return\n          set.value(ctx, evt.value)\n        },\n        clearSelectedItems(ctx) {\n          set.value(ctx, [])\n        },\n        scrollContentToTop(ctx) {\n          if (ctx.scrollToIndexFn) {\n            ctx.scrollToIndexFn({ index: 0, immediate: true })\n          } else {\n            const contentEl = dom.getContentEl(ctx)\n            if (!contentEl) return\n            contentEl.scrollTop = 0\n          }\n        },\n        invokeOnOpen(ctx) {\n          ctx.onOpenChange?.({ open: true })\n        },\n        invokeOnClose(ctx) {\n          ctx.onOpenChange?.({ open: false })\n        },\n        highlightFirstItem(ctx) {\n          raf(() => {\n            const value = ctx.collection.firstValue\n            set.highlightedValue(ctx, value)\n          })\n        },\n        highlightFirstItemIfNeeded(ctx) {\n          if (!ctx.autoHighlight) return\n          raf(() => {\n            const value = ctx.collection.firstValue\n            set.highlightedValue(ctx, value)\n          })\n        },\n        highlightLastItem(ctx) {\n          raf(() => {\n            const value = ctx.collection.lastValue\n            set.highlightedValue(ctx, value)\n          })\n        },\n        highlightNextItem(ctx) {\n          let value: string | null = null\n          if (ctx.highlightedValue) {\n            value = ctx.collection.getNextValue(ctx.highlightedValue)\n            if (!value && ctx.loopFocus) value = ctx.collection.firstValue\n          } else {\n            value = ctx.collection.firstValue\n          }\n          set.highlightedValue(ctx, value)\n        },\n        highlightPrevItem(ctx) {\n          let value: string | null = null\n          if (ctx.highlightedValue) {\n            value = ctx.collection.getPreviousValue(ctx.highlightedValue)\n            if (!value && ctx.loopFocus) value = ctx.collection.lastValue\n          } else {\n            value = ctx.collection.lastValue\n          }\n          set.highlightedValue(ctx, value)\n        },\n        highlightFirstSelectedItem(ctx) {\n          raf(() => {\n            const [value] = ctx.collection.sort(ctx.value)\n            set.highlightedValue(ctx, value)\n          })\n        },\n        highlightFirstOrSelectedItem(ctx) {\n          raf(() => {\n            let value: string | null = null\n            if (ctx.hasSelectedItems) {\n              value = ctx.collection.sort(ctx.value)[0]\n            } else {\n              value = ctx.collection.firstValue\n            }\n            set.highlightedValue(ctx, value)\n          })\n        },\n        highlightLastOrSelectedItem(ctx) {\n          raf(() => {\n            let value: string | null = null\n            if (ctx.hasSelectedItems) {\n              value = ctx.collection.sort(ctx.value)[0]\n            } else {\n              value = ctx.collection.lastValue\n            }\n            set.highlightedValue(ctx, value)\n          })\n        },\n        autofillInputValue(ctx, evt) {\n          const inputEl = dom.getInputEl(ctx)\n          if (!ctx.autoComplete || !inputEl || !evt.keypress) return\n          const valueText = ctx.collection.stringify(ctx.highlightedValue)\n          raf(() => {\n            inputEl.value = valueText || ctx.inputValue\n          })\n        },\n        setCollection(ctx, evt) {\n          ctx.collection = evt.value\n        },\n        syncSelectedItems(ctx) {\n          sync.valueChange(ctx)\n        },\n        syncHighlightedItem(ctx) {\n          sync.highlightChange(ctx)\n        },\n        toggleVisibility(ctx, evt, { send }) {\n          send({ type: ctx.open ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: evt })\n        },\n      },\n    },\n  )\n}\n\nconst sync = {\n  valueChange: (ctx: MachineContext) => {\n    // side effect\n    const prevSelectedItems = ctx.selectedItems\n\n    ctx.selectedItems = ctx.value.map((v) => {\n      const foundItem = prevSelectedItems.find((item) => ctx.collection.getItemValue(item) === v)\n      if (foundItem) return foundItem\n      return ctx.collection.find(v)\n    })\n\n    const valueAsString = ctx.collection.stringifyItems(ctx.selectedItems)\n    ctx.valueAsString = valueAsString\n\n    // set inputValue\n    let inputValue: string | undefined\n    if (ctx.getSelectionValue) {\n      //\n      inputValue = ctx.getSelectionValue({\n        inputValue: ctx.inputValue,\n        selectedItems: Array.from(ctx.selectedItems),\n        valueAsString,\n      })\n      //\n    } else {\n      //\n      inputValue = match(ctx.selectionBehavior, {\n        replace: ctx.valueAsString,\n        preserve: ctx.inputValue,\n        clear: \"\",\n      })\n    }\n\n    set.inputValue(ctx, inputValue)\n  },\n  highlightChange: (ctx: MachineContext) => {\n    ctx.highlightedItem = ctx.collection.find(ctx.highlightedValue)\n  },\n}\n\nconst invoke = {\n  valueChange: (ctx: MachineContext) => {\n    sync.valueChange(ctx)\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value),\n      items: Array.from(ctx.selectedItems),\n    })\n  },\n  highlightChange: (ctx: MachineContext) => {\n    sync.highlightChange(ctx)\n    ctx.onHighlightChange?.({\n      highlightedValue: ctx.highlightedValue,\n      highlightedItem: ctx.highlightedItem,\n    })\n  },\n  inputChange: (ctx: MachineContext) => {\n    ctx.onInputValueChange?.({ inputValue: ctx.inputValue })\n  },\n}\n\nconst set = {\n  value: (ctx: MachineContext, value: string | string[] | null | undefined, force = false) => {\n    if (isEqual(ctx.value, value)) return\n    if (value == null && !force) return\n    if (value == null && force) {\n      ctx.value = []\n      invoke.valueChange(ctx)\n      return\n    }\n    if (isArray(value)) {\n      ctx.value = value\n    } else if (value != null) {\n      ctx.value = ctx.multiple ? addOrRemove(ctx.value, value) : [value]\n    }\n    invoke.valueChange(ctx)\n  },\n  highlightedValue: (ctx: MachineContext, value: string | null | undefined, force = false) => {\n    if (isEqual(ctx.highlightedValue, value)) return\n    if (!value && !force) return\n    ctx.highlightedValue = value || null\n    invoke.highlightChange(ctx)\n  },\n  inputValue: (ctx: MachineContext, value: string) => {\n    if (isEqual(ctx.inputValue, value)) return\n    ctx.inputValue = value\n    invoke.inputChange(ctx)\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}