{"ast":null,"code":"'use client';\n\nimport * as avatar from '@zag-js/avatar';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useId } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { useEvent } from '../../utils/use-event.js';\nconst useAvatar = function () {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    getRootNode\n  } = useEnvironmentContext();\n  const {\n    dir\n  } = useLocaleContext();\n  const initialContext = {\n    id: useId(),\n    dir,\n    getRootNode,\n    ...props\n  };\n  const context = {\n    ...initialContext,\n    onStatusChange: useEvent(props.onStatusChange)\n  };\n  const [state, send] = useMachine(avatar.machine(initialContext), {\n    context\n  });\n  return avatar.connect(state, send, normalizeProps);\n};\nexport { useAvatar };","map":{"version":3,"names":["avatar","useMachine","normalizeProps","useId","useEnvironmentContext","useLocaleContext","useEvent","useAvatar","props","arguments","length","undefined","getRootNode","dir","initialContext","id","context","onStatusChange","state","send","machine","connect"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@ark-ui/react/dist/components/avatar/use-avatar.js"],"sourcesContent":["'use client';\nimport * as avatar from '@zag-js/avatar';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useId } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { useEvent } from '../../utils/use-event.js';\n\nconst useAvatar = (props = {}) => {\n  const { getRootNode } = useEnvironmentContext();\n  const { dir } = useLocaleContext();\n  const initialContext = {\n    id: useId(),\n    dir,\n    getRootNode,\n    ...props\n  };\n  const context = {\n    ...initialContext,\n    onStatusChange: useEvent(props.onStatusChange)\n  };\n  const [state, send] = useMachine(avatar.machine(initialContext), { context });\n  return avatar.connect(state, send, normalizeProps);\n};\n\nexport { useAvatar };\n"],"mappings":"AAAA,YAAY;;AACZ,OAAO,KAAKA,MAAM,MAAM,gBAAgB;AACxC,SAASC,UAAU,EAAEC,cAAc,QAAQ,eAAe;AAC1D,SAASC,KAAK,QAAQ,OAAO;AAC7B,SAASC,qBAAqB,QAAQ,wDAAwD;AAC9F,SAASC,gBAAgB,QAAQ,8CAA8C;AAC/E,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,MAAMC,SAAS,GAAG,SAAAA,CAAA,EAAgB;EAAA,IAAfC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC3B,MAAM;IAAEG;EAAY,CAAC,GAAGR,qBAAqB,CAAC,CAAC;EAC/C,MAAM;IAAES;EAAI,CAAC,GAAGR,gBAAgB,CAAC,CAAC;EAClC,MAAMS,cAAc,GAAG;IACrBC,EAAE,EAAEZ,KAAK,CAAC,CAAC;IACXU,GAAG;IACHD,WAAW;IACX,GAAGJ;EACL,CAAC;EACD,MAAMQ,OAAO,GAAG;IACd,GAAGF,cAAc;IACjBG,cAAc,EAAEX,QAAQ,CAACE,KAAK,CAACS,cAAc;EAC/C,CAAC;EACD,MAAM,CAACC,KAAK,EAAEC,IAAI,CAAC,GAAGlB,UAAU,CAACD,MAAM,CAACoB,OAAO,CAACN,cAAc,CAAC,EAAE;IAAEE;EAAQ,CAAC,CAAC;EAC7E,OAAOhB,MAAM,CAACqB,OAAO,CAACH,KAAK,EAAEC,IAAI,EAAEjB,cAAc,CAAC;AACpD,CAAC;AAED,SAASK,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}