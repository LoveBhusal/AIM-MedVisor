{"ast":null,"code":"\"use strict\";\n\nimport { toRem, toPx } from './unit-conversion.js';\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\nfunction createBreakpoints(breakpoints) {\n  const sorted = sort(breakpoints);\n  const values = Object.fromEntries(sorted);\n  function get(name) {\n    return values[name];\n  }\n  function only(name) {\n    return build(get(name));\n  }\n  function getRanges() {\n    const breakpoints2 = Object.keys(values);\n    const permuations = getPermutations(breakpoints2);\n    const results = breakpoints2.flatMap(name => {\n      const value = get(name);\n      const down2 = [`${name}Down`, build({\n        max: adjust(value.min)\n      })];\n      const up2 = [name, build({\n        min: value.min\n      })];\n      const _only = [`${name}Only`, only(name)];\n      return [up2, _only, down2];\n    }).filter(_ref => {\n      let [, value] = _ref;\n      return value !== \"\";\n    }).concat(permuations.map(_ref2 => {\n      let [min, max] = _ref2;\n      const minValue = get(min);\n      const maxValue = get(max);\n      return [`${min}To${capitalize(max)}`, build({\n        min: minValue.min,\n        max: adjust(maxValue.min)\n      })];\n    }));\n    return Object.fromEntries(results);\n  }\n  function toConditions() {\n    const ranges = getRanges();\n    return Object.fromEntries(Object.entries(ranges));\n  }\n  const conditions = toConditions();\n  const getCondition = key => {\n    return conditions[key];\n  };\n  function keys() {\n    return [\"base\", ...Object.keys(values)];\n  }\n  function up(name) {\n    return build({\n      min: get(name).min\n    });\n  }\n  function down(name) {\n    return build({\n      max: adjust(get(name).min)\n    });\n  }\n  return {\n    values: Object.values(values),\n    only,\n    keys,\n    conditions,\n    getCondition,\n    up,\n    down\n  };\n}\nfunction adjust(value) {\n  const computedMax = parseFloat(toPx(value) ?? \"\") - 0.04;\n  return toRem(`${computedMax}px`);\n}\nfunction sort(breakpoints) {\n  const entries = Object.entries(breakpoints).sort((_ref3, _ref4) => {\n    let [, minA] = _ref3;\n    let [, minB] = _ref4;\n    return parseInt(minA, 10) < parseInt(minB, 10) ? -1 : 1;\n  });\n  return entries.map((_ref5, index, entries2) => {\n    let [name, min] = _ref5;\n    let max = null;\n    if (index <= entries2.length - 1) {\n      max = entries2[index + 1]?.[1];\n    }\n    if (max != null) {\n      max = adjust(max);\n    }\n    return [name, {\n      name,\n      min: toRem(min),\n      max\n    }];\n  });\n}\nfunction getPermutations(values) {\n  const result = [];\n  values.forEach((current, index) => {\n    let idx = index;\n    idx++;\n    let next = values[idx];\n    while (next) {\n      result.push([current, next]);\n      idx++;\n      next = values[idx];\n    }\n  });\n  return result;\n}\nfunction build(_ref6) {\n  let {\n    min,\n    max\n  } = _ref6;\n  if (min == null && max == null) return \"\";\n  return [\"@media screen\", min && `(min-width: ${min})`, max && `(max-width: ${max})`].filter(Boolean).join(\" and \");\n}\nexport { createBreakpoints };","map":{"version":3,"names":["toRem","toPx","capitalize","str","charAt","toUpperCase","slice","createBreakpoints","breakpoints","sorted","sort","values","Object","fromEntries","get","name","only","build","getRanges","breakpoints2","keys","permuations","getPermutations","results","flatMap","value","down2","max","adjust","min","up2","_only","filter","_ref","concat","map","_ref2","minValue","maxValue","toConditions","ranges","entries","conditions","getCondition","key","up","down","computedMax","parseFloat","_ref3","_ref4","minA","minB","parseInt","_ref5","index","entries2","length","result","forEach","current","idx","next","push","_ref6","Boolean","join"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@chakra-ui/react/dist/esm/styled-system/breakpoints.js"],"sourcesContent":["\"use strict\";\nimport { toRem, toPx } from './unit-conversion.js';\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\nfunction createBreakpoints(breakpoints) {\n  const sorted = sort(breakpoints);\n  const values = Object.fromEntries(sorted);\n  function get(name) {\n    return values[name];\n  }\n  function only(name) {\n    return build(get(name));\n  }\n  function getRanges() {\n    const breakpoints2 = Object.keys(values);\n    const permuations = getPermutations(breakpoints2);\n    const results = breakpoints2.flatMap((name) => {\n      const value = get(name);\n      const down2 = [\n        `${name}Down`,\n        build({ max: adjust(value.min) })\n      ];\n      const up2 = [name, build({ min: value.min })];\n      const _only = [`${name}Only`, only(name)];\n      return [up2, _only, down2];\n    }).filter(([, value]) => value !== \"\").concat(\n      permuations.map(([min, max]) => {\n        const minValue = get(min);\n        const maxValue = get(max);\n        return [\n          `${min}To${capitalize(max)}`,\n          build({ min: minValue.min, max: adjust(maxValue.min) })\n        ];\n      })\n    );\n    return Object.fromEntries(results);\n  }\n  function toConditions() {\n    const ranges = getRanges();\n    return Object.fromEntries(Object.entries(ranges));\n  }\n  const conditions = toConditions();\n  const getCondition = (key) => {\n    return conditions[key];\n  };\n  function keys() {\n    return [\"base\", ...Object.keys(values)];\n  }\n  function up(name) {\n    return build({ min: get(name).min });\n  }\n  function down(name) {\n    return build({ max: adjust(get(name).min) });\n  }\n  return {\n    values: Object.values(values),\n    only,\n    keys,\n    conditions,\n    getCondition,\n    up,\n    down\n  };\n}\nfunction adjust(value) {\n  const computedMax = parseFloat(toPx(value) ?? \"\") - 0.04;\n  return toRem(`${computedMax}px`);\n}\nfunction sort(breakpoints) {\n  const entries = Object.entries(breakpoints).sort(([, minA], [, minB]) => {\n    return parseInt(minA, 10) < parseInt(minB, 10) ? -1 : 1;\n  });\n  return entries.map(([name, min], index, entries2) => {\n    let max = null;\n    if (index <= entries2.length - 1) {\n      max = entries2[index + 1]?.[1];\n    }\n    if (max != null) {\n      max = adjust(max);\n    }\n    return [name, { name, min: toRem(min), max }];\n  });\n}\nfunction getPermutations(values) {\n  const result = [];\n  values.forEach((current, index) => {\n    let idx = index;\n    idx++;\n    let next = values[idx];\n    while (next) {\n      result.push([current, next]);\n      idx++;\n      next = values[idx];\n    }\n  });\n  return result;\n}\nfunction build({ min, max }) {\n  if (min == null && max == null) return \"\";\n  return [\n    \"@media screen\",\n    min && `(min-width: ${min})`,\n    max && `(max-width: ${max})`\n  ].filter(Boolean).join(\" and \");\n}\n\nexport { createBreakpoints };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,KAAK,EAAEC,IAAI,QAAQ,sBAAsB;AAElD,MAAMC,UAAU,GAAIC,GAAG,IAAKA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;AACtE,SAASC,iBAAiBA,CAACC,WAAW,EAAE;EACtC,MAAMC,MAAM,GAAGC,IAAI,CAACF,WAAW,CAAC;EAChC,MAAMG,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACJ,MAAM,CAAC;EACzC,SAASK,GAAGA,CAACC,IAAI,EAAE;IACjB,OAAOJ,MAAM,CAACI,IAAI,CAAC;EACrB;EACA,SAASC,IAAIA,CAACD,IAAI,EAAE;IAClB,OAAOE,KAAK,CAACH,GAAG,CAACC,IAAI,CAAC,CAAC;EACzB;EACA,SAASG,SAASA,CAAA,EAAG;IACnB,MAAMC,YAAY,GAAGP,MAAM,CAACQ,IAAI,CAACT,MAAM,CAAC;IACxC,MAAMU,WAAW,GAAGC,eAAe,CAACH,YAAY,CAAC;IACjD,MAAMI,OAAO,GAAGJ,YAAY,CAACK,OAAO,CAAET,IAAI,IAAK;MAC7C,MAAMU,KAAK,GAAGX,GAAG,CAACC,IAAI,CAAC;MACvB,MAAMW,KAAK,GAAG,CACZ,GAAGX,IAAI,MAAM,EACbE,KAAK,CAAC;QAAEU,GAAG,EAAEC,MAAM,CAACH,KAAK,CAACI,GAAG;MAAE,CAAC,CAAC,CAClC;MACD,MAAMC,GAAG,GAAG,CAACf,IAAI,EAAEE,KAAK,CAAC;QAAEY,GAAG,EAAEJ,KAAK,CAACI;MAAI,CAAC,CAAC,CAAC;MAC7C,MAAME,KAAK,GAAG,CAAC,GAAGhB,IAAI,MAAM,EAAEC,IAAI,CAACD,IAAI,CAAC,CAAC;MACzC,OAAO,CAACe,GAAG,EAAEC,KAAK,EAAEL,KAAK,CAAC;IAC5B,CAAC,CAAC,CAACM,MAAM,CAACC,IAAA;MAAA,IAAC,GAAGR,KAAK,CAAC,GAAAQ,IAAA;MAAA,OAAKR,KAAK,KAAK,EAAE;IAAA,EAAC,CAACS,MAAM,CAC3Cb,WAAW,CAACc,GAAG,CAACC,KAAA,IAAgB;MAAA,IAAf,CAACP,GAAG,EAAEF,GAAG,CAAC,GAAAS,KAAA;MACzB,MAAMC,QAAQ,GAAGvB,GAAG,CAACe,GAAG,CAAC;MACzB,MAAMS,QAAQ,GAAGxB,GAAG,CAACa,GAAG,CAAC;MACzB,OAAO,CACL,GAAGE,GAAG,KAAK3B,UAAU,CAACyB,GAAG,CAAC,EAAE,EAC5BV,KAAK,CAAC;QAAEY,GAAG,EAAEQ,QAAQ,CAACR,GAAG;QAAEF,GAAG,EAAEC,MAAM,CAACU,QAAQ,CAACT,GAAG;MAAE,CAAC,CAAC,CACxD;IACH,CAAC,CACH,CAAC;IACD,OAAOjB,MAAM,CAACC,WAAW,CAACU,OAAO,CAAC;EACpC;EACA,SAASgB,YAAYA,CAAA,EAAG;IACtB,MAAMC,MAAM,GAAGtB,SAAS,CAAC,CAAC;IAC1B,OAAON,MAAM,CAACC,WAAW,CAACD,MAAM,CAAC6B,OAAO,CAACD,MAAM,CAAC,CAAC;EACnD;EACA,MAAME,UAAU,GAAGH,YAAY,CAAC,CAAC;EACjC,MAAMI,YAAY,GAAIC,GAAG,IAAK;IAC5B,OAAOF,UAAU,CAACE,GAAG,CAAC;EACxB,CAAC;EACD,SAASxB,IAAIA,CAAA,EAAG;IACd,OAAO,CAAC,MAAM,EAAE,GAAGR,MAAM,CAACQ,IAAI,CAACT,MAAM,CAAC,CAAC;EACzC;EACA,SAASkC,EAAEA,CAAC9B,IAAI,EAAE;IAChB,OAAOE,KAAK,CAAC;MAAEY,GAAG,EAAEf,GAAG,CAACC,IAAI,CAAC,CAACc;IAAI,CAAC,CAAC;EACtC;EACA,SAASiB,IAAIA,CAAC/B,IAAI,EAAE;IAClB,OAAOE,KAAK,CAAC;MAAEU,GAAG,EAAEC,MAAM,CAACd,GAAG,CAACC,IAAI,CAAC,CAACc,GAAG;IAAE,CAAC,CAAC;EAC9C;EACA,OAAO;IACLlB,MAAM,EAAEC,MAAM,CAACD,MAAM,CAACA,MAAM,CAAC;IAC7BK,IAAI;IACJI,IAAI;IACJsB,UAAU;IACVC,YAAY;IACZE,EAAE;IACFC;EACF,CAAC;AACH;AACA,SAASlB,MAAMA,CAACH,KAAK,EAAE;EACrB,MAAMsB,WAAW,GAAGC,UAAU,CAAC/C,IAAI,CAACwB,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI;EACxD,OAAOzB,KAAK,CAAC,GAAG+C,WAAW,IAAI,CAAC;AAClC;AACA,SAASrC,IAAIA,CAACF,WAAW,EAAE;EACzB,MAAMiC,OAAO,GAAG7B,MAAM,CAAC6B,OAAO,CAACjC,WAAW,CAAC,CAACE,IAAI,CAAC,CAAAuC,KAAA,EAAAC,KAAA,KAAwB;IAAA,IAAvB,GAAGC,IAAI,CAAC,GAAAF,KAAA;IAAA,IAAE,GAAGG,IAAI,CAAC,GAAAF,KAAA;IAClE,OAAOG,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC,GAAGE,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACzD,CAAC,CAAC;EACF,OAAOX,OAAO,CAACN,GAAG,CAAC,CAAAmB,KAAA,EAAcC,KAAK,EAAEC,QAAQ,KAAK;IAAA,IAAjC,CAACzC,IAAI,EAAEc,GAAG,CAAC,GAAAyB,KAAA;IAC7B,IAAI3B,GAAG,GAAG,IAAI;IACd,IAAI4B,KAAK,IAAIC,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MAChC9B,GAAG,GAAG6B,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC;IACA,IAAI5B,GAAG,IAAI,IAAI,EAAE;MACfA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC;IACnB;IACA,OAAO,CAACZ,IAAI,EAAE;MAAEA,IAAI;MAAEc,GAAG,EAAE7B,KAAK,CAAC6B,GAAG,CAAC;MAAEF;IAAI,CAAC,CAAC;EAC/C,CAAC,CAAC;AACJ;AACA,SAASL,eAAeA,CAACX,MAAM,EAAE;EAC/B,MAAM+C,MAAM,GAAG,EAAE;EACjB/C,MAAM,CAACgD,OAAO,CAAC,CAACC,OAAO,EAAEL,KAAK,KAAK;IACjC,IAAIM,GAAG,GAAGN,KAAK;IACfM,GAAG,EAAE;IACL,IAAIC,IAAI,GAAGnD,MAAM,CAACkD,GAAG,CAAC;IACtB,OAAOC,IAAI,EAAE;MACXJ,MAAM,CAACK,IAAI,CAAC,CAACH,OAAO,EAAEE,IAAI,CAAC,CAAC;MAC5BD,GAAG,EAAE;MACLC,IAAI,GAAGnD,MAAM,CAACkD,GAAG,CAAC;IACpB;EACF,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;AACA,SAASzC,KAAKA,CAAA+C,KAAA,EAAe;EAAA,IAAd;IAAEnC,GAAG;IAAEF;EAAI,CAAC,GAAAqC,KAAA;EACzB,IAAInC,GAAG,IAAI,IAAI,IAAIF,GAAG,IAAI,IAAI,EAAE,OAAO,EAAE;EACzC,OAAO,CACL,eAAe,EACfE,GAAG,IAAI,eAAeA,GAAG,GAAG,EAC5BF,GAAG,IAAI,eAAeA,GAAG,GAAG,CAC7B,CAACK,MAAM,CAACiC,OAAO,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACjC;AAEA,SAAS3D,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}