{"ast":null,"code":"// src/number-input.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"numberInput\").parts(\"root\", \"label\", \"input\", \"control\", \"valueText\", \"incrementTrigger\", \"decrementTrigger\", \"scrubber\");\nvar parts = anatomy.build();\n\n// src/number-input.connect.ts\nimport { getEventPoint, getEventStep, isLeftClick } from \"@zag-js/dom-event\";\nimport { ariaAttr, dataAttr, isComposingEvent } from \"@zag-js/dom-query\";\nimport { roundToDevicePixel as roundToDevicePixel2 } from \"@zag-js/number-utils\";\n\n// src/number-input.dom.ts\nimport { createScope, isSafari, MAX_Z_INDEX } from \"@zag-js/dom-query\";\nimport { roundToDevicePixel, wrap } from \"@zag-js/number-utils\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `number-input:${ctx.id}`,\n  getInputId: ctx => ctx.ids?.input ?? `number-input:${ctx.id}:input`,\n  getIncrementTriggerId: ctx => ctx.ids?.incrementTrigger ?? `number-input:${ctx.id}:inc`,\n  getDecrementTriggerId: ctx => ctx.ids?.decrementTrigger ?? `number-input:${ctx.id}:dec`,\n  getScrubberId: ctx => ctx.ids?.scrubber ?? `number-input:${ctx.id}:scrubber`,\n  getCursorId: ctx => `number-input:${ctx.id}:cursor`,\n  getLabelId: ctx => ctx.ids?.label ?? `number-input:${ctx.id}:label`,\n  getInputEl: ctx => dom.getById(ctx, dom.getInputId(ctx)),\n  getIncrementTriggerEl: ctx => dom.getById(ctx, dom.getIncrementTriggerId(ctx)),\n  getDecrementTriggerEl: ctx => dom.getById(ctx, dom.getDecrementTriggerId(ctx)),\n  getScrubberEl: ctx => dom.getById(ctx, dom.getScrubberId(ctx)),\n  getCursorEl: ctx => dom.getDoc(ctx).getElementById(dom.getCursorId(ctx)),\n  getPressedTriggerEl: function (ctx) {\n    let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ctx.hint;\n    let btnEl = null;\n    if (hint === \"increment\") {\n      btnEl = dom.getIncrementTriggerEl(ctx);\n    }\n    if (hint === \"decrement\") {\n      btnEl = dom.getDecrementTriggerEl(ctx);\n    }\n    return btnEl;\n  },\n  setupVirtualCursor(ctx) {\n    if (isSafari()) return;\n    dom.createVirtualCursor(ctx);\n    return () => {\n      dom.getCursorEl(ctx)?.remove();\n    };\n  },\n  preventTextSelection(ctx) {\n    const doc = dom.getDoc(ctx);\n    const html = doc.documentElement;\n    const body = doc.body;\n    body.style.pointerEvents = \"none\";\n    html.style.userSelect = \"none\";\n    html.style.cursor = \"ew-resize\";\n    return () => {\n      body.style.pointerEvents = \"\";\n      html.style.userSelect = \"\";\n      html.style.cursor = \"\";\n      if (!html.style.length) {\n        html.removeAttribute(\"style\");\n      }\n      if (!body.style.length) {\n        body.removeAttribute(\"style\");\n      }\n    };\n  },\n  getMousementValue(ctx, event) {\n    const x = roundToDevicePixel(event.movementX);\n    const y = roundToDevicePixel(event.movementY);\n    let hint = x > 0 ? \"increment\" : x < 0 ? \"decrement\" : null;\n    if (ctx.isRtl && hint === \"increment\") hint = \"decrement\";\n    if (ctx.isRtl && hint === \"decrement\") hint = \"increment\";\n    const point = {\n      x: ctx.scrubberCursorPoint.x + x,\n      y: ctx.scrubberCursorPoint.y + y\n    };\n    const win = dom.getWin(ctx);\n    const width = win.innerWidth;\n    const half = roundToDevicePixel(7.5);\n    point.x = wrap(point.x + half, width) - half;\n    return {\n      hint,\n      point\n    };\n  },\n  createVirtualCursor(ctx) {\n    const doc = dom.getDoc(ctx);\n    const el = doc.createElement(\"div\");\n    el.className = \"scrubber--cursor\";\n    el.id = dom.getCursorId(ctx);\n    Object.assign(el.style, {\n      width: \"15px\",\n      height: \"15px\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      left: \"0px\",\n      top: \"0px\",\n      zIndex: MAX_Z_INDEX,\n      transform: ctx.scrubberCursorPoint ? `translate3d(${ctx.scrubberCursorPoint.x}px, ${ctx.scrubberCursorPoint.y}px, 0px)` : void 0,\n      willChange: \"transform\"\n    });\n    el.innerHTML = `\n        <svg width=\"46\" height=\"15\" style=\"left: -15.5px; position: absolute; top: 0; filter: drop-shadow(rgba(0, 0, 0, 0.4) 0px 1px 1.1px);\">\n          <g transform=\"translate(2 3)\">\n            <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\" style=\"stroke-width: 2px; stroke: white;\"></path>\n            <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\"></path>\n          </g>\n        </svg>`;\n    doc.body.appendChild(el);\n  }\n});\n\n// src/number-input.connect.ts\nfunction connect(state, send, normalize) {\n  const focused = state.hasTag(\"focus\");\n  const disabled = state.context.isDisabled;\n  const readOnly = state.context.readOnly;\n  const empty = state.context.isValueEmpty;\n  const invalid = state.context.isOutOfRange || !!state.context.invalid;\n  const isIncrementDisabled = disabled || !state.context.canIncrement || readOnly;\n  const isDecrementDisabled = disabled || !state.context.canDecrement || readOnly;\n  const translations = state.context.translations;\n  return {\n    focused,\n    invalid,\n    empty,\n    value: state.context.formattedValue,\n    valueAsNumber: state.context.valueAsNumber,\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    clearValue() {\n      send(\"VALUE.CLEAR\");\n    },\n    increment() {\n      send(\"VALUE.INCREMENT\");\n    },\n    decrement() {\n      send(\"VALUE.DECREMENT\");\n    },\n    setToMax() {\n      send({\n        type: \"VALUE.SET\",\n        value: state.context.max\n      });\n    },\n    setToMin() {\n      send({\n        type: \"VALUE.SET\",\n        value: state.context.min\n      });\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus();\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-invalid\": dataAttr(invalid)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-invalid\": dataAttr(invalid),\n        id: dom.getLabelId(state.context),\n        htmlFor: dom.getInputId(state.context)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        role: \"group\",\n        \"aria-disabled\": disabled,\n        \"data-focus\": dataAttr(focused),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-invalid\": ariaAttr(state.context.invalid)\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        name: state.context.name,\n        form: state.context.form,\n        id: dom.getInputId(state.context),\n        role: \"spinbutton\",\n        defaultValue: state.context.formattedValue,\n        pattern: state.context.pattern,\n        inputMode: state.context.inputMode,\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        spellCheck: \"false\",\n        type: \"text\",\n        \"aria-roledescription\": \"numberfield\",\n        \"aria-valuemin\": state.context.min,\n        \"aria-valuemax\": state.context.max,\n        \"aria-valuenow\": Number.isNaN(state.context.valueAsNumber) ? void 0 : state.context.valueAsNumber,\n        \"aria-valuetext\": state.context.valueText,\n        onFocus() {\n          send(\"INPUT.FOCUS\");\n        },\n        onBlur() {\n          send({\n            type: \"INPUT.COMMIT\",\n            src: \"blur\"\n          });\n        },\n        onChange(event) {\n          send({\n            type: \"INPUT.CHANGE\",\n            target: event.currentTarget,\n            hint: \"set\"\n          });\n        },\n        onBeforeInput(event) {\n          try {\n            const {\n              selectionStart,\n              selectionEnd,\n              value\n            } = event.currentTarget;\n            const nextValue = value.slice(0, selectionStart) + (event.data ?? \"\") + value.slice(selectionEnd);\n            const isValid = state.context.parser.isValidPartialNumber(nextValue);\n            if (!isValid) {\n              event.preventDefault();\n            }\n          } catch {}\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (readOnly) return;\n          if (isComposingEvent(event)) return;\n          const step = getEventStep(event) * state.context.step;\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"INPUT.ARROW_UP\",\n                step\n              });\n              event.preventDefault();\n            },\n            ArrowDown() {\n              send({\n                type: \"INPUT.ARROW_DOWN\",\n                step\n              });\n              event.preventDefault();\n            },\n            Home() {\n              send(\"INPUT.HOME\");\n              event.preventDefault();\n            },\n            End() {\n              send(\"INPUT.END\");\n              event.preventDefault();\n            },\n            Enter() {\n              send({\n                type: \"INPUT.COMMIT\",\n                src: \"enter\"\n              });\n            }\n          };\n          const exec = keyMap[event.key];\n          exec?.(event);\n        }\n      });\n    },\n    getDecrementTriggerProps() {\n      return normalize.button({\n        ...parts.decrementTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getDecrementTriggerId(state.context),\n        disabled: isDecrementDisabled,\n        \"data-disabled\": dataAttr(isDecrementDisabled),\n        \"aria-label\": translations.decrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": dom.getInputId(state.context),\n        onPointerDown(event) {\n          if (isDecrementDisabled || !isLeftClick(event)) return;\n          send({\n            type: \"TRIGGER.PRESS_DOWN\",\n            hint: \"decrement\",\n            pointerType: event.pointerType\n          });\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault();\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({\n              preventScroll: true\n            });\n          }\n        },\n        onPointerUp(event) {\n          send({\n            type: \"TRIGGER.PRESS_UP\",\n            hint: \"decrement\",\n            pointerType: event.pointerType\n          });\n        },\n        onPointerLeave() {\n          if (isDecrementDisabled) return;\n          send({\n            type: \"TRIGGER.PRESS_UP\",\n            hint: \"decrement\"\n          });\n        }\n      });\n    },\n    getIncrementTriggerProps() {\n      return normalize.button({\n        ...parts.incrementTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getIncrementTriggerId(state.context),\n        disabled: isIncrementDisabled,\n        \"data-disabled\": dataAttr(isIncrementDisabled),\n        \"aria-label\": translations.incrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": dom.getInputId(state.context),\n        onPointerDown(event) {\n          if (isIncrementDisabled || !isLeftClick(event)) return;\n          send({\n            type: \"TRIGGER.PRESS_DOWN\",\n            hint: \"increment\",\n            pointerType: event.pointerType\n          });\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault();\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({\n              preventScroll: true\n            });\n          }\n        },\n        onPointerUp(event) {\n          send({\n            type: \"TRIGGER.PRESS_UP\",\n            hint: \"increment\",\n            pointerType: event.pointerType\n          });\n        },\n        onPointerLeave(event) {\n          send({\n            type: \"TRIGGER.PRESS_UP\",\n            hint: \"increment\",\n            pointerType: event.pointerType\n          });\n        }\n      });\n    },\n    getScrubberProps() {\n      return normalize.element({\n        ...parts.scrubber.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getScrubberId(state.context),\n        role: \"presentation\",\n        onMouseDown(event) {\n          if (disabled) return;\n          const point = getEventPoint(event);\n          point.x = point.x - roundToDevicePixel2(7.5);\n          point.y = point.y - roundToDevicePixel2(7.5);\n          send({\n            type: \"SCRUBBER.PRESS_DOWN\",\n            point\n          });\n          event.preventDefault();\n        },\n        style: {\n          cursor: disabled ? void 0 : \"ew-resize\"\n        }\n      });\n    }\n  };\n}\n\n// src/number-input.machine.ts\nimport { choose, createMachine, guards } from \"@zag-js/core\";\nimport { addDomEvent, requestPointerLock } from \"@zag-js/dom-event\";\nimport { isSafari as isSafari2, observeAttributes, raf } from \"@zag-js/dom-query\";\nimport { trackFormControl } from \"@zag-js/form-utils\";\nimport { clamp, decrement, increment, isAtMax, isAtMin, isWithinRange } from \"@zag-js/number-utils\";\nimport { callAll, compact, isEqual } from \"@zag-js/utils\";\n\n// src/cursor.ts\nfunction recordCursor(inputEl) {\n  if (inputEl.ownerDocument.activeElement !== inputEl) return;\n  try {\n    const {\n      selectionStart: start,\n      selectionEnd: end,\n      value\n    } = inputEl;\n    const beforeTxt = value.substring(0, start);\n    const afterTxt = value.substring(end);\n    return {\n      start,\n      end,\n      value,\n      beforeTxt,\n      afterTxt\n    };\n  } catch {}\n}\nfunction restoreCursor(inputEl, selection) {\n  if (inputEl.ownerDocument.activeElement !== inputEl) return;\n  if (!selection) {\n    inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);\n    return;\n  }\n  try {\n    const {\n      value\n    } = inputEl;\n    const {\n      beforeTxt = \"\",\n      afterTxt = \"\",\n      start\n    } = selection;\n    let startPos = value.length;\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length;\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length;\n    } else if (start != null) {\n      const beforeLastChar = beforeTxt[start - 1];\n      const newIndex = value.indexOf(beforeLastChar, start - 1);\n      if (newIndex !== -1) {\n        startPos = newIndex + 1;\n      }\n    }\n    inputEl.setSelectionRange(startPos, startPos);\n  } catch {}\n}\n\n// src/number-input.utils.ts\nimport { NumberParser } from \"@internationalized/number\";\nimport { ref } from \"@zag-js/core\";\nvar createFormatter = function (locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ref(new Intl.NumberFormat(locale, options));\n};\nvar createParser = function (locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ref(new NumberParser(locale, options));\n};\nvar parseValue = (ctx, value) => {\n  if (!ctx.formatOptions) return parseFloat(value);\n  return ctx.parser.parse(String(value));\n};\nvar formatValue = (ctx, value) => {\n  if (Number.isNaN(value)) return \"\";\n  if (!ctx.formatOptions) return value.toString();\n  return ctx.formatter.format(value);\n};\n\n// src/number-input.machine.ts\nvar {\n  not,\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"number-input\",\n    initial: \"idle\",\n    context: {\n      dir: \"ltr\",\n      locale: \"en-US\",\n      focusInputOnChange: true,\n      clampValueOnBlur: true,\n      allowOverflow: false,\n      inputMode: \"decimal\",\n      pattern: \"[0-9]*(.[0-9]+)?\",\n      value: \"\",\n      step: 1,\n      min: Number.MIN_SAFE_INTEGER,\n      max: Number.MAX_SAFE_INTEGER,\n      invalid: false,\n      spinOnPress: true,\n      disabled: false,\n      readOnly: false,\n      ...ctx,\n      hint: null,\n      scrubberCursorPoint: null,\n      fieldsetDisabled: false,\n      formatter: createFormatter(ctx.locale || \"en-US\", ctx.formatOptions),\n      parser: createParser(ctx.locale || \"en-US\", ctx.formatOptions),\n      translations: {\n        incrementLabel: \"increment value\",\n        decrementLabel: \"decrease value\",\n        ...ctx.translations\n      }\n    },\n    computed: {\n      isRtl: ctx2 => ctx2.dir === \"rtl\",\n      valueAsNumber: ctx2 => parseValue(ctx2, ctx2.value),\n      formattedValue: ctx2 => formatValue(ctx2, ctx2.valueAsNumber),\n      isAtMin: ctx2 => isAtMin(ctx2.valueAsNumber, ctx2),\n      isAtMax: ctx2 => isAtMax(ctx2.valueAsNumber, ctx2),\n      isOutOfRange: ctx2 => !isWithinRange(ctx2.valueAsNumber, ctx2),\n      isValueEmpty: ctx2 => ctx2.value === \"\",\n      isDisabled: ctx2 => !!ctx2.disabled || ctx2.fieldsetDisabled,\n      canIncrement: ctx2 => ctx2.allowOverflow || !ctx2.isAtMax,\n      canDecrement: ctx2 => ctx2.allowOverflow || !ctx2.isAtMin,\n      valueText: ctx2 => ctx2.translations.valueText?.(ctx2.value)\n    },\n    watch: {\n      formatOptions: [\"setFormatterAndParser\", \"syncInputElement\"],\n      locale: [\"setFormatterAndParser\", \"syncInputElement\"],\n      value: [\"syncInputElement\"],\n      isOutOfRange: [\"invokeOnInvalid\"],\n      scrubberCursorPoint: [\"setVirtualCursorPosition\"]\n    },\n    activities: [\"trackFormControl\"],\n    on: {\n      \"VALUE.SET\": {\n        actions: [\"setRawValue\", \"setHintToSet\"]\n      },\n      \"VALUE.CLEAR\": {\n        actions: [\"clearValue\"]\n      },\n      \"VALUE.INCREMENT\": {\n        actions: [\"increment\"]\n      },\n      \"VALUE.DECREMENT\": {\n        actions: [\"decrement\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"TRIGGER.PRESS_DOWN\": [{\n            guard: \"isTouchPointer\",\n            target: \"before:spin\",\n            actions: [\"setHint\"]\n          }, {\n            target: \"before:spin\",\n            actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\"]\n          }],\n          \"SCRUBBER.PRESS_DOWN\": {\n            target: \"scrubbing\",\n            actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\", \"setCursorPoint\"]\n          },\n          \"INPUT.FOCUS\": {\n            target: \"focused\",\n            actions: [\"focusInput\", \"invokeOnFocus\"]\n          }\n        }\n      },\n      focused: {\n        tags: \"focus\",\n        activities: \"attachWheelListener\",\n        on: {\n          \"TRIGGER.PRESS_DOWN\": [{\n            guard: \"isTouchPointer\",\n            target: \"before:spin\",\n            actions: [\"setHint\"]\n          }, {\n            target: \"before:spin\",\n            actions: [\"focusInput\", \"setHint\"]\n          }],\n          \"SCRUBBER.PRESS_DOWN\": {\n            target: \"scrubbing\",\n            actions: [\"focusInput\", \"setHint\", \"setCursorPoint\"]\n          },\n          \"INPUT.ARROW_UP\": {\n            actions: \"increment\"\n          },\n          \"INPUT.ARROW_DOWN\": {\n            actions: \"decrement\"\n          },\n          \"INPUT.HOME\": {\n            actions: \"decrementToMin\"\n          },\n          \"INPUT.END\": {\n            actions: \"incrementToMax\"\n          },\n          \"INPUT.CHANGE\": {\n            actions: [\"setValue\", \"setHint\"]\n          },\n          \"INPUT.COMMIT\": [{\n            guard: and(\"clampValueOnBlur\", not(\"isInRange\")),\n            target: \"idle\",\n            actions: [\"setClampedValue\", \"clearHint\", \"invokeOnBlur\"]\n          }, {\n            target: \"idle\",\n            actions: [\"setFormattedValue\", \"clearHint\", \"invokeOnBlur\"]\n          }]\n        }\n      },\n      \"before:spin\": {\n        tags: \"focus\",\n        activities: \"trackButtonDisabled\",\n        entry: choose([{\n          guard: \"isIncrementHint\",\n          actions: \"increment\"\n        }, {\n          guard: \"isDecrementHint\",\n          actions: \"decrement\"\n        }]),\n        after: {\n          CHANGE_DELAY: {\n            target: \"spinning\",\n            guard: and(\"isInRange\", \"spinOnPress\")\n          }\n        },\n        on: {\n          \"TRIGGER.PRESS_UP\": [{\n            guard: \"isTouchPointer\",\n            target: \"focused\",\n            actions: \"clearHint\"\n          }, {\n            target: \"focused\",\n            actions: [\"focusInput\", \"clearHint\"]\n          }]\n        }\n      },\n      spinning: {\n        tags: \"focus\",\n        activities: \"trackButtonDisabled\",\n        every: [{\n          delay: \"CHANGE_INTERVAL\",\n          guard: and(not(\"isAtMin\"), \"isIncrementHint\"),\n          actions: \"increment\"\n        }, {\n          delay: \"CHANGE_INTERVAL\",\n          guard: and(not(\"isAtMax\"), \"isDecrementHint\"),\n          actions: \"decrement\"\n        }],\n        on: {\n          \"TRIGGER.PRESS_UP\": {\n            target: \"focused\",\n            actions: [\"focusInput\", \"clearHint\"]\n          }\n        }\n      },\n      scrubbing: {\n        tags: \"focus\",\n        activities: [\"activatePointerLock\", \"trackMousemove\", \"setupVirtualCursor\", \"preventTextSelection\"],\n        on: {\n          \"SCRUBBER.POINTER_UP\": {\n            target: \"focused\",\n            actions: [\"focusInput\", \"clearCursorPoint\"]\n          },\n          \"SCRUBBER.POINTER_MOVE\": [{\n            guard: \"isIncrementHint\",\n            actions: [\"increment\", \"setCursorPoint\"]\n          }, {\n            guard: \"isDecrementHint\",\n            actions: [\"decrement\", \"setCursorPoint\"]\n          }]\n        }\n      }\n    }\n  }, {\n    delays: {\n      CHANGE_INTERVAL: 50,\n      CHANGE_DELAY: 300\n    },\n    guards: {\n      clampValueOnBlur: ctx2 => ctx2.clampValueOnBlur,\n      isAtMin: ctx2 => ctx2.isAtMin,\n      spinOnPress: ctx2 => !!ctx2.spinOnPress,\n      isAtMax: ctx2 => ctx2.isAtMax,\n      isInRange: ctx2 => !ctx2.isOutOfRange,\n      isDecrementHint: (ctx2, evt) => (evt.hint ?? ctx2.hint) === \"decrement\",\n      isIncrementHint: (ctx2, evt) => (evt.hint ?? ctx2.hint) === \"increment\",\n      isTouchPointer: (_ctx, evt) => evt.pointerType === \"touch\"\n    },\n    activities: {\n      trackFormControl(ctx2, _evt, _ref) {\n        let {\n          initialContext\n        } = _ref;\n        const inputEl = dom.getInputEl(ctx2);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            set.value(ctx2, initialContext.value);\n          }\n        });\n      },\n      setupVirtualCursor(ctx2) {\n        return dom.setupVirtualCursor(ctx2);\n      },\n      preventTextSelection(ctx2) {\n        return dom.preventTextSelection(ctx2);\n      },\n      trackButtonDisabled(ctx2, _evt, _ref2) {\n        let {\n          send\n        } = _ref2;\n        const btn = dom.getPressedTriggerEl(ctx2, ctx2.hint);\n        return observeAttributes(btn, {\n          attributes: [\"disabled\"],\n          callback() {\n            send({\n              type: \"TRIGGER.PRESS_UP\",\n              src: \"attr\"\n            });\n          }\n        });\n      },\n      attachWheelListener(ctx2, _evt, _ref3) {\n        let {\n          send\n        } = _ref3;\n        const inputEl = dom.getInputEl(ctx2);\n        if (!inputEl || !dom.isActiveElement(ctx2, inputEl) || !ctx2.allowMouseWheel) return;\n        function onWheel(event) {\n          event.preventDefault();\n          const dir = Math.sign(event.deltaY) * -1;\n          if (dir === 1) {\n            send(\"VALUE.INCREMENT\");\n          } else if (dir === -1) {\n            send(\"VALUE.DECREMENT\");\n          }\n        }\n        return addDomEvent(inputEl, \"wheel\", onWheel, {\n          passive: false\n        });\n      },\n      activatePointerLock(ctx2) {\n        if (isSafari2()) return;\n        return requestPointerLock(dom.getDoc(ctx2));\n      },\n      trackMousemove(ctx2, _evt, _ref4) {\n        let {\n          send\n        } = _ref4;\n        const doc = dom.getDoc(ctx2);\n        function onMousemove(event) {\n          if (!ctx2.scrubberCursorPoint) return;\n          const value = dom.getMousementValue(ctx2, event);\n          if (!value.hint) return;\n          send({\n            type: \"SCRUBBER.POINTER_MOVE\",\n            hint: value.hint,\n            point: value.point\n          });\n        }\n        function onMouseup() {\n          send(\"SCRUBBER.POINTER_UP\");\n        }\n        return callAll(addDomEvent(doc, \"mousemove\", onMousemove, false), addDomEvent(doc, \"mouseup\", onMouseup, false));\n      }\n    },\n    actions: {\n      focusInput(ctx2) {\n        if (!ctx2.focusInputOnChange) return;\n        const inputEl = dom.getInputEl(ctx2);\n        if (dom.isActiveElement(ctx2, inputEl)) return;\n        raf(() => inputEl?.focus({\n          preventScroll: true\n        }));\n      },\n      increment(ctx2, evt) {\n        const nextValue = increment(ctx2.valueAsNumber, evt.step ?? ctx2.step);\n        const value = formatValue(ctx2, clamp(nextValue, ctx2));\n        set.value(ctx2, value);\n      },\n      decrement(ctx2, evt) {\n        const nextValue = decrement(ctx2.valueAsNumber, evt.step ?? ctx2.step);\n        const value = formatValue(ctx2, clamp(nextValue, ctx2));\n        set.value(ctx2, value);\n      },\n      setClampedValue(ctx2) {\n        const nextValue = clamp(ctx2.valueAsNumber, ctx2);\n        set.value(ctx2, formatValue(ctx2, nextValue));\n      },\n      setRawValue(ctx2, evt) {\n        const parsedValue = parseValue(ctx2, evt.value);\n        const value = formatValue(ctx2, clamp(parsedValue, ctx2));\n        set.value(ctx2, value);\n      },\n      setValue(ctx2, evt) {\n        const value = evt.target?.value ?? evt.value;\n        set.value(ctx2, value);\n      },\n      clearValue(ctx2) {\n        set.value(ctx2, \"\");\n      },\n      incrementToMax(ctx2) {\n        const value = formatValue(ctx2, ctx2.max);\n        set.value(ctx2, value);\n      },\n      decrementToMin(ctx2) {\n        const value = formatValue(ctx2, ctx2.min);\n        set.value(ctx2, value);\n      },\n      setHint(ctx2, evt) {\n        ctx2.hint = evt.hint;\n      },\n      clearHint(ctx2) {\n        ctx2.hint = null;\n      },\n      setHintToSet(ctx2) {\n        ctx2.hint = \"set\";\n      },\n      invokeOnFocus(ctx2) {\n        ctx2.onFocusChange?.({\n          focused: true,\n          value: ctx2.formattedValue,\n          valueAsNumber: ctx2.valueAsNumber\n        });\n      },\n      invokeOnBlur(ctx2) {\n        ctx2.onFocusChange?.({\n          focused: false,\n          value: ctx2.formattedValue,\n          valueAsNumber: ctx2.valueAsNumber\n        });\n      },\n      invokeOnInvalid(ctx2) {\n        if (!ctx2.isOutOfRange) return;\n        const reason = ctx2.valueAsNumber > ctx2.max ? \"rangeOverflow\" : \"rangeUnderflow\";\n        ctx2.onValueInvalid?.({\n          reason,\n          value: ctx2.formattedValue,\n          valueAsNumber: ctx2.valueAsNumber\n        });\n      },\n      syncInputElement(ctx2, evt) {\n        const value = evt.type.endsWith(\"CHANGE\") ? ctx2.value : ctx2.formattedValue;\n        sync.input(ctx2, value);\n      },\n      setFormattedValue(ctx2) {\n        set.value(ctx2, ctx2.formattedValue);\n      },\n      setCursorPoint(ctx2, evt) {\n        ctx2.scrubberCursorPoint = evt.point;\n      },\n      clearCursorPoint(ctx2) {\n        ctx2.scrubberCursorPoint = null;\n      },\n      setVirtualCursorPosition(ctx2) {\n        const cursorEl = dom.getCursorEl(ctx2);\n        if (!cursorEl || !ctx2.scrubberCursorPoint) return;\n        const {\n          x,\n          y\n        } = ctx2.scrubberCursorPoint;\n        cursorEl.style.transform = `translate3d(${x}px, ${y}px, 0px)`;\n      },\n      setFormatterAndParser(ctx2) {\n        if (!ctx2.locale) return;\n        ctx2.formatter = createFormatter(ctx2.locale, ctx2.formatOptions);\n        ctx2.parser = createParser(ctx2.locale, ctx2.formatOptions);\n      }\n    },\n    compareFns: {\n      formatOptions: (a, b) => isEqual(a, b),\n      scrubberCursorPoint: (a, b) => isEqual(a, b)\n    }\n  });\n}\nvar sync = {\n  input(ctx, value) {\n    const inputEl = dom.getInputEl(ctx);\n    if (!inputEl) return;\n    const sel = recordCursor(inputEl);\n    raf(() => {\n      dom.setValue(inputEl, value);\n      restoreCursor(inputEl, sel);\n    });\n  }\n};\nvar invoke = {\n  onChange: ctx => {\n    ctx.onValueChange?.({\n      value: ctx.value,\n      valueAsNumber: ctx.valueAsNumber\n    });\n  }\n};\nvar set = {\n  value: (ctx, value) => {\n    if (isEqual(ctx.value, value)) return;\n    ctx.value = value;\n    invoke.onChange(ctx);\n  }\n};\nexport { anatomy, connect, machine };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventPoint","getEventStep","isLeftClick","ariaAttr","dataAttr","isComposingEvent","roundToDevicePixel","roundToDevicePixel2","createScope","isSafari","MAX_Z_INDEX","wrap","dom","getRootId","ctx","ids","root","id","getInputId","input","getIncrementTriggerId","incrementTrigger","getDecrementTriggerId","decrementTrigger","getScrubberId","scrubber","getCursorId","getLabelId","label","getInputEl","getById","getIncrementTriggerEl","getDecrementTriggerEl","getScrubberEl","getCursorEl","getDoc","getElementById","getPressedTriggerEl","hint","arguments","length","undefined","btnEl","setupVirtualCursor","createVirtualCursor","remove","preventTextSelection","doc","html","documentElement","body","style","pointerEvents","userSelect","cursor","removeAttribute","getMousementValue","event","x","movementX","y","movementY","isRtl","point","scrubberCursorPoint","win","getWin","width","innerWidth","half","el","createElement","className","Object","assign","height","position","left","top","zIndex","transform","willChange","innerHTML","appendChild","connect","state","send","normalize","focused","hasTag","disabled","context","isDisabled","readOnly","empty","isValueEmpty","invalid","isOutOfRange","isIncrementDisabled","canIncrement","isDecrementDisabled","canDecrement","translations","value","formattedValue","valueAsNumber","setValue","type","clearValue","increment","decrement","setToMax","max","setToMin","min","focus","getRootProps","element","attrs","dir","getLabelProps","htmlFor","getControlProps","control","role","getValueTextProps","valueText","getInputProps","name","form","defaultValue","pattern","inputMode","required","autoComplete","autoCorrect","spellCheck","Number","isNaN","onFocus","onBlur","src","onChange","target","currentTarget","onBeforeInput","selectionStart","selectionEnd","nextValue","slice","data","isValid","parser","isValidPartialNumber","preventDefault","onKeyDown","defaultPrevented","step","keyMap","ArrowUp","ArrowDown","Home","End","Enter","exec","key","getDecrementTriggerProps","button","decrementLabel","tabIndex","onPointerDown","pointerType","preventScroll","onPointerUp","onPointerLeave","getIncrementTriggerProps","incrementLabel","getScrubberProps","onMouseDown","choose","createMachine","guards","addDomEvent","requestPointerLock","isSafari2","observeAttributes","raf","trackFormControl","clamp","isAtMax","isAtMin","isWithinRange","callAll","compact","isEqual","recordCursor","inputEl","ownerDocument","activeElement","start","end","beforeTxt","substring","afterTxt","restoreCursor","selection","setSelectionRange","startPos","endsWith","startsWith","beforeLastChar","newIndex","indexOf","NumberParser","ref","createFormatter","locale","options","Intl","NumberFormat","createParser","parseValue","formatOptions","parseFloat","parse","String","formatValue","toString","formatter","format","not","and","machine","userContext","initial","focusInputOnChange","clampValueOnBlur","allowOverflow","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","spinOnPress","fieldsetDisabled","computed","ctx2","watch","activities","on","actions","states","idle","guard","tags","entry","after","CHANGE_DELAY","spinning","every","delay","scrubbing","delays","CHANGE_INTERVAL","isInRange","isDecrementHint","evt","isIncrementHint","isTouchPointer","_ctx","_evt","_ref","initialContext","onFieldsetDisabledChange","onFormReset","set","trackButtonDisabled","_ref2","btn","attributes","callback","attachWheelListener","_ref3","isActiveElement","allowMouseWheel","onWheel","Math","sign","deltaY","passive","activatePointerLock","trackMousemove","_ref4","onMousemove","onMouseup","focusInput","setClampedValue","setRawValue","parsedValue","incrementToMax","decrementToMin","setHint","clearHint","setHintToSet","invokeOnFocus","onFocusChange","invokeOnBlur","invokeOnInvalid","reason","onValueInvalid","syncInputElement","sync","setFormattedValue","setCursorPoint","clearCursorPoint","setVirtualCursorPosition","cursorEl","setFormatterAndParser","compareFns","a","b","sel","invoke","onValueChange"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/number-input.anatomy.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/number-input.connect.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/number-input.dom.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/number-input.machine.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/cursor.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/number-input/src/number-input.utils.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"numberInput\").parts(\n  \"root\",\n  \"label\",\n  \"input\",\n  \"control\",\n  \"valueText\",\n  \"incrementTrigger\",\n  \"decrementTrigger\",\n  \"scrubber\",\n)\n\nexport const parts = anatomy.build()\n","import { getEventPoint, getEventStep, isLeftClick, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { ariaAttr, dataAttr, isComposingEvent } from \"@zag-js/dom-query\"\nimport { roundToDevicePixel } from \"@zag-js/number-utils\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./number-input.anatomy\"\nimport { dom } from \"./number-input.dom\"\nimport type { MachineApi, Send, State } from \"./number-input.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const focused = state.hasTag(\"focus\")\n  const disabled = state.context.isDisabled\n  const readOnly = state.context.readOnly\n\n  const empty = state.context.isValueEmpty\n  const invalid = state.context.isOutOfRange || !!state.context.invalid\n\n  const isIncrementDisabled = disabled || !state.context.canIncrement || readOnly\n  const isDecrementDisabled = disabled || !state.context.canDecrement || readOnly\n\n  const translations = state.context.translations\n\n  return {\n    focused: focused,\n    invalid: invalid,\n    empty: empty,\n    value: state.context.formattedValue,\n    valueAsNumber: state.context.valueAsNumber,\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value })\n    },\n    clearValue() {\n      send(\"VALUE.CLEAR\")\n    },\n    increment() {\n      send(\"VALUE.INCREMENT\")\n    },\n    decrement() {\n      send(\"VALUE.DECREMENT\")\n    },\n    setToMax() {\n      send({ type: \"VALUE.SET\", value: state.context.max })\n    },\n    setToMin() {\n      send({ type: \"VALUE.SET\", value: state.context.min })\n    },\n    focus() {\n      dom.getInputEl(state.context)?.focus()\n    },\n\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-invalid\": dataAttr(invalid),\n      })\n    },\n\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused),\n        \"data-invalid\": dataAttr(invalid),\n        id: dom.getLabelId(state.context),\n        htmlFor: dom.getInputId(state.context),\n      })\n    },\n\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        role: \"group\",\n        \"aria-disabled\": disabled,\n        \"data-focus\": dataAttr(focused),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-invalid\": ariaAttr(state.context.invalid),\n      })\n    },\n\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused),\n      })\n    },\n\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        name: state.context.name,\n        form: state.context.form,\n        id: dom.getInputId(state.context),\n        role: \"spinbutton\",\n        defaultValue: state.context.formattedValue,\n        pattern: state.context.pattern,\n        inputMode: state.context.inputMode,\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        readOnly: state.context.readOnly,\n        required: state.context.required,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        spellCheck: \"false\",\n        type: \"text\",\n        \"aria-roledescription\": \"numberfield\",\n        \"aria-valuemin\": state.context.min,\n        \"aria-valuemax\": state.context.max,\n        \"aria-valuenow\": Number.isNaN(state.context.valueAsNumber) ? undefined : state.context.valueAsNumber,\n        \"aria-valuetext\": state.context.valueText,\n        onFocus() {\n          send(\"INPUT.FOCUS\")\n        },\n        onBlur() {\n          send({ type: \"INPUT.COMMIT\", src: \"blur\" })\n        },\n        onChange(event) {\n          send({ type: \"INPUT.CHANGE\", target: event.currentTarget, hint: \"set\" })\n        },\n        onBeforeInput(event) {\n          try {\n            const { selectionStart, selectionEnd, value } = event.currentTarget\n\n            const nextValue = value.slice(0, selectionStart!) + ((event as any).data ?? \"\") + value.slice(selectionEnd!)\n            const isValid = state.context.parser.isValidPartialNumber(nextValue)\n\n            if (!isValid) {\n              event.preventDefault()\n            }\n          } catch {\n            // noop\n          }\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (readOnly) return\n          if (isComposingEvent(event)) return\n\n          const step = getEventStep(event) * state.context.step\n\n          const keyMap: EventKeyMap = {\n            ArrowUp() {\n              send({ type: \"INPUT.ARROW_UP\", step })\n              event.preventDefault()\n            },\n            ArrowDown() {\n              send({ type: \"INPUT.ARROW_DOWN\", step })\n              event.preventDefault()\n            },\n            Home() {\n              send(\"INPUT.HOME\")\n              event.preventDefault()\n            },\n            End() {\n              send(\"INPUT.END\")\n              event.preventDefault()\n            },\n            Enter() {\n              send({ type: \"INPUT.COMMIT\", src: \"enter\" })\n            },\n          }\n\n          const exec = keyMap[event.key]\n          exec?.(event)\n        },\n      })\n    },\n\n    getDecrementTriggerProps() {\n      return normalize.button({\n        ...parts.decrementTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getDecrementTriggerId(state.context),\n        disabled: isDecrementDisabled,\n        \"data-disabled\": dataAttr(isDecrementDisabled),\n        \"aria-label\": translations.decrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": dom.getInputId(state.context),\n        onPointerDown(event) {\n          if (isDecrementDisabled || !isLeftClick(event)) return\n          send({ type: \"TRIGGER.PRESS_DOWN\", hint: \"decrement\", pointerType: event.pointerType })\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault()\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({ preventScroll: true })\n          }\n        },\n        onPointerUp(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"decrement\", pointerType: event.pointerType })\n        },\n        onPointerLeave() {\n          if (isDecrementDisabled) return\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"decrement\" })\n        },\n      })\n    },\n\n    getIncrementTriggerProps() {\n      return normalize.button({\n        ...parts.incrementTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getIncrementTriggerId(state.context),\n        disabled: isIncrementDisabled,\n        \"data-disabled\": dataAttr(isIncrementDisabled),\n        \"aria-label\": translations.incrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": dom.getInputId(state.context),\n        onPointerDown(event) {\n          if (isIncrementDisabled || !isLeftClick(event)) return\n          send({ type: \"TRIGGER.PRESS_DOWN\", hint: \"increment\", pointerType: event.pointerType })\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault()\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({ preventScroll: true })\n          }\n        },\n        onPointerUp(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"increment\", pointerType: event.pointerType })\n        },\n        onPointerLeave(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"increment\", pointerType: event.pointerType })\n        },\n      })\n    },\n\n    getScrubberProps() {\n      return normalize.element({\n        ...parts.scrubber.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(disabled),\n        id: dom.getScrubberId(state.context),\n        role: \"presentation\",\n        onMouseDown(event) {\n          if (disabled) return\n\n          const point = getEventPoint(event)\n\n          point.x = point.x - roundToDevicePixel(7.5)\n          point.y = point.y - roundToDevicePixel(7.5)\n\n          send({ type: \"SCRUBBER.PRESS_DOWN\", point })\n          event.preventDefault()\n        },\n        style: {\n          cursor: disabled ? undefined : \"ew-resize\",\n        },\n      })\n    },\n  }\n}\n","import { createScope, isSafari, MAX_Z_INDEX } from \"@zag-js/dom-query\"\nimport { roundToDevicePixel, wrap } from \"@zag-js/number-utils\"\nimport type { MachineContext as Ctx } from \"./number-input.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `number-input:${ctx.id}`,\n  getInputId: (ctx: Ctx) => ctx.ids?.input ?? `number-input:${ctx.id}:input`,\n  getIncrementTriggerId: (ctx: Ctx) => ctx.ids?.incrementTrigger ?? `number-input:${ctx.id}:inc`,\n  getDecrementTriggerId: (ctx: Ctx) => ctx.ids?.decrementTrigger ?? `number-input:${ctx.id}:dec`,\n  getScrubberId: (ctx: Ctx) => ctx.ids?.scrubber ?? `number-input:${ctx.id}:scrubber`,\n  getCursorId: (ctx: Ctx) => `number-input:${ctx.id}:cursor`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `number-input:${ctx.id}:label`,\n\n  getInputEl: (ctx: Ctx) => dom.getById<HTMLInputElement>(ctx, dom.getInputId(ctx)),\n  getIncrementTriggerEl: (ctx: Ctx) => dom.getById<HTMLButtonElement>(ctx, dom.getIncrementTriggerId(ctx)),\n  getDecrementTriggerEl: (ctx: Ctx) => dom.getById<HTMLButtonElement>(ctx, dom.getDecrementTriggerId(ctx)),\n  getScrubberEl: (ctx: Ctx) => dom.getById(ctx, dom.getScrubberId(ctx)),\n  getCursorEl: (ctx: Ctx) => dom.getDoc(ctx).getElementById(dom.getCursorId(ctx)),\n\n  getPressedTriggerEl: (ctx: Ctx, hint = ctx.hint) => {\n    let btnEl: HTMLButtonElement | null = null\n    if (hint === \"increment\") {\n      btnEl = dom.getIncrementTriggerEl(ctx)\n    }\n    if (hint === \"decrement\") {\n      btnEl = dom.getDecrementTriggerEl(ctx)\n    }\n    return btnEl\n  },\n\n  setupVirtualCursor(ctx: Ctx) {\n    if (isSafari()) return\n    dom.createVirtualCursor(ctx)\n    return () => {\n      dom.getCursorEl(ctx)?.remove()\n    }\n  },\n\n  preventTextSelection(ctx: Ctx) {\n    const doc = dom.getDoc(ctx)\n    const html = doc.documentElement\n    const body = doc.body\n\n    body.style.pointerEvents = \"none\"\n    html.style.userSelect = \"none\"\n    html.style.cursor = \"ew-resize\"\n\n    return () => {\n      body.style.pointerEvents = \"\"\n      html.style.userSelect = \"\"\n      html.style.cursor = \"\"\n      if (!html.style.length) {\n        html.removeAttribute(\"style\")\n      }\n      if (!body.style.length) {\n        body.removeAttribute(\"style\")\n      }\n    }\n  },\n\n  getMousementValue(ctx: Ctx, event: MouseEvent) {\n    const x = roundToDevicePixel(event.movementX)\n    const y = roundToDevicePixel(event.movementY)\n\n    let hint = x > 0 ? \"increment\" : x < 0 ? \"decrement\" : null\n\n    if (ctx.isRtl && hint === \"increment\") hint = \"decrement\"\n    if (ctx.isRtl && hint === \"decrement\") hint = \"increment\"\n\n    const point = {\n      x: ctx.scrubberCursorPoint!.x + x,\n      y: ctx.scrubberCursorPoint!.y + y,\n    }\n\n    const win = dom.getWin(ctx)\n    const width = win.innerWidth\n    const half = roundToDevicePixel(7.5)\n    point.x = wrap(point.x + half, width) - half\n\n    return { hint, point }\n  },\n\n  createVirtualCursor(ctx: Ctx) {\n    const doc = dom.getDoc(ctx)\n    const el = doc.createElement(\"div\")\n    el.className = \"scrubber--cursor\"\n    el.id = dom.getCursorId(ctx)\n\n    Object.assign(el.style, {\n      width: \"15px\",\n      height: \"15px\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      left: \"0px\",\n      top: \"0px\",\n      zIndex: MAX_Z_INDEX,\n      transform: ctx.scrubberCursorPoint\n        ? `translate3d(${ctx.scrubberCursorPoint.x}px, ${ctx.scrubberCursorPoint.y}px, 0px)`\n        : undefined,\n      willChange: \"transform\",\n    })\n\n    el.innerHTML = `\n        <svg width=\"46\" height=\"15\" style=\"left: -15.5px; position: absolute; top: 0; filter: drop-shadow(rgba(0, 0, 0, 0.4) 0px 1px 1.1px);\">\n          <g transform=\"translate(2 3)\">\n            <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\" style=\"stroke-width: 2px; stroke: white;\"></path>\n            <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\"></path>\n          </g>\n        </svg>`\n\n    doc.body.appendChild(el)\n  },\n})\n","import { choose, createMachine, guards } from \"@zag-js/core\"\nimport { addDomEvent, requestPointerLock } from \"@zag-js/dom-event\"\nimport { isSafari, observeAttributes, raf } from \"@zag-js/dom-query\"\nimport { trackFormControl } from \"@zag-js/form-utils\"\nimport { clamp, decrement, increment, isAtMax, isAtMin, isWithinRange } from \"@zag-js/number-utils\"\nimport { callAll, compact, isEqual } from \"@zag-js/utils\"\nimport { recordCursor, restoreCursor } from \"./cursor\"\nimport { dom } from \"./number-input.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./number-input.types\"\nimport { createFormatter, createParser, formatValue, parseValue } from \"./number-input.utils\"\n\nconst { not, and } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"number-input\",\n      initial: \"idle\",\n      context: {\n        dir: \"ltr\",\n        locale: \"en-US\",\n        focusInputOnChange: true,\n        clampValueOnBlur: true,\n        allowOverflow: false,\n        inputMode: \"decimal\",\n        pattern: \"[0-9]*(.[0-9]+)?\",\n        value: \"\",\n        step: 1,\n        min: Number.MIN_SAFE_INTEGER,\n        max: Number.MAX_SAFE_INTEGER,\n        invalid: false,\n        spinOnPress: true,\n        disabled: false,\n        readOnly: false,\n        ...ctx,\n        hint: null,\n        scrubberCursorPoint: null,\n        fieldsetDisabled: false,\n        formatter: createFormatter(ctx.locale || \"en-US\", ctx.formatOptions),\n        parser: createParser(ctx.locale || \"en-US\", ctx.formatOptions),\n        translations: {\n          incrementLabel: \"increment value\",\n          decrementLabel: \"decrease value\",\n          ...ctx.translations,\n        },\n      },\n\n      computed: {\n        isRtl: (ctx) => ctx.dir === \"rtl\",\n        valueAsNumber: (ctx) => parseValue(ctx, ctx.value),\n        formattedValue: (ctx) => formatValue(ctx, ctx.valueAsNumber),\n        isAtMin: (ctx) => isAtMin(ctx.valueAsNumber, ctx),\n        isAtMax: (ctx) => isAtMax(ctx.valueAsNumber, ctx),\n        isOutOfRange: (ctx) => !isWithinRange(ctx.valueAsNumber, ctx),\n        isValueEmpty: (ctx) => ctx.value === \"\",\n        isDisabled: (ctx) => !!ctx.disabled || ctx.fieldsetDisabled,\n        canIncrement: (ctx) => ctx.allowOverflow || !ctx.isAtMax,\n        canDecrement: (ctx) => ctx.allowOverflow || !ctx.isAtMin,\n        valueText: (ctx) => ctx.translations.valueText?.(ctx.value),\n      },\n\n      watch: {\n        formatOptions: [\"setFormatterAndParser\", \"syncInputElement\"],\n        locale: [\"setFormatterAndParser\", \"syncInputElement\"],\n        value: [\"syncInputElement\"],\n        isOutOfRange: [\"invokeOnInvalid\"],\n        scrubberCursorPoint: [\"setVirtualCursorPosition\"],\n      },\n\n      activities: [\"trackFormControl\"],\n\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setRawValue\", \"setHintToSet\"],\n        },\n        \"VALUE.CLEAR\": {\n          actions: [\"clearValue\"],\n        },\n        \"VALUE.INCREMENT\": {\n          actions: [\"increment\"],\n        },\n        \"VALUE.DECREMENT\": {\n          actions: [\"decrement\"],\n        },\n      },\n\n      states: {\n        idle: {\n          on: {\n            \"TRIGGER.PRESS_DOWN\": [\n              { guard: \"isTouchPointer\", target: \"before:spin\", actions: [\"setHint\"] },\n              {\n                target: \"before:spin\",\n                actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\"],\n              },\n            ],\n            \"SCRUBBER.PRESS_DOWN\": {\n              target: \"scrubbing\",\n              actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\", \"setCursorPoint\"],\n            },\n            \"INPUT.FOCUS\": {\n              target: \"focused\",\n              actions: [\"focusInput\", \"invokeOnFocus\"],\n            },\n          },\n        },\n\n        focused: {\n          tags: \"focus\",\n          activities: \"attachWheelListener\",\n          on: {\n            \"TRIGGER.PRESS_DOWN\": [\n              { guard: \"isTouchPointer\", target: \"before:spin\", actions: [\"setHint\"] },\n              { target: \"before:spin\", actions: [\"focusInput\", \"setHint\"] },\n            ],\n            \"SCRUBBER.PRESS_DOWN\": {\n              target: \"scrubbing\",\n              actions: [\"focusInput\", \"setHint\", \"setCursorPoint\"],\n            },\n            \"INPUT.ARROW_UP\": {\n              actions: \"increment\",\n            },\n            \"INPUT.ARROW_DOWN\": {\n              actions: \"decrement\",\n            },\n            \"INPUT.HOME\": {\n              actions: \"decrementToMin\",\n            },\n            \"INPUT.END\": {\n              actions: \"incrementToMax\",\n            },\n            \"INPUT.CHANGE\": {\n              actions: [\"setValue\", \"setHint\"],\n            },\n            \"INPUT.COMMIT\": [\n              {\n                guard: and(\"clampValueOnBlur\", not(\"isInRange\")),\n                target: \"idle\",\n                actions: [\"setClampedValue\", \"clearHint\", \"invokeOnBlur\"],\n              },\n              {\n                target: \"idle\",\n                actions: [\"setFormattedValue\", \"clearHint\", \"invokeOnBlur\"],\n              },\n            ],\n          },\n        },\n\n        \"before:spin\": {\n          tags: \"focus\",\n          activities: \"trackButtonDisabled\",\n          entry: choose([\n            { guard: \"isIncrementHint\", actions: \"increment\" },\n            { guard: \"isDecrementHint\", actions: \"decrement\" },\n          ]),\n          after: {\n            CHANGE_DELAY: {\n              target: \"spinning\",\n              guard: and(\"isInRange\", \"spinOnPress\"),\n            },\n          },\n          on: {\n            \"TRIGGER.PRESS_UP\": [\n              { guard: \"isTouchPointer\", target: \"focused\", actions: \"clearHint\" },\n              { target: \"focused\", actions: [\"focusInput\", \"clearHint\"] },\n            ],\n          },\n        },\n\n        spinning: {\n          tags: \"focus\",\n          activities: \"trackButtonDisabled\",\n          every: [\n            {\n              delay: \"CHANGE_INTERVAL\",\n              guard: and(not(\"isAtMin\"), \"isIncrementHint\"),\n              actions: \"increment\",\n            },\n            {\n              delay: \"CHANGE_INTERVAL\",\n              guard: and(not(\"isAtMax\"), \"isDecrementHint\"),\n              actions: \"decrement\",\n            },\n          ],\n          on: {\n            \"TRIGGER.PRESS_UP\": {\n              target: \"focused\",\n              actions: [\"focusInput\", \"clearHint\"],\n            },\n          },\n        },\n\n        scrubbing: {\n          tags: \"focus\",\n          activities: [\"activatePointerLock\", \"trackMousemove\", \"setupVirtualCursor\", \"preventTextSelection\"],\n          on: {\n            \"SCRUBBER.POINTER_UP\": {\n              target: \"focused\",\n              actions: [\"focusInput\", \"clearCursorPoint\"],\n            },\n            \"SCRUBBER.POINTER_MOVE\": [\n              {\n                guard: \"isIncrementHint\",\n                actions: [\"increment\", \"setCursorPoint\"],\n              },\n              {\n                guard: \"isDecrementHint\",\n                actions: [\"decrement\", \"setCursorPoint\"],\n              },\n            ],\n          },\n        },\n      },\n    },\n    {\n      delays: {\n        CHANGE_INTERVAL: 50,\n        CHANGE_DELAY: 300,\n      },\n\n      guards: {\n        clampValueOnBlur: (ctx) => ctx.clampValueOnBlur,\n        isAtMin: (ctx) => ctx.isAtMin,\n        spinOnPress: (ctx) => !!ctx.spinOnPress,\n        isAtMax: (ctx) => ctx.isAtMax,\n        isInRange: (ctx) => !ctx.isOutOfRange,\n        isDecrementHint: (ctx, evt) => (evt.hint ?? ctx.hint) === \"decrement\",\n        isIncrementHint: (ctx, evt) => (evt.hint ?? ctx.hint) === \"increment\",\n        isTouchPointer: (_ctx, evt) => evt.pointerType === \"touch\",\n      },\n\n      activities: {\n        trackFormControl(ctx, _evt, { initialContext }) {\n          const inputEl = dom.getInputEl(ctx)\n          return trackFormControl(inputEl, {\n            onFieldsetDisabledChange(disabled) {\n              ctx.fieldsetDisabled = disabled\n            },\n            onFormReset() {\n              set.value(ctx, initialContext.value)\n            },\n          })\n        },\n        setupVirtualCursor(ctx) {\n          return dom.setupVirtualCursor(ctx)\n        },\n        preventTextSelection(ctx) {\n          return dom.preventTextSelection(ctx)\n        },\n        trackButtonDisabled(ctx, _evt, { send }) {\n          const btn = dom.getPressedTriggerEl(ctx, ctx.hint)\n          return observeAttributes(btn, {\n            attributes: [\"disabled\"],\n            callback() {\n              send({ type: \"TRIGGER.PRESS_UP\", src: \"attr\" })\n            },\n          })\n        },\n        attachWheelListener(ctx, _evt, { send }) {\n          const inputEl = dom.getInputEl(ctx)\n          if (!inputEl || !dom.isActiveElement(ctx, inputEl) || !ctx.allowMouseWheel) return\n\n          function onWheel(event: WheelEvent) {\n            event.preventDefault()\n            const dir = Math.sign(event.deltaY) * -1\n            if (dir === 1) {\n              send(\"VALUE.INCREMENT\")\n            } else if (dir === -1) {\n              send(\"VALUE.DECREMENT\")\n            }\n          }\n\n          return addDomEvent(inputEl, \"wheel\", onWheel, { passive: false })\n        },\n        activatePointerLock(ctx) {\n          if (isSafari()) return\n          return requestPointerLock(dom.getDoc(ctx))\n        },\n        trackMousemove(ctx, _evt, { send }) {\n          const doc = dom.getDoc(ctx)\n\n          function onMousemove(event: MouseEvent) {\n            if (!ctx.scrubberCursorPoint) return\n            const value = dom.getMousementValue(ctx, event)\n            if (!value.hint) return\n            send({\n              type: \"SCRUBBER.POINTER_MOVE\",\n              hint: value.hint,\n              point: value.point,\n            })\n          }\n\n          function onMouseup() {\n            send(\"SCRUBBER.POINTER_UP\")\n          }\n\n          return callAll(\n            addDomEvent(doc, \"mousemove\", onMousemove, false),\n            addDomEvent(doc, \"mouseup\", onMouseup, false),\n          )\n        },\n      },\n\n      actions: {\n        focusInput(ctx) {\n          if (!ctx.focusInputOnChange) return\n          const inputEl = dom.getInputEl(ctx)\n          if (dom.isActiveElement(ctx, inputEl)) return\n          raf(() => inputEl?.focus({ preventScroll: true }))\n        },\n        increment(ctx, evt) {\n          const nextValue = increment(ctx.valueAsNumber, evt.step ?? ctx.step)\n          const value = formatValue(ctx, clamp(nextValue, ctx))\n          set.value(ctx, value)\n        },\n        decrement(ctx, evt) {\n          const nextValue = decrement(ctx.valueAsNumber, evt.step ?? ctx.step)\n          const value = formatValue(ctx, clamp(nextValue, ctx))\n          set.value(ctx, value)\n        },\n        setClampedValue(ctx) {\n          const nextValue = clamp(ctx.valueAsNumber, ctx)\n          set.value(ctx, formatValue(ctx, nextValue))\n        },\n        setRawValue(ctx, evt) {\n          const parsedValue = parseValue(ctx, evt.value)\n          const value = formatValue(ctx, clamp(parsedValue, ctx))\n          set.value(ctx, value)\n        },\n        setValue(ctx, evt) {\n          const value = evt.target?.value ?? evt.value\n          set.value(ctx, value)\n        },\n        clearValue(ctx) {\n          set.value(ctx, \"\")\n        },\n        incrementToMax(ctx) {\n          const value = formatValue(ctx, ctx.max)\n          set.value(ctx, value)\n        },\n        decrementToMin(ctx) {\n          const value = formatValue(ctx, ctx.min)\n          set.value(ctx, value)\n        },\n        setHint(ctx, evt) {\n          ctx.hint = evt.hint\n        },\n        clearHint(ctx) {\n          ctx.hint = null\n        },\n        setHintToSet(ctx) {\n          ctx.hint = \"set\"\n        },\n        invokeOnFocus(ctx) {\n          ctx.onFocusChange?.({\n            focused: true,\n            value: ctx.formattedValue,\n            valueAsNumber: ctx.valueAsNumber,\n          })\n        },\n        invokeOnBlur(ctx) {\n          ctx.onFocusChange?.({\n            focused: false,\n            value: ctx.formattedValue,\n            valueAsNumber: ctx.valueAsNumber,\n          })\n        },\n        invokeOnInvalid(ctx) {\n          if (!ctx.isOutOfRange) return\n          const reason = ctx.valueAsNumber > ctx.max ? \"rangeOverflow\" : \"rangeUnderflow\"\n          ctx.onValueInvalid?.({\n            reason,\n            value: ctx.formattedValue,\n            valueAsNumber: ctx.valueAsNumber,\n          })\n        },\n        syncInputElement(ctx, evt) {\n          const value = evt.type.endsWith(\"CHANGE\") ? ctx.value : ctx.formattedValue\n          sync.input(ctx, value)\n        },\n        setFormattedValue(ctx) {\n          set.value(ctx, ctx.formattedValue)\n        },\n        setCursorPoint(ctx, evt) {\n          ctx.scrubberCursorPoint = evt.point\n        },\n        clearCursorPoint(ctx) {\n          ctx.scrubberCursorPoint = null\n        },\n        setVirtualCursorPosition(ctx) {\n          const cursorEl = dom.getCursorEl(ctx)\n          if (!cursorEl || !ctx.scrubberCursorPoint) return\n          const { x, y } = ctx.scrubberCursorPoint\n          cursorEl.style.transform = `translate3d(${x}px, ${y}px, 0px)`\n        },\n        setFormatterAndParser(ctx) {\n          if (!ctx.locale) return\n          ctx.formatter = createFormatter(ctx.locale, ctx.formatOptions)\n          ctx.parser = createParser(ctx.locale, ctx.formatOptions)\n        },\n      },\n      compareFns: {\n        formatOptions: (a, b) => isEqual(a, b),\n        scrubberCursorPoint: (a, b) => isEqual(a, b),\n      },\n    },\n  )\n}\n\nconst sync = {\n  input(ctx: MachineContext, value: string) {\n    const inputEl = dom.getInputEl(ctx)\n    if (!inputEl) return\n\n    // record cursor position before updating input value\n    const sel = recordCursor(inputEl)\n\n    // restore cursor position after updating input value\n    raf(() => {\n      dom.setValue(inputEl, value)\n      restoreCursor(inputEl, sel)\n    })\n  },\n}\n\nconst invoke = {\n  onChange: (ctx: MachineContext) => {\n    ctx.onValueChange?.({\n      value: ctx.value,\n      valueAsNumber: ctx.valueAsNumber,\n    })\n  },\n}\n\nconst set = {\n  value: (ctx: MachineContext, value: string) => {\n    if (isEqual(ctx.value, value)) return\n    ctx.value = value\n    invoke.onChange(ctx)\n  },\n}\n","/**\n * Credits: https://github.com/react-component/input-number/blob/master/src/hooks/useCursor.ts\n */\n\ninterface Selection {\n  start?: number\n  end?: number\n  value?: string\n  beforeTxt?: string\n  afterTxt?: string\n}\n\nexport function recordCursor(inputEl: HTMLInputElement): Selection | undefined {\n  if (inputEl.ownerDocument.activeElement !== inputEl) return\n  try {\n    const { selectionStart: start, selectionEnd: end, value } = inputEl\n    const beforeTxt = value.substring(0, start!)\n    const afterTxt = value.substring(end!)\n    return {\n      start: start!,\n      end: end!,\n      value,\n      beforeTxt,\n      afterTxt,\n    }\n  } catch {}\n}\n\nexport function restoreCursor(inputEl: HTMLInputElement, selection: Selection | undefined) {\n  if (inputEl.ownerDocument.activeElement !== inputEl) return\n\n  if (!selection) {\n    inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length)\n    return\n  }\n\n  try {\n    const { value } = inputEl\n    const { beforeTxt = \"\", afterTxt = \"\", start } = selection\n\n    let startPos = value.length\n\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length\n    } else if (start != null) {\n      const beforeLastChar = beforeTxt[start - 1]\n      const newIndex = value.indexOf(beforeLastChar, start - 1)\n      if (newIndex !== -1) {\n        startPos = newIndex + 1\n      }\n    }\n\n    inputEl.setSelectionRange(startPos, startPos)\n  } catch {}\n}\n","import { NumberParser } from \"@internationalized/number\"\nimport { ref } from \"@zag-js/core\"\nimport type { MachineContext } from \"./number-input.types\"\n\nexport const createFormatter = (locale: string, options: Intl.NumberFormatOptions = {}) => {\n  return ref(new Intl.NumberFormat(locale, options))\n}\n\nexport const createParser = (locale: string, options: Intl.NumberFormatOptions = {}) => {\n  return ref(new NumberParser(locale, options))\n}\n\nexport const parseValue = (ctx: MachineContext, value: string) => {\n  if (!ctx.formatOptions) return parseFloat(value)\n  return ctx.parser.parse(String(value))\n}\n\nexport const formatValue = (ctx: MachineContext, value: number): string => {\n  if (Number.isNaN(value)) return \"\"\n  if (!ctx.formatOptions) return value.toString()\n  return ctx.formatter.format(value)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}