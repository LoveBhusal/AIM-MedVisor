{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { useChakraContext } from '../styled-system/provider.js';\nimport { useMediaQuery } from './use-media-query.js';\nfunction useBreakpoint() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options.fallback || (options.fallback = \"base\");\n  const sys = useChakraContext();\n  let fallbackPassed = false;\n  const allBreakpoints = sys.breakpoints.values;\n  const breakpoints = allBreakpoints.map(_ref => {\n    let {\n      min,\n      name: breakpoint\n    } = _ref;\n    const item = {\n      breakpoint,\n      query: `(min-width: ${min})`,\n      fallback: !fallbackPassed\n    };\n    if (breakpoint === options.fallback) {\n      fallbackPassed = true;\n    }\n    return item;\n  }).filter(_ref2 => {\n    let {\n      breakpoint\n    } = _ref2;\n    return !!options.breakpoints?.includes(breakpoint);\n  });\n  const fallback = breakpoints.map(_ref3 => {\n    let {\n      fallback: fallback2\n    } = _ref3;\n    return fallback2;\n  });\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: options.ssr\n  });\n  const index = values.lastIndexOf(true);\n  return breakpoints[index]?.breakpoint ?? options.fallback;\n}\nfunction useBreakpointValue(value, opts) {\n  const sys = useChakraContext();\n  const normalized = sys.normalizeValue(value);\n  const breakpoint = useBreakpoint({\n    breakpoints: Object.keys(normalized),\n    ...opts\n  });\n  return normalized[breakpoint];\n}\nexport { useBreakpoint, useBreakpointValue };","map":{"version":3,"names":["useChakraContext","useMediaQuery","useBreakpoint","options","arguments","length","undefined","fallback","sys","fallbackPassed","allBreakpoints","breakpoints","values","map","_ref","min","name","breakpoint","item","query","filter","_ref2","includes","_ref3","fallback2","bp","ssr","index","lastIndexOf","useBreakpointValue","value","opts","normalized","normalizeValue","Object","keys"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@chakra-ui/react/dist/esm/hooks/use-breakpoint.js"],"sourcesContent":["\"use strict\";\n\"use client\";\nimport { useChakraContext } from '../styled-system/provider.js';\nimport { useMediaQuery } from './use-media-query.js';\n\nfunction useBreakpoint(options = {}) {\n  options.fallback || (options.fallback = \"base\");\n  const sys = useChakraContext();\n  let fallbackPassed = false;\n  const allBreakpoints = sys.breakpoints.values;\n  const breakpoints = allBreakpoints.map(({ min, name: breakpoint }) => {\n    const item = {\n      breakpoint,\n      query: `(min-width: ${min})`,\n      fallback: !fallbackPassed\n    };\n    if (breakpoint === options.fallback) {\n      fallbackPassed = true;\n    }\n    return item;\n  }).filter(({ breakpoint }) => !!options.breakpoints?.includes(breakpoint));\n  const fallback = breakpoints.map(({ fallback: fallback2 }) => fallback2);\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: options.ssr }\n  );\n  const index = values.lastIndexOf(true);\n  return breakpoints[index]?.breakpoint ?? options.fallback;\n}\nfunction useBreakpointValue(value, opts) {\n  const sys = useChakraContext();\n  const normalized = sys.normalizeValue(value);\n  const breakpoint = useBreakpoint({\n    breakpoints: Object.keys(normalized),\n    ...opts\n  });\n  return normalized[breakpoint];\n}\n\nexport { useBreakpoint, useBreakpointValue };\n"],"mappings":"AAAA,YAAY;AACZ,YAAY;;AACZ,SAASA,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,SAASC,aAAaA,CAAA,EAAe;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACjCD,OAAO,CAACI,QAAQ,KAAKJ,OAAO,CAACI,QAAQ,GAAG,MAAM,CAAC;EAC/C,MAAMC,GAAG,GAAGR,gBAAgB,CAAC,CAAC;EAC9B,IAAIS,cAAc,GAAG,KAAK;EAC1B,MAAMC,cAAc,GAAGF,GAAG,CAACG,WAAW,CAACC,MAAM;EAC7C,MAAMD,WAAW,GAAGD,cAAc,CAACG,GAAG,CAACC,IAAA,IAA+B;IAAA,IAA9B;MAAEC,GAAG;MAAEC,IAAI,EAAEC;IAAW,CAAC,GAAAH,IAAA;IAC/D,MAAMI,IAAI,GAAG;MACXD,UAAU;MACVE,KAAK,EAAE,eAAeJ,GAAG,GAAG;MAC5BR,QAAQ,EAAE,CAACE;IACb,CAAC;IACD,IAAIQ,UAAU,KAAKd,OAAO,CAACI,QAAQ,EAAE;MACnCE,cAAc,GAAG,IAAI;IACvB;IACA,OAAOS,IAAI;EACb,CAAC,CAAC,CAACE,MAAM,CAACC,KAAA;IAAA,IAAC;MAAEJ;IAAW,CAAC,GAAAI,KAAA;IAAA,OAAK,CAAC,CAAClB,OAAO,CAACQ,WAAW,EAAEW,QAAQ,CAACL,UAAU,CAAC;EAAA,EAAC;EAC1E,MAAMV,QAAQ,GAAGI,WAAW,CAACE,GAAG,CAACU,KAAA;IAAA,IAAC;MAAEhB,QAAQ,EAAEiB;IAAU,CAAC,GAAAD,KAAA;IAAA,OAAKC,SAAS;EAAA,EAAC;EACxE,MAAMZ,MAAM,GAAGX,aAAa,CAC1BU,WAAW,CAACE,GAAG,CAAEY,EAAE,IAAKA,EAAE,CAACN,KAAK,CAAC,EACjC;IAAEZ,QAAQ;IAAEmB,GAAG,EAAEvB,OAAO,CAACuB;EAAI,CAC/B,CAAC;EACD,MAAMC,KAAK,GAAGf,MAAM,CAACgB,WAAW,CAAC,IAAI,CAAC;EACtC,OAAOjB,WAAW,CAACgB,KAAK,CAAC,EAAEV,UAAU,IAAId,OAAO,CAACI,QAAQ;AAC3D;AACA,SAASsB,kBAAkBA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACvC,MAAMvB,GAAG,GAAGR,gBAAgB,CAAC,CAAC;EAC9B,MAAMgC,UAAU,GAAGxB,GAAG,CAACyB,cAAc,CAACH,KAAK,CAAC;EAC5C,MAAMb,UAAU,GAAGf,aAAa,CAAC;IAC/BS,WAAW,EAAEuB,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC;IACpC,GAAGD;EACL,CAAC,CAAC;EACF,OAAOC,UAAU,CAACf,UAAU,CAAC;AAC/B;AAEA,SAASf,aAAa,EAAE2B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}