{"ast":null,"code":"// src/splitter.anatomy.ts\nimport { createAnatomy } from \"@zag-js/anatomy\";\nvar anatomy = createAnatomy(\"splitter\").parts(\"root\", \"panel\", \"resizeTrigger\");\nvar parts = anatomy.build();\n\n// src/splitter.connect.ts\nimport { getEventKey, getEventStep } from \"@zag-js/dom-event\";\nimport { dataAttr } from \"@zag-js/dom-query\";\n\n// src/splitter.dom.ts\nimport { createScope, queryAll } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `splitter:${ctx.id}`,\n  getResizeTriggerId: (ctx, id) => ctx.ids?.resizeTrigger?.(id) ?? `splitter:${ctx.id}:splitter:${id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `splitter:${ctx.id}:label`,\n  getPanelId: (ctx, id) => ctx.ids?.panel?.(id) ?? `splitter:${ctx.id}:panel:${id}`,\n  getGlobalCursorId: ctx => `splitter:${ctx.id}:global-cursor`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getResizeTriggerEl: (ctx, id) => dom.getById(ctx, dom.getResizeTriggerId(ctx, id)),\n  getPanelEl: (ctx, id) => dom.getById(ctx, dom.getPanelId(ctx, id)),\n  getCursor(ctx) {\n    const x = ctx.isHorizontal;\n    let cursor = x ? \"col-resize\" : \"row-resize\";\n    if (ctx.activeResizeState.isAtMin) cursor = x ? \"e-resize\" : \"s-resize\";\n    if (ctx.activeResizeState.isAtMax) cursor = x ? \"w-resize\" : \"n-resize\";\n    return cursor;\n  },\n  getPanelStyle(ctx, id) {\n    const flexGrow = ctx.panels.find(panel => panel.id === id)?.size ?? \"0\";\n    return {\n      flexBasis: 0,\n      flexGrow,\n      flexShrink: 1,\n      overflow: \"hidden\"\n    };\n  },\n  getActiveHandleEl(ctx) {\n    const activeId = ctx.activeResizeId;\n    if (activeId == null) return;\n    return dom.getById(ctx, dom.getResizeTriggerId(ctx, activeId));\n  },\n  getResizeTriggerEls(ctx) {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    return queryAll(dom.getRootEl(ctx), `[role=separator][data-ownedby='${ownerId}']`);\n  },\n  setupGlobalCursor(ctx) {\n    const styleEl = dom.getById(ctx, dom.getGlobalCursorId(ctx));\n    const textContent = `* { cursor: ${dom.getCursor(ctx)} !important; }`;\n    if (styleEl) {\n      styleEl.textContent = textContent;\n    } else {\n      const style = dom.getDoc(ctx).createElement(\"style\");\n      style.id = dom.getGlobalCursorId(ctx);\n      style.textContent = textContent;\n      dom.getDoc(ctx).head.appendChild(style);\n    }\n  },\n  removeGlobalCursor(ctx) {\n    dom.getById(ctx, dom.getGlobalCursorId(ctx))?.remove();\n  }\n});\n\n// src/splitter.utils.ts\nfunction validateSize(key, size) {\n  if (Math.floor(size) > 100) {\n    throw new Error(`Total ${key} of panels cannot be greater than 100`);\n  }\n}\nfunction getNormalizedPanels(ctx) {\n  let numOfPanelsWithoutSize = 0;\n  let totalSize = 0;\n  let totalMinSize = 0;\n  const panels = ctx.size.map(panel => {\n    const minSize = panel.minSize ?? 0;\n    const maxSize = panel.maxSize ?? 100;\n    totalMinSize += minSize;\n    if (panel.size == null) {\n      numOfPanelsWithoutSize++;\n    } else {\n      totalSize += panel.size;\n    }\n    return {\n      ...panel,\n      minSize,\n      maxSize\n    };\n  });\n  validateSize(\"minSize\", totalMinSize);\n  validateSize(\"size\", totalSize);\n  let end = 0;\n  let remainingSize = 0;\n  const result = panels.map(panel => {\n    let start = end;\n    if (panel.size != null) {\n      end += panel.size;\n      remainingSize = panel.size - panel.minSize;\n      return {\n        ...panel,\n        start,\n        end,\n        remainingSize\n      };\n    }\n    const size = (100 - totalSize) / numOfPanelsWithoutSize;\n    end += size;\n    remainingSize = size - panel.minSize;\n    return {\n      ...panel,\n      size,\n      start,\n      end,\n      remainingSize\n    };\n  });\n  return result;\n}\nfunction getHandlePanels(ctx) {\n  let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ctx.activeResizeId;\n  const [beforeId, afterId] = id?.split(\":\") ?? [];\n  if (!beforeId || !afterId) return;\n  const beforeIndex = ctx.previousPanels.findIndex(panel => panel.id === beforeId);\n  const afterIndex = ctx.previousPanels.findIndex(panel => panel.id === afterId);\n  if (beforeIndex === -1 || afterIndex === -1) return;\n  const before = ctx.previousPanels[beforeIndex];\n  const after = ctx.previousPanels[afterIndex];\n  return {\n    before: {\n      ...before,\n      index: beforeIndex\n    },\n    after: {\n      ...after,\n      index: afterIndex\n    }\n  };\n}\nfunction getHandleBounds(ctx) {\n  let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ctx.activeResizeId;\n  const panels = getHandlePanels(ctx, id);\n  if (!panels) return;\n  const {\n    before,\n    after\n  } = panels;\n  return {\n    min: Math.max(before.start + before.minSize, after.end - after.maxSize),\n    max: Math.min(after.end - after.minSize, before.maxSize + before.start)\n  };\n}\nfunction getPanelBounds(ctx, id) {\n  const bounds = getHandleBounds(ctx, id);\n  const panels = getHandlePanels(ctx, id);\n  if (!bounds || !panels) return;\n  const {\n    before,\n    after\n  } = panels;\n  const beforeMin = Math.abs(before.start - bounds.min);\n  const afterMin = after.size + (before.size - beforeMin);\n  const beforeMax = Math.abs(before.start - bounds.max);\n  const afterMax = after.size - (beforeMax - before.size);\n  return {\n    before: {\n      index: before.index,\n      min: beforeMin,\n      max: beforeMax,\n      isAtMin: beforeMin === before.size,\n      isAtMax: beforeMax === before.size,\n      up(step) {\n        return Math.min(before.size + step, beforeMax);\n      },\n      down(step) {\n        return Math.max(before.size - step, beforeMin);\n      }\n    },\n    after: {\n      index: after.index,\n      min: afterMin,\n      max: afterMax,\n      isAtMin: afterMin === after.size,\n      isAtMax: afterMax === after.size,\n      up(step) {\n        return Math.min(after.size + step, afterMin);\n      },\n      down(step) {\n        return Math.max(after.size - step, afterMax);\n      }\n    }\n  };\n}\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n// src/splitter.connect.ts\nfunction connect(state, send, normalize) {\n  const horizontal = state.context.isHorizontal;\n  const focused = state.hasTag(\"focus\");\n  const dragging = state.matches(\"dragging\");\n  const panels = state.context.panels;\n  function getResizeTriggerState(props2) {\n    const {\n      id,\n      disabled\n    } = props2;\n    const ids = id.split(\":\");\n    const panelIds = ids.map(id2 => dom.getPanelId(state.context, id2));\n    const panels2 = getHandleBounds(state.context, id);\n    return {\n      disabled: !!disabled,\n      focused: state.context.activeResizeId === id && focused,\n      panelIds,\n      min: panels2?.min,\n      max: panels2?.max,\n      value: 0\n    };\n  }\n  return {\n    focused,\n    dragging,\n    getResizeTriggerState,\n    bounds: getHandleBounds(state.context),\n    setToMinSize(id) {\n      const panel = panels.find(panel2 => panel2.id === id);\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size: panel?.minSize,\n        src: \"setToMinSize\"\n      });\n    },\n    setToMaxSize(id) {\n      const panel = panels.find(panel2 => panel2.id === id);\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size: panel?.maxSize,\n        src: \"setToMaxSize\"\n      });\n    },\n    setSize(id, size) {\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-orientation\": state.context.orientation,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        style: {\n          display: \"flex\",\n          flexDirection: horizontal ? \"row\" : \"column\",\n          height: \"100%\",\n          width: \"100%\",\n          overflow: \"hidden\"\n        }\n      });\n    },\n    getPanelProps(props2) {\n      const {\n        id\n      } = props2;\n      return normalize.element({\n        ...parts.panel.attrs,\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        id: dom.getPanelId(state.context, id),\n        \"data-ownedby\": dom.getRootId(state.context),\n        style: dom.getPanelStyle(state.context, id)\n      });\n    },\n    getResizeTriggerProps(props2) {\n      const {\n        id,\n        disabled,\n        step = 1\n      } = props2;\n      const triggerState = getResizeTriggerState(props2);\n      return normalize.element({\n        ...parts.resizeTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getResizeTriggerId(state.context, id),\n        role: \"separator\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        tabIndex: disabled ? void 0 : 0,\n        \"aria-valuenow\": triggerState.value,\n        \"aria-valuemin\": triggerState.min,\n        \"aria-valuemax\": triggerState.max,\n        \"data-orientation\": state.context.orientation,\n        \"aria-orientation\": state.context.orientation,\n        \"aria-controls\": triggerState.panelIds.join(\" \"),\n        \"data-focus\": dataAttr(triggerState.focused),\n        \"data-disabled\": dataAttr(disabled),\n        style: {\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n          flex: \"0 0 auto\",\n          pointerEvents: dragging && !triggerState.focused ? \"none\" : void 0,\n          cursor: horizontal ? \"col-resize\" : \"row-resize\",\n          [horizontal ? \"minHeight\" : \"minWidth\"]: \"0\"\n        },\n        onPointerDown(event) {\n          if (disabled) {\n            event.preventDefault();\n            return;\n          }\n          send({\n            type: \"POINTER_DOWN\",\n            id\n          });\n          event.currentTarget.setPointerCapture(event.pointerId);\n          event.preventDefault();\n          event.stopPropagation();\n        },\n        onPointerUp(event) {\n          if (disabled) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        onPointerOver() {\n          if (disabled) return;\n          send({\n            type: \"POINTER_OVER\",\n            id\n          });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({\n            type: \"POINTER_LEAVE\",\n            id\n          });\n        },\n        onBlur() {\n          send(\"BLUR\");\n        },\n        onFocus() {\n          send({\n            type: \"FOCUS\",\n            id\n          });\n        },\n        onDoubleClick() {\n          if (disabled) return;\n          send({\n            type: \"DOUBLE_CLICK\",\n            id\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          const moveStep = getEventStep(event) * step;\n          const keyMap = {\n            Enter() {\n              send(\"ENTER\");\n            },\n            ArrowUp() {\n              send({\n                type: \"ARROW_UP\",\n                step: moveStep\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"ARROW_DOWN\",\n                step: moveStep\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"ARROW_LEFT\",\n                step: moveStep\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"ARROW_RIGHT\",\n                step: moveStep\n              });\n            },\n            Home() {\n              send(\"HOME\");\n            },\n            End() {\n              send(\"END\");\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    }\n  };\n}\n\n// src/splitter.machine.ts\nimport { createMachine } from \"@zag-js/core\";\nimport { getRelativePoint, trackPointerMove } from \"@zag-js/dom-event\";\nimport { raf } from \"@zag-js/dom-query\";\nimport { compact } from \"@zag-js/utils\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"splitter\",\n    initial: \"idle\",\n    context: {\n      orientation: \"horizontal\",\n      activeResizeId: null,\n      previousPanels: [],\n      size: [],\n      initialSize: [],\n      activeResizeState: {\n        isAtMin: false,\n        isAtMax: false\n      },\n      ...ctx\n    },\n    created: [\"setPreviousPanels\", \"setInitialSize\"],\n    watch: {\n      size: [\"setActiveResizeState\"]\n    },\n    computed: {\n      isHorizontal: ctx2 => ctx2.orientation === \"horizontal\",\n      panels: ctx2 => getNormalizedPanels(ctx2)\n    },\n    on: {\n      SET_PANEL_SIZE: {\n        actions: \"setPanelSize\"\n      }\n    },\n    states: {\n      idle: {\n        entry: [\"clearActiveHandleId\"],\n        on: {\n          POINTER_OVER: {\n            target: \"hover:temp\",\n            actions: [\"setActiveHandleId\"]\n          },\n          FOCUS: {\n            target: \"focused\",\n            actions: [\"setActiveHandleId\"]\n          },\n          DOUBLE_CLICK: {\n            actions: [\"resetStartPanel\", \"setPreviousPanels\"]\n          }\n        }\n      },\n      \"hover:temp\": {\n        after: {\n          HOVER_DELAY: \"hover\"\n        },\n        on: {\n          POINTER_DOWN: {\n            target: \"dragging\",\n            actions: [\"setActiveHandleId\"]\n          },\n          POINTER_LEAVE: \"idle\"\n        }\n      },\n      hover: {\n        tags: [\"focus\"],\n        on: {\n          POINTER_DOWN: \"dragging\",\n          POINTER_LEAVE: \"idle\"\n        }\n      },\n      focused: {\n        tags: [\"focus\"],\n        on: {\n          BLUR: \"idle\",\n          POINTER_DOWN: {\n            target: \"dragging\",\n            actions: [\"setActiveHandleId\"]\n          },\n          ARROW_LEFT: {\n            guard: \"isHorizontal\",\n            actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_RIGHT: {\n            guard: \"isHorizontal\",\n            actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_UP: {\n            guard: \"isVertical\",\n            actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_DOWN: {\n            guard: \"isVertical\",\n            actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n          },\n          ENTER: [{\n            guard: \"isStartPanelAtMax\",\n            actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n          }, {\n            actions: [\"setStartPanelToMax\", \"setPreviousPanels\"]\n          }],\n          HOME: {\n            actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n          },\n          END: {\n            actions: [\"setStartPanelToMax\", \"setPreviousPanels\"]\n          }\n        }\n      },\n      dragging: {\n        tags: [\"focus\"],\n        entry: \"focusResizeHandle\",\n        activities: [\"trackPointerMove\"],\n        on: {\n          POINTER_MOVE: {\n            actions: [\"setPointerValue\", \"setGlobalCursor\", \"invokeOnResize\"]\n          },\n          POINTER_UP: {\n            target: \"focused\",\n            actions: [\"setPreviousPanels\", \"clearGlobalCursor\", \"blurResizeHandle\", \"invokeOnResizeEnd\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackPointerMove: (ctx2, _evt, _ref) => {\n        let {\n          send\n        } = _ref;\n        const doc = dom.getDoc(ctx2);\n        return trackPointerMove(doc, {\n          onPointerMove(info) {\n            send({\n              type: \"POINTER_MOVE\",\n              point: info.point\n            });\n          },\n          onPointerUp() {\n            send(\"POINTER_UP\");\n          }\n        });\n      }\n    },\n    guards: {\n      isStartPanelAtMin: ctx2 => ctx2.activeResizeState.isAtMin,\n      isStartPanelAtMax: ctx2 => ctx2.activeResizeState.isAtMax,\n      isHorizontal: ctx2 => ctx2.isHorizontal,\n      isVertical: ctx2 => !ctx2.isHorizontal\n    },\n    delays: {\n      HOVER_DELAY: 250\n    },\n    actions: {\n      setGlobalCursor(ctx2) {\n        dom.setupGlobalCursor(ctx2);\n      },\n      clearGlobalCursor(ctx2) {\n        dom.removeGlobalCursor(ctx2);\n      },\n      invokeOnResize(ctx2) {\n        ctx2.onSizeChange?.({\n          size: Array.from(ctx2.size),\n          activeHandleId: ctx2.activeResizeId\n        });\n      },\n      invokeOnResizeEnd(ctx2) {\n        ctx2.onSizeChangeEnd?.({\n          size: Array.from(ctx2.size),\n          activeHandleId: ctx2.activeResizeId\n        });\n      },\n      setActiveHandleId(ctx2, evt) {\n        ctx2.activeResizeId = evt.id;\n      },\n      clearActiveHandleId(ctx2) {\n        ctx2.activeResizeId = null;\n      },\n      setInitialSize(ctx2) {\n        ctx2.initialSize = ctx2.panels.slice().map(panel => ({\n          id: panel.id,\n          size: panel.size\n        }));\n      },\n      setPanelSize(ctx2, evt) {\n        const {\n          id,\n          size\n        } = evt;\n        ctx2.size = ctx2.size.map(panel => {\n          const panelSize = clamp(size, panel.minSize ?? 0, panel.maxSize ?? 100);\n          return panel.id === id ? {\n            ...panel,\n            size: panelSize\n          } : panel;\n        });\n      },\n      setStartPanelToMin(ctx2) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.min;\n        ctx2.size[after.index].size = after.min;\n      },\n      setStartPanelToMax(ctx2) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.max;\n        ctx2.size[after.index].size = after.max;\n      },\n      expandStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.up(evt.step);\n        ctx2.size[after.index].size = after.down(evt.step);\n      },\n      shrinkStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.down(evt.step);\n        ctx2.size[after.index].size = after.up(evt.step);\n      },\n      resetStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2, evt.id);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = ctx2.initialSize[before.index].size;\n        ctx2.size[after.index].size = ctx2.initialSize[after.index].size;\n      },\n      focusResizeHandle(ctx2) {\n        raf(() => {\n          dom.getActiveHandleEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      blurResizeHandle(ctx2) {\n        raf(() => {\n          dom.getActiveHandleEl(ctx2)?.blur();\n        });\n      },\n      setPreviousPanels(ctx2) {\n        ctx2.previousPanels = ctx2.panels.slice();\n      },\n      setActiveResizeState(ctx2) {\n        const panels = getPanelBounds(ctx2);\n        if (!panels) return;\n        const {\n          before\n        } = panels;\n        ctx2.activeResizeState = {\n          isAtMin: before.isAtMin,\n          isAtMax: before.isAtMax\n        };\n      },\n      setPointerValue(ctx2, evt) {\n        const panels = getHandlePanels(ctx2);\n        const bounds = getHandleBounds(ctx2);\n        if (!panels || !bounds) return;\n        const rootEl = dom.getRootEl(ctx2);\n        if (!rootEl) return;\n        const relativePoint = getRelativePoint(evt.point, rootEl);\n        const percentValue = relativePoint.getPercentValue({\n          dir: ctx2.dir,\n          orientation: ctx2.orientation\n        });\n        let pointValue = percentValue * 100;\n        ctx2.activeResizeState = {\n          isAtMin: pointValue < bounds.min,\n          isAtMax: pointValue > bounds.max\n        };\n        pointValue = clamp(pointValue, bounds.min, bounds.max);\n        const {\n          before,\n          after\n        } = panels;\n        const offset = pointValue - before.end;\n        ctx2.size[before.index].size = before.size + offset;\n        ctx2.size[after.index].size = after.size - offset;\n      }\n    }\n  });\n}\n\n// src/splitter.props.ts\nimport { createProps } from \"@zag-js/types\";\nimport { createSplitProps } from \"@zag-js/utils\";\nvar props = createProps()([\"dir\", \"getRootNode\", \"id\", \"ids\", \"onSizeChange\", \"onSizeChangeEnd\", \"orientation\", \"size\"]);\nvar splitProps = createSplitProps(props);\nvar panelProps = createProps()([\"id\", \"snapSize\"]);\nvar splitPanelProps = createSplitProps(panelProps);\nvar resizeTriggerProps = createProps()([\"disabled\", \"id\", \"step\"]);\nvar splitResizeTriggerProps = createSplitProps(resizeTriggerProps);\nexport { anatomy, connect, machine, panelProps, props, resizeTriggerProps, splitPanelProps, splitProps, splitResizeTriggerProps };","map":{"version":3,"names":["createAnatomy","anatomy","parts","build","getEventKey","getEventStep","dataAttr","createScope","queryAll","dom","getRootId","ctx","ids","root","id","getResizeTriggerId","resizeTrigger","getLabelId","label","getPanelId","panel","getGlobalCursorId","getRootEl","getById","getResizeTriggerEl","getPanelEl","getCursor","x","isHorizontal","cursor","activeResizeState","isAtMin","isAtMax","getPanelStyle","flexGrow","panels","find","size","flexBasis","flexShrink","overflow","getActiveHandleEl","activeId","activeResizeId","getResizeTriggerEls","ownerId","CSS","escape","setupGlobalCursor","styleEl","textContent","style","getDoc","createElement","head","appendChild","removeGlobalCursor","remove","validateSize","key","Math","floor","Error","getNormalizedPanels","numOfPanelsWithoutSize","totalSize","totalMinSize","map","minSize","maxSize","end","remainingSize","result","start","getHandlePanels","arguments","length","undefined","beforeId","afterId","split","beforeIndex","previousPanels","findIndex","afterIndex","before","after","index","getHandleBounds","min","max","getPanelBounds","bounds","beforeMin","abs","afterMin","beforeMax","afterMax","up","step","down","clamp","value","connect","state","send","normalize","horizontal","context","focused","hasTag","dragging","matches","getResizeTriggerState","props2","disabled","panelIds","id2","panels2","setToMinSize","panel2","type","src","setToMaxSize","setSize","getRootProps","element","attrs","orientation","dir","display","flexDirection","height","width","getPanelProps","getResizeTriggerProps","triggerState","role","tabIndex","join","touchAction","userSelect","WebkitUserSelect","flex","pointerEvents","onPointerDown","event","preventDefault","currentTarget","setPointerCapture","pointerId","stopPropagation","onPointerUp","hasPointerCapture","releasePointerCapture","onPointerOver","onPointerLeave","onBlur","onFocus","onDoubleClick","onKeyDown","defaultPrevented","moveStep","keyMap","Enter","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Home","End","exec","createMachine","getRelativePoint","trackPointerMove","raf","compact","machine","userContext","initial","initialSize","created","watch","computed","ctx2","on","SET_PANEL_SIZE","actions","states","idle","entry","POINTER_OVER","target","FOCUS","DOUBLE_CLICK","HOVER_DELAY","POINTER_DOWN","POINTER_LEAVE","hover","tags","BLUR","ARROW_LEFT","guard","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","ENTER","HOME","END","activities","POINTER_MOVE","POINTER_UP","_evt","_ref","doc","onPointerMove","info","point","guards","isStartPanelAtMin","isStartPanelAtMax","isVertical","delays","setGlobalCursor","clearGlobalCursor","invokeOnResize","onSizeChange","Array","from","activeHandleId","invokeOnResizeEnd","onSizeChangeEnd","setActiveHandleId","evt","clearActiveHandleId","setInitialSize","slice","setPanelSize","panelSize","setStartPanelToMin","setStartPanelToMax","expandStartPanel","shrinkStartPanel","resetStartPanel","focusResizeHandle","focus","preventScroll","blurResizeHandle","blur","setPreviousPanels","setActiveResizeState","setPointerValue","rootEl","relativePoint","percentValue","getPercentValue","pointValue","offset","createProps","createSplitProps","props","splitProps","panelProps","splitPanelProps","resizeTriggerProps","splitResizeTriggerProps"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.anatomy.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.connect.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.dom.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.utils.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.machine.ts","/Users/rishil/AIM-MedVisor/node_modules/@zag-js/splitter/src/splitter.props.ts"],"sourcesContent":["import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"splitter\").parts(\"root\", \"panel\", \"resizeTrigger\")\n\nexport const parts = anatomy.build()\n","import { getEventKey, getEventStep, type EventKeyMap } from \"@zag-js/dom-event\"\nimport { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./splitter.anatomy\"\nimport { dom } from \"./splitter.dom\"\nimport type { MachineApi, ResizeTriggerProps, ResizeTriggerState, Send, State } from \"./splitter.types\"\nimport { getHandleBounds } from \"./splitter.utils\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const horizontal = state.context.isHorizontal\n  const focused = state.hasTag(\"focus\")\n  const dragging = state.matches(\"dragging\")\n  const panels = state.context.panels\n\n  function getResizeTriggerState(props: ResizeTriggerProps): ResizeTriggerState {\n    const { id, disabled } = props\n    const ids = id.split(\":\")\n    const panelIds = ids.map((id) => dom.getPanelId(state.context, id))\n    const panels = getHandleBounds(state.context, id)\n\n    return {\n      disabled: !!disabled,\n      focused: state.context.activeResizeId === id && focused,\n      panelIds,\n      min: panels?.min,\n      max: panels?.max,\n      value: 0,\n    }\n  }\n\n  return {\n    focused: focused,\n    dragging: dragging,\n    getResizeTriggerState,\n    bounds: getHandleBounds(state.context),\n    setToMinSize(id) {\n      const panel = panels.find((panel) => panel.id === id)\n      send({ type: \"SET_PANEL_SIZE\", id, size: panel?.minSize, src: \"setToMinSize\" })\n    },\n    setToMaxSize(id) {\n      const panel = panels.find((panel) => panel.id === id)\n      send({ type: \"SET_PANEL_SIZE\", id, size: panel?.maxSize, src: \"setToMaxSize\" })\n    },\n    setSize(id, size) {\n      send({ type: \"SET_PANEL_SIZE\", id, size })\n    },\n\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-orientation\": state.context.orientation,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        style: {\n          display: \"flex\",\n          flexDirection: horizontal ? \"row\" : \"column\",\n          height: \"100%\",\n          width: \"100%\",\n          overflow: \"hidden\",\n        },\n      })\n    },\n\n    getPanelProps(props) {\n      const { id } = props\n      return normalize.element({\n        ...parts.panel.attrs,\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        id: dom.getPanelId(state.context, id),\n        \"data-ownedby\": dom.getRootId(state.context),\n        style: dom.getPanelStyle(state.context, id),\n      })\n    },\n\n    getResizeTriggerProps(props) {\n      const { id, disabled, step = 1 } = props\n      const triggerState = getResizeTriggerState(props)\n\n      return normalize.element({\n        ...parts.resizeTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getResizeTriggerId(state.context, id),\n        role: \"separator\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        tabIndex: disabled ? undefined : 0,\n        \"aria-valuenow\": triggerState.value,\n        \"aria-valuemin\": triggerState.min,\n        \"aria-valuemax\": triggerState.max,\n        \"data-orientation\": state.context.orientation,\n        \"aria-orientation\": state.context.orientation,\n        \"aria-controls\": triggerState.panelIds.join(\" \"),\n        \"data-focus\": dataAttr(triggerState.focused),\n        \"data-disabled\": dataAttr(disabled),\n        style: {\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n          flex: \"0 0 auto\",\n          pointerEvents: dragging && !triggerState.focused ? \"none\" : undefined,\n          cursor: horizontal ? \"col-resize\" : \"row-resize\",\n          [horizontal ? \"minHeight\" : \"minWidth\"]: \"0\",\n        },\n        onPointerDown(event) {\n          if (disabled) {\n            event.preventDefault()\n            return\n          }\n          send({ type: \"POINTER_DOWN\", id })\n          event.currentTarget.setPointerCapture(event.pointerId)\n          event.preventDefault()\n          event.stopPropagation()\n        },\n        onPointerUp(event) {\n          if (disabled) return\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId)\n          }\n        },\n        onPointerOver() {\n          if (disabled) return\n          send({ type: \"POINTER_OVER\", id })\n        },\n        onPointerLeave() {\n          if (disabled) return\n          send({ type: \"POINTER_LEAVE\", id })\n        },\n        onBlur() {\n          send(\"BLUR\")\n        },\n        onFocus() {\n          send({ type: \"FOCUS\", id })\n        },\n        onDoubleClick() {\n          if (disabled) return\n          send({ type: \"DOUBLE_CLICK\", id })\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return\n          if (disabled) return\n\n          const moveStep = getEventStep(event) * step\n\n          const keyMap: EventKeyMap = {\n            Enter() {\n              send(\"ENTER\")\n            },\n            ArrowUp() {\n              send({ type: \"ARROW_UP\", step: moveStep })\n            },\n            ArrowDown() {\n              send({ type: \"ARROW_DOWN\", step: moveStep })\n            },\n            ArrowLeft() {\n              send({ type: \"ARROW_LEFT\", step: moveStep })\n            },\n            ArrowRight() {\n              send({ type: \"ARROW_RIGHT\", step: moveStep })\n            },\n            Home() {\n              send(\"HOME\")\n            },\n            End() {\n              send(\"END\")\n            },\n          }\n\n          const key = getEventKey(event, state.context)\n          const exec = keyMap[key]\n\n          if (exec) {\n            exec(event)\n            event.preventDefault()\n          }\n        },\n      })\n    },\n  }\n}\n","import { createScope, queryAll } from \"@zag-js/dom-query\"\nimport type { JSX, Style } from \"@zag-js/types\"\nimport type { MachineContext as Ctx, PanelId } from \"./splitter.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `splitter:${ctx.id}`,\n  getResizeTriggerId: (ctx: Ctx, id: string) => ctx.ids?.resizeTrigger?.(id) ?? `splitter:${ctx.id}:splitter:${id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `splitter:${ctx.id}:label`,\n  getPanelId: (ctx: Ctx, id: string | number) => ctx.ids?.panel?.(id) ?? `splitter:${ctx.id}:panel:${id}`,\n  getGlobalCursorId: (ctx: Ctx) => `splitter:${ctx.id}:global-cursor`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getResizeTriggerEl: (ctx: Ctx, id: string) => dom.getById(ctx, dom.getResizeTriggerId(ctx, id)),\n  getPanelEl: (ctx: Ctx, id: string | number) => dom.getById(ctx, dom.getPanelId(ctx, id)),\n\n  getCursor(ctx: Ctx) {\n    const x = ctx.isHorizontal\n    let cursor: Style[\"cursor\"] = x ? \"col-resize\" : \"row-resize\"\n    if (ctx.activeResizeState.isAtMin) cursor = x ? \"e-resize\" : \"s-resize\"\n    if (ctx.activeResizeState.isAtMax) cursor = x ? \"w-resize\" : \"n-resize\"\n    return cursor\n  },\n\n  getPanelStyle(ctx: Ctx, id: PanelId): JSX.CSSProperties {\n    const flexGrow = ctx.panels.find((panel) => panel.id === id)?.size ?? \"0\"\n    return {\n      flexBasis: 0,\n      flexGrow,\n      flexShrink: 1,\n      overflow: \"hidden\",\n    }\n  },\n\n  getActiveHandleEl(ctx: Ctx) {\n    const activeId = ctx.activeResizeId\n    if (activeId == null) return\n    return dom.getById(ctx, dom.getResizeTriggerId(ctx, activeId))\n  },\n\n  getResizeTriggerEls(ctx: Ctx) {\n    const ownerId = CSS.escape(dom.getRootId(ctx))\n    return queryAll(dom.getRootEl(ctx), `[role=separator][data-ownedby='${ownerId}']`)\n  },\n\n  setupGlobalCursor(ctx: Ctx) {\n    const styleEl = dom.getById(ctx, dom.getGlobalCursorId(ctx))\n    const textContent = `* { cursor: ${dom.getCursor(ctx)} !important; }`\n    if (styleEl) {\n      styleEl.textContent = textContent\n    } else {\n      const style = dom.getDoc(ctx).createElement(\"style\")\n      style.id = dom.getGlobalCursorId(ctx)\n      style.textContent = textContent\n      dom.getDoc(ctx).head.appendChild(style)\n    }\n  },\n\n  removeGlobalCursor(ctx: Ctx) {\n    dom.getById(ctx, dom.getGlobalCursorId(ctx))?.remove()\n  },\n})\n","import type { MachineContext as Ctx, NormalizedPanelData } from \"./splitter.types\"\n\nfunction validateSize(key: string, size: number) {\n  if (Math.floor(size) > 100) {\n    throw new Error(`Total ${key} of panels cannot be greater than 100`)\n  }\n}\n\nexport function getNormalizedPanels(ctx: Ctx): NormalizedPanelData {\n  let numOfPanelsWithoutSize = 0\n  let totalSize = 0\n  let totalMinSize = 0\n\n  const panels = ctx.size.map((panel) => {\n    const minSize = panel.minSize ?? 0\n    const maxSize = panel.maxSize ?? 100\n\n    totalMinSize += minSize\n\n    if (panel.size == null) {\n      numOfPanelsWithoutSize++\n    } else {\n      totalSize += panel.size\n    }\n\n    return {\n      ...panel,\n      minSize,\n      maxSize,\n    }\n  })\n\n  validateSize(\"minSize\", totalMinSize)\n  validateSize(\"size\", totalSize)\n\n  let end = 0\n  let remainingSize = 0\n\n  const result = panels.map((panel) => {\n    let start = end\n\n    if (panel.size != null) {\n      end += panel.size\n      remainingSize = panel.size - panel.minSize\n      return {\n        ...panel,\n        start,\n        end,\n        remainingSize,\n      }\n    }\n\n    const size = (100 - totalSize) / numOfPanelsWithoutSize\n    end += size\n    remainingSize = size - panel.minSize\n\n    return { ...panel, size, start, end, remainingSize }\n  })\n\n  return result as NormalizedPanelData\n}\n\nexport function getHandlePanels(ctx: Ctx, id = ctx.activeResizeId) {\n  const [beforeId, afterId] = id?.split(\":\") ?? []\n  if (!beforeId || !afterId) return\n\n  const beforeIndex = ctx.previousPanels.findIndex((panel) => panel.id === beforeId)\n  const afterIndex = ctx.previousPanels.findIndex((panel) => panel.id === afterId)\n  if (beforeIndex === -1 || afterIndex === -1) return\n\n  const before = ctx.previousPanels[beforeIndex]\n  const after = ctx.previousPanels[afterIndex]\n\n  return {\n    before: {\n      ...before,\n      index: beforeIndex,\n    },\n    after: {\n      ...after,\n      index: afterIndex,\n    },\n  }\n}\n\nexport function getHandleBounds(ctx: Ctx, id = ctx.activeResizeId) {\n  const panels = getHandlePanels(ctx, id)\n  if (!panels) return\n\n  const { before, after } = panels\n\n  return {\n    min: Math.max(before.start + before.minSize, after.end - after.maxSize),\n    max: Math.min(after.end - after.minSize, before.maxSize + before.start),\n  }\n}\n\nexport function getPanelBounds(ctx: Ctx, id?: string | null) {\n  const bounds = getHandleBounds(ctx, id)\n  const panels = getHandlePanels(ctx, id)\n\n  if (!bounds || !panels) return\n  const { before, after } = panels\n\n  const beforeMin = Math.abs(before.start - bounds.min)\n  const afterMin = after.size + (before.size - beforeMin)\n\n  const beforeMax = Math.abs(before.start - bounds.max)\n  const afterMax = after.size - (beforeMax - before.size)\n\n  return {\n    before: {\n      index: before.index,\n      min: beforeMin,\n      max: beforeMax,\n      isAtMin: beforeMin === before.size,\n      isAtMax: beforeMax === before.size,\n      up(step: number) {\n        return Math.min(before.size + step, beforeMax)\n      },\n      down(step: number) {\n        return Math.max(before.size - step, beforeMin)\n      },\n    },\n    after: {\n      index: after.index,\n      min: afterMin,\n      max: afterMax,\n      isAtMin: afterMin === after.size,\n      isAtMax: afterMax === after.size,\n      up(step: number) {\n        return Math.min(after.size + step, afterMin)\n      },\n      down(step: number) {\n        return Math.max(after.size - step, afterMax)\n      },\n    },\n  }\n}\n\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { getRelativePoint, trackPointerMove } from \"@zag-js/dom-event\"\nimport { raf } from \"@zag-js/dom-query\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./splitter.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./splitter.types\"\nimport { clamp, getHandleBounds, getHandlePanels, getNormalizedPanels, getPanelBounds } from \"./splitter.utils\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"splitter\",\n      initial: \"idle\",\n      context: {\n        orientation: \"horizontal\",\n        activeResizeId: null,\n        previousPanels: [],\n        size: [],\n        initialSize: [],\n        activeResizeState: {\n          isAtMin: false,\n          isAtMax: false,\n        },\n        ...ctx,\n      },\n\n      created: [\"setPreviousPanels\", \"setInitialSize\"],\n\n      watch: {\n        size: [\"setActiveResizeState\"],\n      },\n\n      computed: {\n        isHorizontal: (ctx) => ctx.orientation === \"horizontal\",\n        panels: (ctx) => getNormalizedPanels(ctx),\n      },\n\n      on: {\n        SET_PANEL_SIZE: {\n          actions: \"setPanelSize\",\n        },\n      },\n      states: {\n        idle: {\n          entry: [\"clearActiveHandleId\"],\n          on: {\n            POINTER_OVER: {\n              target: \"hover:temp\",\n              actions: [\"setActiveHandleId\"],\n            },\n            FOCUS: {\n              target: \"focused\",\n              actions: [\"setActiveHandleId\"],\n            },\n            DOUBLE_CLICK: {\n              actions: [\"resetStartPanel\", \"setPreviousPanels\"],\n            },\n          },\n        },\n\n        \"hover:temp\": {\n          after: {\n            HOVER_DELAY: \"hover\",\n          },\n          on: {\n            POINTER_DOWN: {\n              target: \"dragging\",\n              actions: [\"setActiveHandleId\"],\n            },\n            POINTER_LEAVE: \"idle\",\n          },\n        },\n\n        hover: {\n          tags: [\"focus\"],\n          on: {\n            POINTER_DOWN: \"dragging\",\n            POINTER_LEAVE: \"idle\",\n          },\n        },\n\n        focused: {\n          tags: [\"focus\"],\n          on: {\n            BLUR: \"idle\",\n            POINTER_DOWN: {\n              target: \"dragging\",\n              actions: [\"setActiveHandleId\"],\n            },\n            ARROW_LEFT: {\n              guard: \"isHorizontal\",\n              actions: [\"shrinkStartPanel\", \"setPreviousPanels\"],\n            },\n            ARROW_RIGHT: {\n              guard: \"isHorizontal\",\n              actions: [\"expandStartPanel\", \"setPreviousPanels\"],\n            },\n            ARROW_UP: {\n              guard: \"isVertical\",\n              actions: [\"shrinkStartPanel\", \"setPreviousPanels\"],\n            },\n            ARROW_DOWN: {\n              guard: \"isVertical\",\n              actions: [\"expandStartPanel\", \"setPreviousPanels\"],\n            },\n            ENTER: [\n              {\n                guard: \"isStartPanelAtMax\",\n                actions: [\"setStartPanelToMin\", \"setPreviousPanels\"],\n              },\n              { actions: [\"setStartPanelToMax\", \"setPreviousPanels\"] },\n            ],\n            HOME: {\n              actions: [\"setStartPanelToMin\", \"setPreviousPanels\"],\n            },\n            END: {\n              actions: [\"setStartPanelToMax\", \"setPreviousPanels\"],\n            },\n          },\n        },\n\n        dragging: {\n          tags: [\"focus\"],\n          entry: \"focusResizeHandle\",\n          activities: [\"trackPointerMove\"],\n          on: {\n            POINTER_MOVE: {\n              actions: [\"setPointerValue\", \"setGlobalCursor\", \"invokeOnResize\"],\n            },\n            POINTER_UP: {\n              target: \"focused\",\n              actions: [\"setPreviousPanels\", \"clearGlobalCursor\", \"blurResizeHandle\", \"invokeOnResizeEnd\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackPointerMove: (ctx, _evt, { send }) => {\n          const doc = dom.getDoc(ctx)\n          return trackPointerMove(doc, {\n            onPointerMove(info) {\n              send({ type: \"POINTER_MOVE\", point: info.point })\n            },\n            onPointerUp() {\n              send(\"POINTER_UP\")\n            },\n          })\n        },\n      },\n      guards: {\n        isStartPanelAtMin: (ctx) => ctx.activeResizeState.isAtMin,\n        isStartPanelAtMax: (ctx) => ctx.activeResizeState.isAtMax,\n        isHorizontal: (ctx) => ctx.isHorizontal,\n        isVertical: (ctx) => !ctx.isHorizontal,\n      },\n      delays: {\n        HOVER_DELAY: 250,\n      },\n      actions: {\n        setGlobalCursor(ctx) {\n          dom.setupGlobalCursor(ctx)\n        },\n        clearGlobalCursor(ctx) {\n          dom.removeGlobalCursor(ctx)\n        },\n        invokeOnResize(ctx) {\n          ctx.onSizeChange?.({ size: Array.from(ctx.size), activeHandleId: ctx.activeResizeId })\n        },\n        invokeOnResizeEnd(ctx) {\n          ctx.onSizeChangeEnd?.({ size: Array.from(ctx.size), activeHandleId: ctx.activeResizeId })\n        },\n        setActiveHandleId(ctx, evt) {\n          ctx.activeResizeId = evt.id\n        },\n        clearActiveHandleId(ctx) {\n          ctx.activeResizeId = null\n        },\n        setInitialSize(ctx) {\n          ctx.initialSize = ctx.panels.slice().map((panel) => ({\n            id: panel.id,\n            size: panel.size,\n          }))\n        },\n        setPanelSize(ctx, evt) {\n          const { id, size } = evt\n          ctx.size = ctx.size.map((panel) => {\n            const panelSize = clamp(size, panel.minSize ?? 0, panel.maxSize ?? 100)\n            return panel.id === id ? { ...panel, size: panelSize } : panel\n          })\n        },\n        setStartPanelToMin(ctx) {\n          const bounds = getPanelBounds(ctx)\n          if (!bounds) return\n          const { before, after } = bounds\n          ctx.size[before.index].size = before.min\n          ctx.size[after.index].size = after.min\n        },\n        setStartPanelToMax(ctx) {\n          const bounds = getPanelBounds(ctx)\n          if (!bounds) return\n          const { before, after } = bounds\n          ctx.size[before.index].size = before.max\n          ctx.size[after.index].size = after.max\n        },\n        expandStartPanel(ctx, evt) {\n          const bounds = getPanelBounds(ctx)\n          if (!bounds) return\n          const { before, after } = bounds\n          ctx.size[before.index].size = before.up(evt.step)\n          ctx.size[after.index].size = after.down(evt.step)\n        },\n        shrinkStartPanel(ctx, evt) {\n          const bounds = getPanelBounds(ctx)\n          if (!bounds) return\n          const { before, after } = bounds\n          ctx.size[before.index].size = before.down(evt.step)\n          ctx.size[after.index].size = after.up(evt.step)\n        },\n        resetStartPanel(ctx, evt) {\n          const bounds = getPanelBounds(ctx, evt.id)\n          if (!bounds) return\n          const { before, after } = bounds\n          ctx.size[before.index].size = ctx.initialSize[before.index].size\n          ctx.size[after.index].size = ctx.initialSize[after.index].size\n        },\n        focusResizeHandle(ctx) {\n          raf(() => {\n            dom.getActiveHandleEl(ctx)?.focus({ preventScroll: true })\n          })\n        },\n        blurResizeHandle(ctx) {\n          raf(() => {\n            dom.getActiveHandleEl(ctx)?.blur()\n          })\n        },\n        setPreviousPanels(ctx) {\n          ctx.previousPanels = ctx.panels.slice()\n        },\n        setActiveResizeState(ctx) {\n          const panels = getPanelBounds(ctx)\n          if (!panels) return\n          const { before } = panels\n          ctx.activeResizeState = {\n            isAtMin: before.isAtMin,\n            isAtMax: before.isAtMax,\n          }\n        },\n        setPointerValue(ctx, evt) {\n          const panels = getHandlePanels(ctx)\n          const bounds = getHandleBounds(ctx)\n\n          if (!panels || !bounds) return\n\n          const rootEl = dom.getRootEl(ctx)\n          if (!rootEl) return\n\n          const relativePoint = getRelativePoint(evt.point, rootEl)\n          const percentValue = relativePoint.getPercentValue({\n            dir: ctx.dir,\n            orientation: ctx.orientation,\n          })\n\n          let pointValue = percentValue * 100\n\n          // update active resize state here because we use `previousPanels` in the calculations\n          ctx.activeResizeState = {\n            isAtMin: pointValue < bounds.min,\n            isAtMax: pointValue > bounds.max,\n          }\n\n          pointValue = clamp(pointValue, bounds.min, bounds.max)\n\n          const { before, after } = panels\n\n          const offset = pointValue - before.end\n          ctx.size[before.index].size = before.size + offset\n          ctx.size[after.index].size = after.size - offset\n        },\n      },\n    },\n  )\n}\n","import { createProps } from \"@zag-js/types\"\nimport { createSplitProps } from \"@zag-js/utils\"\nimport type { PanelProps, ResizeTriggerProps, UserDefinedContext } from \"./splitter.types\"\n\nexport const props = createProps<UserDefinedContext>()([\n  \"dir\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onSizeChange\",\n  \"onSizeChangeEnd\",\n  \"orientation\",\n  \"size\",\n])\n\nexport const splitProps = createSplitProps<Partial<UserDefinedContext>>(props)\n\nexport const panelProps = createProps<PanelProps>()([\"id\", \"snapSize\"])\nexport const splitPanelProps = createSplitProps<PanelProps>(panelProps)\n\nexport const resizeTriggerProps = createProps<ResizeTriggerProps>()([\"disabled\", \"id\", \"step\"])\nexport const splitResizeTriggerProps = createSplitProps<ResizeTriggerProps>(resizeTriggerProps)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}