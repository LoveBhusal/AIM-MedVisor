{"ast":null,"code":"\"use strict\";\n\nconst BASE_FONT_SIZE = 16;\nconst UNIT_PX = \"px\";\nconst UNIT_EM = \"em\";\nconst UNIT_REM = \"rem\";\nfunction getUnit() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const DIGIT_REGEX = new RegExp(String.raw`-?\\d+(?:\\.\\d+|\\d*)`);\n  const UNIT_REGEX = new RegExp(`${UNIT_PX}|${UNIT_EM}|${UNIT_REM}`);\n  const unit = value.match(new RegExp(`${DIGIT_REGEX.source}(${UNIT_REGEX.source})`));\n  return unit?.[1];\n}\nfunction toPx() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (typeof value === \"number\") {\n    return `${value}px`;\n  }\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_PX) {\n    return value;\n  }\n  if (unit === UNIT_EM || unit === UNIT_REM) {\n    return `${parseFloat(value) * BASE_FONT_SIZE}${UNIT_PX}`;\n  }\n}\nfunction toEm() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_FONT_SIZE;\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_EM) {\n    return value;\n  }\n  if (unit === UNIT_PX) {\n    return `${parseFloat(value) / fontSize}${UNIT_EM}`;\n  }\n  if (unit === UNIT_REM) {\n    return `${parseFloat(value) * BASE_FONT_SIZE / fontSize}${UNIT_EM}`;\n  }\n}\nfunction toRem() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_REM) {\n    return value;\n  }\n  if (unit === UNIT_EM) {\n    return `${parseFloat(value)}${UNIT_REM}`;\n  }\n  if (unit === UNIT_PX) {\n    return `${parseFloat(value) / BASE_FONT_SIZE}${UNIT_REM}`;\n  }\n}\nexport { getUnit, toEm, toPx, toRem };","map":{"version":3,"names":["BASE_FONT_SIZE","UNIT_PX","UNIT_EM","UNIT_REM","getUnit","value","arguments","length","undefined","DIGIT_REGEX","RegExp","String","raw","UNIT_REGEX","unit","match","source","toPx","parseFloat","toEm","fontSize","toRem"],"sources":["/Users/rishil/AIM-MedVisor/node_modules/@chakra-ui/react/dist/esm/styled-system/unit-conversion.js"],"sourcesContent":["\"use strict\";\nconst BASE_FONT_SIZE = 16;\nconst UNIT_PX = \"px\";\nconst UNIT_EM = \"em\";\nconst UNIT_REM = \"rem\";\nfunction getUnit(value = \"\") {\n  const DIGIT_REGEX = new RegExp(String.raw`-?\\d+(?:\\.\\d+|\\d*)`);\n  const UNIT_REGEX = new RegExp(`${UNIT_PX}|${UNIT_EM}|${UNIT_REM}`);\n  const unit = value.match(\n    new RegExp(`${DIGIT_REGEX.source}(${UNIT_REGEX.source})`)\n  );\n  return unit?.[1];\n}\nfunction toPx(value = \"\") {\n  if (typeof value === \"number\") {\n    return `${value}px`;\n  }\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_PX) {\n    return value;\n  }\n  if (unit === UNIT_EM || unit === UNIT_REM) {\n    return `${parseFloat(value) * BASE_FONT_SIZE}${UNIT_PX}`;\n  }\n}\nfunction toEm(value = \"\", fontSize = BASE_FONT_SIZE) {\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_EM) {\n    return value;\n  }\n  if (unit === UNIT_PX) {\n    return `${parseFloat(value) / fontSize}${UNIT_EM}`;\n  }\n  if (unit === UNIT_REM) {\n    return `${parseFloat(value) * BASE_FONT_SIZE / fontSize}${UNIT_EM}`;\n  }\n}\nfunction toRem(value = \"\") {\n  const unit = getUnit(value);\n  if (!unit) return value;\n  if (unit === UNIT_REM) {\n    return value;\n  }\n  if (unit === UNIT_EM) {\n    return `${parseFloat(value)}${UNIT_REM}`;\n  }\n  if (unit === UNIT_PX) {\n    return `${parseFloat(value) / BASE_FONT_SIZE}${UNIT_REM}`;\n  }\n}\n\nexport { getUnit, toEm, toPx, toRem };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}